# coding: utf-8

"""
    Gamified Task Management API

    API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_gamification_dashboard200_response import GetGamificationDashboard200Response

class TestGetGamificationDashboard200Response(unittest.TestCase):
    """GetGamificationDashboard200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetGamificationDashboard200Response:
        """Test GetGamificationDashboard200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetGamificationDashboard200Response`
        """
        model = GetGamificationDashboard200Response()
        if include_optional:
            return GetGamificationDashboard200Response(
                success = True,
                data = openapi_client.models.get_gamification_dashboard_200_response_data.getGamificationDashboard_200_response_data(
                    user = openapi_client.models.get_gamification_dashboard_200_response_data_user.getGamificationDashboard_200_response_data_user(
                        username = '', 
                        level = 1.337, 
                        total_xp = 1.337, 
                        rank = 1.337, ), 
                    stats = openapi_client.models.get_gamification_dashboard_200_response_data_stats.getGamificationDashboard_200_response_data_stats(
                        level = 1.337, 
                        total_xp = 1.337, 
                        tasks_completed = 1.337, 
                        current_streak = 1.337, 
                        longest_streak = 1.337, 
                        badges = [
                            ''
                            ], 
                        next_level = openapi_client.models.next_level.nextLevel(), ), 
                    stories = openapi_client.models.stories.stories(), 
                    recent_achievements = [
                        ''
                        ], 
                    active_stories = [
                        ''
                        ], )
            )
        else:
            return GetGamificationDashboard200Response(
        )
        """

    def testGetGamificationDashboard200Response(self):
        """Test GetGamificationDashboard200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
