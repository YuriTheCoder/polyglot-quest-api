# coding: utf-8

"""
    Gamified Task Management API

    API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_user_stats200_response import GetUserStats200Response

class TestGetUserStats200Response(unittest.TestCase):
    """GetUserStats200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetUserStats200Response:
        """Test GetUserStats200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetUserStats200Response`
        """
        model = GetUserStats200Response()
        if include_optional:
            return GetUserStats200Response(
                success = True,
                data = openapi_client.models.get_user_stats_200_response_data.getUserStats_200_response_data(
                    users = openapi_client.models.get_user_stats_200_response_data_users.getUserStats_200_response_data_users(
                        total = 150, 
                        active = 140, 
                        inactive = 10, 
                        admins = 5, ), 
                    tasks = openapi_client.models.get_user_stats_200_response_data_tasks.getUserStats_200_response_data_tasks(
                        total = 1250, 
                        completed = 800, 
                        pending = 300, 
                        in_progress = 150, 
                        overdue = 45, ), 
                    most_active_users = [
                        openapi_client.models.get_user_stats_200_response_data_most_active_users_inner.getUserStats_200_response_data_mostActiveUsers_inner(
                            user_id = '', 
                            name = '', 
                            email = '', 
                            task_count = 56, )
                        ], )
            )
        else:
            return GetUserStats200Response(
        )
        """

    def testGetUserStats200Response(self):
        """Test GetUserStats200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
