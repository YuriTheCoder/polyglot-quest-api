/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetGamificationDashboard200ResponseData {
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<models::GetGamificationDashboard200ResponseDataUser>>,
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats: Option<Box<models::GetGamificationDashboard200ResponseDataStats>>,
    #[serde(rename = "stories", skip_serializing_if = "Option::is_none")]
    pub stories: Option<serde_json::Value>,
    #[serde(rename = "recentAchievements", skip_serializing_if = "Option::is_none")]
    pub recent_achievements: Option<Vec<String>>,
    #[serde(rename = "activeStories", skip_serializing_if = "Option::is_none")]
    pub active_stories: Option<Vec<String>>,
}

impl GetGamificationDashboard200ResponseData {
    pub fn new() -> GetGamificationDashboard200ResponseData {
        GetGamificationDashboard200ResponseData {
            user: None,
            stats: None,
            stories: None,
            recent_achievements: None,
            active_stories: None,
        }
    }
}

