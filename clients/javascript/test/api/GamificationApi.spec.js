/**
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GamifiedTaskManagementApi);
  }
}(this, function(expect, GamifiedTaskManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GamifiedTaskManagementApi.GamificationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GamificationApi', function() {
    describe('apiGamificationBadgesGet', function() {
      it('should call apiGamificationBadgesGet successfully', function(done) {
        //uncomment below and update the code to test apiGamificationBadgesGet
        //instance.apiGamificationBadgesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiGamificationDashboardGet', function() {
      it('should call apiGamificationDashboardGet successfully', function(done) {
        //uncomment below and update the code to test apiGamificationDashboardGet
        //instance.apiGamificationDashboardGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiGamificationGlobalStatsGet', function() {
      it('should call apiGamificationGlobalStatsGet successfully', function(done) {
        //uncomment below and update the code to test apiGamificationGlobalStatsGet
        //instance.apiGamificationGlobalStatsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiGamificationPreferencesPut', function() {
      it('should call apiGamificationPreferencesPut successfully', function(done) {
        //uncomment below and update the code to test apiGamificationPreferencesPut
        //instance.apiGamificationPreferencesPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiGamificationSharePost', function() {
      it('should call apiGamificationSharePost successfully', function(done) {
        //uncomment below and update the code to test apiGamificationSharePost
        //instance.apiGamificationSharePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiLeaderboardGet', function() {
      it('should call apiLeaderboardGet successfully', function(done) {
        //uncomment below and update the code to test apiLeaderboardGet
        //instance.apiLeaderboardGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTasksIdCompleteQuestPost', function() {
      it('should call apiTasksIdCompleteQuestPost successfully', function(done) {
        //uncomment below and update the code to test apiTasksIdCompleteQuestPost
        //instance.apiTasksIdCompleteQuestPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTasksStoriesGet', function() {
      it('should call apiTasksStoriesGet successfully', function(done) {
        //uncomment below and update the code to test apiTasksStoriesGet
        //instance.apiTasksStoriesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTasksStoriesIdGet', function() {
      it('should call apiTasksStoriesIdGet successfully', function(done) {
        //uncomment below and update the code to test apiTasksStoriesIdGet
        //instance.apiTasksStoriesIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiTasksStoryPost', function() {
      it('should call apiTasksStoryPost successfully', function(done) {
        //uncomment below and update the code to test apiTasksStoryPost
        //instance.apiTasksStoryPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
