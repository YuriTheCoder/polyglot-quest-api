/**
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeUserPassword200Response from '../model/ChangeUserPassword200Response';
import ChangeUserPasswordRequest from '../model/ChangeUserPasswordRequest';
import Error from '../model/Error';
import GetUserProfile200Response from '../model/GetUserProfile200Response';
import LoginUser200Response from '../model/LoginUser200Response';
import LoginUserRequest from '../model/LoginUserRequest';
import LogoutUser200Response from '../model/LogoutUser200Response';
import RegisterUser201Response from '../model/RegisterUser201Response';
import RegisterUserRequest from '../model/RegisterUserRequest';
import UpdateUserProfile200Response from '../model/UpdateUserProfile200Response';
import UpdateUserProfileRequest from '../model/UpdateUserProfileRequest';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeUserPassword operation.
     * @callback module:api/AuthApi~changeUserPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeUserPassword200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Alterar senha do usuário
     * @param {module:model/ChangeUserPasswordRequest} changeUserPasswordRequest 
     * @param {module:api/AuthApi~changeUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeUserPassword200Response}
     */
    changeUserPassword(changeUserPasswordRequest, callback) {
      let postBody = changeUserPasswordRequest;
      // verify the required parameter 'changeUserPasswordRequest' is set
      if (changeUserPasswordRequest === undefined || changeUserPasswordRequest === null) {
        throw new Error("Missing the required parameter 'changeUserPasswordRequest' when calling changeUserPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChangeUserPassword200Response;
      return this.apiClient.callApi(
        '/api/auth/change-password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserProfile operation.
     * @callback module:api/AuthApi~getUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserProfile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obter perfil do usuário logado
     * @param {module:api/AuthApi~getUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserProfile200Response}
     */
    getUserProfile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUserProfile200Response;
      return this.apiClient.callApi(
        '/api/auth/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUser operation.
     * @callback module:api/AuthApi~loginUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login de usuário
     * @param {module:model/LoginUserRequest} loginUserRequest 
     * @param {module:api/AuthApi~loginUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginUser200Response}
     */
    loginUser(loginUserRequest, callback) {
      let postBody = loginUserRequest;
      // verify the required parameter 'loginUserRequest' is set
      if (loginUserRequest === undefined || loginUserRequest === null) {
        throw new Error("Missing the required parameter 'loginUserRequest' when calling loginUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginUser200Response;
      return this.apiClient.callApi(
        '/api/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutUser operation.
     * @callback module:api/AuthApi~logoutUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogoutUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout do usuário
     * @param {module:api/AuthApi~logoutUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogoutUser200Response}
     */
    logoutUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogoutUser200Response;
      return this.apiClient.callApi(
        '/api/auth/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUser operation.
     * @callback module:api/AuthApi~registerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterUser201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registrar novo usuário
     * @param {module:model/RegisterUserRequest} registerUserRequest 
     * @param {module:api/AuthApi~registerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterUser201Response}
     */
    registerUser(registerUserRequest, callback) {
      let postBody = registerUserRequest;
      // verify the required parameter 'registerUserRequest' is set
      if (registerUserRequest === undefined || registerUserRequest === null) {
        throw new Error("Missing the required parameter 'registerUserRequest' when calling registerUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterUser201Response;
      return this.apiClient.callApi(
        '/api/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserProfile operation.
     * @callback module:api/AuthApi~updateUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateUserProfile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar perfil do usuário
     * @param {module:model/UpdateUserProfileRequest} updateUserProfileRequest 
     * @param {module:api/AuthApi~updateUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateUserProfile200Response}
     */
    updateUserProfile(updateUserProfileRequest, callback) {
      let postBody = updateUserProfileRequest;
      // verify the required parameter 'updateUserProfileRequest' is set
      if (updateUserProfileRequest === undefined || updateUserProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateUserProfileRequest' when calling updateUserProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateUserProfile200Response;
      return this.apiClient.callApi(
        '/api/auth/profile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
