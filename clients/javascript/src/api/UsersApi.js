/**
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteUser200Response from '../model/DeleteUser200Response';
import Error from '../model/Error';
import GetAllUsers200Response from '../model/GetAllUsers200Response';
import GetUserById200Response from '../model/GetUserById200Response';
import GetUserStats200Response from '../model/GetUserStats200Response';
import ToggleUserStatus200Response from '../model/ToggleUserStatus200Response';
import UpdateUser200Response from '../model/UpdateUser200Response';
import UpdateUserRequest from '../model/UpdateUserRequest';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletar usuário (Admin only)
     * @param {String} id ID do usuário
     * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteUser200Response}
     */
    deleteUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteUser200Response;
      return this.apiClient.callApi(
        '/api/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsers operation.
     * @callback module:api/UsersApi~getAllUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllUsers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listar todos os usuários (Admin only)
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Número da página
     * @param {Number} [limit = 10)] Itens por página
     * @param {String} [search] Buscar por nome ou email
     * @param {module:model/String} [role] Filtrar por papel
     * @param {Boolean} [isActive] Filtrar por status ativo
     * @param {module:api/UsersApi~getAllUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllUsers200Response}
     */
    getAllUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'search': opts['search'],
        'role': opts['role'],
        'isActive': opts['isActive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllUsers200Response;
      return this.apiClient.callApi(
        '/api/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserById operation.
     * @callback module:api/UsersApi~getUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obter usuário específico (Admin only)
     * @param {String} id ID do usuário
     * @param {module:api/UsersApi~getUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserById200Response}
     */
    getUserById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUserById200Response;
      return this.apiClient.callApi(
        '/api/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserStats operation.
     * @callback module:api/UsersApi~getUserStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obter estatísticas gerais do sistema (Admin only)
     * @param {module:api/UsersApi~getUserStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserStats200Response}
     */
    getUserStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUserStats200Response;
      return this.apiClient.callApi(
        '/api/users/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the toggleUserStatus operation.
     * @callback module:api/UsersApi~toggleUserStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ToggleUserStatus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ativar/Desativar usuário (Admin only)
     * @param {String} id ID do usuário
     * @param {module:api/UsersApi~toggleUserStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ToggleUserStatus200Response}
     */
    toggleUserStatus(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toggleUserStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ToggleUserStatus200Response;
      return this.apiClient.callApi(
        '/api/users/{id}/toggle-status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UsersApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualizar usuário (Admin only)
     * @param {String} id ID do usuário
     * @param {module:model/UpdateUserRequest} updateUserRequest 
     * @param {module:api/UsersApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateUser200Response}
     */
    updateUser(id, updateUserRequest, callback) {
      let postBody = updateUserRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUser");
      }
      // verify the required parameter 'updateUserRequest' is set
      if (updateUserRequest === undefined || updateUserRequest === null) {
        throw new Error("Missing the required parameter 'updateUserRequest' when calling updateUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateUser200Response;
      return this.apiClient.callApi(
        '/api/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
