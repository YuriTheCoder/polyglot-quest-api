/**
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompleteTask200Response from '../model/CompleteTask200Response';
import CreateTask201Response from '../model/CreateTask201Response';
import CreateTaskRequest from '../model/CreateTaskRequest';
import DeleteTask200Response from '../model/DeleteTask200Response';
import Error from '../model/Error';
import GetTaskById200Response from '../model/GetTaskById200Response';
import GetTaskStats200Response from '../model/GetTaskStats200Response';
import ListTasks200Response from '../model/ListTasks200Response';
import ListTasksByStatus200Response from '../model/ListTasksByStatus200Response';
import UpdateTask200Response from '../model/UpdateTask200Response';
import UpdateTaskRequest from '../model/UpdateTaskRequest';

/**
* Tasks service.
* @module api/TasksApi
* @version 1.0.0
*/
export default class TasksApi {

    /**
    * Constructs a new TasksApi. 
    * @alias module:api/TasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the completeTask operation.
     * @callback module:api/TasksApi~completeTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompleteTask200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a task as complete
     * @param {String} id ID da tarefa
     * @param {module:api/TasksApi~completeTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompleteTask200Response}
     */
    completeTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling completeTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompleteTask200Response;
      return this.apiClient.callApi(
        '/api/tasks/{id}/complete', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTask operation.
     * @callback module:api/TasksApi~createTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTask201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new task
     * @param {module:model/CreateTaskRequest} createTaskRequest 
     * @param {module:api/TasksApi~createTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTask201Response}
     */
    createTask(createTaskRequest, callback) {
      let postBody = createTaskRequest;
      // verify the required parameter 'createTaskRequest' is set
      if (createTaskRequest === undefined || createTaskRequest === null) {
        throw new Error("Missing the required parameter 'createTaskRequest' when calling createTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTask201Response;
      return this.apiClient.callApi(
        '/api/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTask operation.
     * @callback module:api/TasksApi~deleteTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteTask200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a task
     * @param {String} id ID da tarefa
     * @param {module:api/TasksApi~deleteTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteTask200Response}
     */
    deleteTask(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteTask200Response;
      return this.apiClient.callApi(
        '/api/tasks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskById operation.
     * @callback module:api/TasksApi~getTaskByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTaskById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific task by ID
     * @param {String} id ID da tarefa
     * @param {module:api/TasksApi~getTaskByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTaskById200Response}
     */
    getTaskById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTaskById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTaskById200Response;
      return this.apiClient.callApi(
        '/api/tasks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskStats operation.
     * @callback module:api/TasksApi~getTaskStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTaskStats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get task statistics
     * @param {module:api/TasksApi~getTaskStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTaskStats200Response}
     */
    getTaskStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTaskStats200Response;
      return this.apiClient.callApi(
        '/api/tasks/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTasks operation.
     * @callback module:api/TasksApi~listTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTasks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all tasks for the logged-in user
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] Filtrar por status
     * @param {module:model/String} [priority] Filtrar por prioridade
     * @param {Number} [page = 1)] Número da página
     * @param {Number} [limit = 10)] Itens por página
     * @param {module:model/String} [sortBy = 'createdAt')] Campo para ordenação
     * @param {module:model/String} [sortOrder = 'desc')] Ordem da classificação
     * @param {String} [search] Buscar no título e descrição
     * @param {module:api/TasksApi~listTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTasks200Response}
     */
    listTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'priority': opts['priority'],
        'page': opts['page'],
        'limit': opts['limit'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTasks200Response;
      return this.apiClient.callApi(
        '/api/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTasksByStatus operation.
     * @callback module:api/TasksApi~listTasksByStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTasksByStatus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tasks by status
     * @param {module:model/String} status Status das tarefas
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Número da página
     * @param {Number} [limit = 10)] Itens por página
     * @param {module:api/TasksApi~listTasksByStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTasksByStatus200Response}
     */
    listTasksByStatus(status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling listTasksByStatus");
      }

      let pathParams = {
        'status': status
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTasksByStatus200Response;
      return this.apiClient.callApi(
        '/api/tasks/status/{status}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTask operation.
     * @callback module:api/TasksApi~updateTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTask200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a task
     * @param {String} id ID da tarefa
     * @param {module:model/UpdateTaskRequest} updateTaskRequest 
     * @param {module:api/TasksApi~updateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTask200Response}
     */
    updateTask(id, updateTaskRequest, callback) {
      let postBody = updateTaskRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTask");
      }
      // verify the required parameter 'updateTaskRequest' is set
      if (updateTaskRequest === undefined || updateTaskRequest === null) {
        throw new Error("Missing the required parameter 'updateTaskRequest' when calling updateTask");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTask200Response;
      return this.apiClient.callApi(
        '/api/tasks/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
