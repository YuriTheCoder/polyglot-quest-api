/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.GamificationApi
import org.openapitools.client.models.CompleteQuest200Response
import org.openapitools.client.models.CompleteQuestRequest
import org.openapitools.client.models.CreateStoryFromTasks201Response
import org.openapitools.client.models.CreateStoryFromTasksRequest
import org.openapitools.client.models.GetBadges200Response
import org.openapitools.client.models.GetGamificationDashboard200Response
import org.openapitools.client.models.GetGlobalStats200Response
import org.openapitools.client.models.GetLeaderboard200Response
import org.openapitools.client.models.GetStoryById200Response
import org.openapitools.client.models.ListStories200Response
import org.openapitools.client.models.ShareMilestone200Response
import org.openapitools.client.models.ShareMilestoneRequest
import org.openapitools.client.models.UpdateGamificationPreferences200Response
import org.openapitools.client.models.UpdateGamificationPreferencesRequest

class GamificationApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of GamificationApi
        //val apiInstance = GamificationApi()

        // to test completeQuest
        should("test completeQuest") {
            // uncomment below to test completeQuest
            //val id : kotlin.String = id_example // kotlin.String | ID da tarefa/quest
            //val completeQuestRequest : CompleteQuestRequest =  // CompleteQuestRequest | 
            //val result : CompleteQuest200Response = apiInstance.completeQuest(id, completeQuestRequest)
            //result shouldBe ("TODO")
        }

        // to test createStoryFromTasks
        should("test createStoryFromTasks") {
            // uncomment below to test createStoryFromTasks
            //val createStoryFromTasksRequest : CreateStoryFromTasksRequest =  // CreateStoryFromTasksRequest | 
            //val result : CreateStoryFromTasks201Response = apiInstance.createStoryFromTasks(createStoryFromTasksRequest)
            //result shouldBe ("TODO")
        }

        // to test getBadges
        should("test getBadges") {
            // uncomment below to test getBadges
            //val result : GetBadges200Response = apiInstance.getBadges()
            //result shouldBe ("TODO")
        }

        // to test getGamificationDashboard
        should("test getGamificationDashboard") {
            // uncomment below to test getGamificationDashboard
            //val result : GetGamificationDashboard200Response = apiInstance.getGamificationDashboard()
            //result shouldBe ("TODO")
        }

        // to test getGlobalStats
        should("test getGlobalStats") {
            // uncomment below to test getGlobalStats
            //val result : GetGlobalStats200Response = apiInstance.getGlobalStats()
            //result shouldBe ("TODO")
        }

        // to test getLeaderboard
        should("test getLeaderboard") {
            // uncomment below to test getLeaderboard
            //val limit : kotlin.Int = 56 // kotlin.Int | Número de usuários no ranking
            //val period : kotlin.String = period_example // kotlin.String | Período do ranking
            //val result : GetLeaderboard200Response = apiInstance.getLeaderboard(limit, period)
            //result shouldBe ("TODO")
        }

        // to test getStoryById
        should("test getStoryById") {
            // uncomment below to test getStoryById
            //val id : kotlin.String = id_example // kotlin.String | ID da história
            //val result : GetStoryById200Response = apiInstance.getStoryById(id)
            //result shouldBe ("TODO")
        }

        // to test listStories
        should("test listStories") {
            // uncomment below to test listStories
            //val active : kotlin.String = active_example // kotlin.String | Filtrar histórias ativas
            //val limit : kotlin.Int = 56 // kotlin.Int | Limite de resultados
            //val page : kotlin.Int = 56 // kotlin.Int | Página
            //val result : ListStories200Response = apiInstance.listStories(active, limit, page)
            //result shouldBe ("TODO")
        }

        // to test shareMilestone
        should("test shareMilestone") {
            // uncomment below to test shareMilestone
            //val shareMilestoneRequest : ShareMilestoneRequest =  // ShareMilestoneRequest | 
            //val result : ShareMilestone200Response = apiInstance.shareMilestone(shareMilestoneRequest)
            //result shouldBe ("TODO")
        }

        // to test updateGamificationPreferences
        should("test updateGamificationPreferences") {
            // uncomment below to test updateGamificationPreferences
            //val updateGamificationPreferencesRequest : UpdateGamificationPreferencesRequest =  // UpdateGamificationPreferencesRequest | 
            //val result : UpdateGamificationPreferences200Response = apiInstance.updateGamificationPreferences(updateGamificationPreferencesRequest)
            //result shouldBe ("TODO")
        }

    }
}
