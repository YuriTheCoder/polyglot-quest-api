/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.CompleteQuest200Response
import org.openapitools.client.models.CompleteQuestRequest
import org.openapitools.client.models.CreateStoryFromTasks201Response
import org.openapitools.client.models.CreateStoryFromTasksRequest
import org.openapitools.client.models.GetBadges200Response
import org.openapitools.client.models.GetGamificationDashboard200Response
import org.openapitools.client.models.GetGlobalStats200Response
import org.openapitools.client.models.GetLeaderboard200Response
import org.openapitools.client.models.GetStoryById200Response
import org.openapitools.client.models.ListStories200Response
import org.openapitools.client.models.ShareMilestone200Response
import org.openapitools.client.models.ShareMilestoneRequest
import org.openapitools.client.models.UpdateGamificationPreferences200Response
import org.openapitools.client.models.UpdateGamificationPreferencesRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class GamificationApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:3000")
        }
    }

    /**
     * POST /api/tasks/{id}/complete-quest
     * Complete a quest (task) and get XP
     * 
     * @param id ID da tarefa/quest
     * @param completeQuestRequest  (optional)
     * @return CompleteQuest200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun completeQuest(id: kotlin.String, completeQuestRequest: CompleteQuestRequest? = null) : CompleteQuest200Response {
        val localVarResponse = completeQuestWithHttpInfo(id = id, completeQuestRequest = completeQuestRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CompleteQuest200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/tasks/{id}/complete-quest
     * Complete a quest (task) and get XP
     * 
     * @param id ID da tarefa/quest
     * @param completeQuestRequest  (optional)
     * @return ApiResponse<CompleteQuest200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun completeQuestWithHttpInfo(id: kotlin.String, completeQuestRequest: CompleteQuestRequest?) : ApiResponse<CompleteQuest200Response?> {
        val localVariableConfig = completeQuestRequestConfig(id = id, completeQuestRequest = completeQuestRequest)

        return request<CompleteQuestRequest, CompleteQuest200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation completeQuest
     *
     * @param id ID da tarefa/quest
     * @param completeQuestRequest  (optional)
     * @return RequestConfig
     */
    fun completeQuestRequestConfig(id: kotlin.String, completeQuestRequest: CompleteQuestRequest?) : RequestConfig<CompleteQuestRequest> {
        val localVariableBody = completeQuestRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/tasks/{id}/complete-quest".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /api/tasks/story
     * Generate a story from tasks
     * 
     * @param createStoryFromTasksRequest 
     * @return CreateStoryFromTasks201Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createStoryFromTasks(createStoryFromTasksRequest: CreateStoryFromTasksRequest) : CreateStoryFromTasks201Response {
        val localVarResponse = createStoryFromTasksWithHttpInfo(createStoryFromTasksRequest = createStoryFromTasksRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateStoryFromTasks201Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/tasks/story
     * Generate a story from tasks
     * 
     * @param createStoryFromTasksRequest 
     * @return ApiResponse<CreateStoryFromTasks201Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createStoryFromTasksWithHttpInfo(createStoryFromTasksRequest: CreateStoryFromTasksRequest) : ApiResponse<CreateStoryFromTasks201Response?> {
        val localVariableConfig = createStoryFromTasksRequestConfig(createStoryFromTasksRequest = createStoryFromTasksRequest)

        return request<CreateStoryFromTasksRequest, CreateStoryFromTasks201Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createStoryFromTasks
     *
     * @param createStoryFromTasksRequest 
     * @return RequestConfig
     */
    fun createStoryFromTasksRequestConfig(createStoryFromTasksRequest: CreateStoryFromTasksRequest) : RequestConfig<CreateStoryFromTasksRequest> {
        val localVariableBody = createStoryFromTasksRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/tasks/story",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /api/gamification/badges
     * Listar badges disponíveis e conquistados
     * 
     * @return GetBadges200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getBadges() : GetBadges200Response {
        val localVarResponse = getBadgesWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetBadges200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/gamification/badges
     * Listar badges disponíveis e conquistados
     * 
     * @return ApiResponse<GetBadges200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getBadgesWithHttpInfo() : ApiResponse<GetBadges200Response?> {
        val localVariableConfig = getBadgesRequestConfig()

        return request<Unit, GetBadges200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getBadges
     *
     * @return RequestConfig
     */
    fun getBadgesRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/gamification/badges",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /api/gamification/dashboard
     * Dashboard de gamificação do usuário
     * 
     * @return GetGamificationDashboard200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGamificationDashboard() : GetGamificationDashboard200Response {
        val localVarResponse = getGamificationDashboardWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetGamificationDashboard200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/gamification/dashboard
     * Dashboard de gamificação do usuário
     * 
     * @return ApiResponse<GetGamificationDashboard200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGamificationDashboardWithHttpInfo() : ApiResponse<GetGamificationDashboard200Response?> {
        val localVariableConfig = getGamificationDashboardRequestConfig()

        return request<Unit, GetGamificationDashboard200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGamificationDashboard
     *
     * @return RequestConfig
     */
    fun getGamificationDashboardRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/gamification/dashboard",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /api/gamification/global-stats
     * Estatísticas globais da plataforma
     * 
     * @return GetGlobalStats200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGlobalStats() : GetGlobalStats200Response {
        val localVarResponse = getGlobalStatsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetGlobalStats200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/gamification/global-stats
     * Estatísticas globais da plataforma
     * 
     * @return ApiResponse<GetGlobalStats200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGlobalStatsWithHttpInfo() : ApiResponse<GetGlobalStats200Response?> {
        val localVariableConfig = getGlobalStatsRequestConfig()

        return request<Unit, GetGlobalStats200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGlobalStats
     *
     * @return RequestConfig
     */
    fun getGlobalStatsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/gamification/global-stats",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter period
     */
     enum class PeriodGetLeaderboard(val value: kotlin.String) {
         @Json(name = "all") all("all"),
         @Json(name = "weekly") weekly("weekly"),
         @Json(name = "monthly") monthly("monthly");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * GET /api/leaderboard
     * Obter leaderboard público
     * 
     * @param limit Número de usuários no ranking (optional, default to 10)
     * @param period Período do ranking (optional, default to all)
     * @return GetLeaderboard200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getLeaderboard(limit: kotlin.Int? = 10, period: PeriodGetLeaderboard? = PeriodGetLeaderboard.all) : GetLeaderboard200Response {
        val localVarResponse = getLeaderboardWithHttpInfo(limit = limit, period = period)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetLeaderboard200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/leaderboard
     * Obter leaderboard público
     * 
     * @param limit Número de usuários no ranking (optional, default to 10)
     * @param period Período do ranking (optional, default to all)
     * @return ApiResponse<GetLeaderboard200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getLeaderboardWithHttpInfo(limit: kotlin.Int?, period: PeriodGetLeaderboard?) : ApiResponse<GetLeaderboard200Response?> {
        val localVariableConfig = getLeaderboardRequestConfig(limit = limit, period = period)

        return request<Unit, GetLeaderboard200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getLeaderboard
     *
     * @param limit Número de usuários no ranking (optional, default to 10)
     * @param period Período do ranking (optional, default to all)
     * @return RequestConfig
     */
    fun getLeaderboardRequestConfig(limit: kotlin.Int?, period: PeriodGetLeaderboard?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (period != null) {
                    put("period", listOf(period.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/leaderboard",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /api/tasks/stories/{id}
     * Get a specific story by ID
     * 
     * @param id ID da história
     * @return GetStoryById200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStoryById(id: kotlin.String) : GetStoryById200Response {
        val localVarResponse = getStoryByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetStoryById200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/tasks/stories/{id}
     * Get a specific story by ID
     * 
     * @param id ID da história
     * @return ApiResponse<GetStoryById200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStoryByIdWithHttpInfo(id: kotlin.String) : ApiResponse<GetStoryById200Response?> {
        val localVariableConfig = getStoryByIdRequestConfig(id = id)

        return request<Unit, GetStoryById200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getStoryById
     *
     * @param id ID da história
     * @return RequestConfig
     */
    fun getStoryByIdRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tasks/stories/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter active
     */
     enum class ActiveListStories(val value: kotlin.String) {
         @Json(name = "true") `true`("true"),
         @Json(name = "false") `false`("false");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * GET /api/tasks/stories
     * List all stories for the user
     * 
     * @param active Filtrar histórias ativas (optional, default to true)
     * @param limit Limite de resultados (optional, default to 10)
     * @param page Página (optional, default to 1)
     * @return ListStories200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listStories(active: ActiveListStories? = ActiveListStories.&#x60;true&#x60;, limit: kotlin.Int? = 10, page: kotlin.Int? = 1) : ListStories200Response {
        val localVarResponse = listStoriesWithHttpInfo(active = active, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListStories200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/tasks/stories
     * List all stories for the user
     * 
     * @param active Filtrar histórias ativas (optional, default to true)
     * @param limit Limite de resultados (optional, default to 10)
     * @param page Página (optional, default to 1)
     * @return ApiResponse<ListStories200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listStoriesWithHttpInfo(active: ActiveListStories?, limit: kotlin.Int?, page: kotlin.Int?) : ApiResponse<ListStories200Response?> {
        val localVariableConfig = listStoriesRequestConfig(active = active, limit = limit, page = page)

        return request<Unit, ListStories200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listStories
     *
     * @param active Filtrar histórias ativas (optional, default to true)
     * @param limit Limite de resultados (optional, default to 10)
     * @param page Página (optional, default to 1)
     * @return RequestConfig
     */
    fun listStoriesRequestConfig(active: ActiveListStories?, limit: kotlin.Int?, page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (active != null) {
                    put("active", listOf(active.value))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/tasks/stories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /api/gamification/share
     * Compartilhar conquista manualmente
     * 
     * @param shareMilestoneRequest 
     * @return ShareMilestone200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun shareMilestone(shareMilestoneRequest: ShareMilestoneRequest) : ShareMilestone200Response {
        val localVarResponse = shareMilestoneWithHttpInfo(shareMilestoneRequest = shareMilestoneRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ShareMilestone200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/gamification/share
     * Compartilhar conquista manualmente
     * 
     * @param shareMilestoneRequest 
     * @return ApiResponse<ShareMilestone200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun shareMilestoneWithHttpInfo(shareMilestoneRequest: ShareMilestoneRequest) : ApiResponse<ShareMilestone200Response?> {
        val localVariableConfig = shareMilestoneRequestConfig(shareMilestoneRequest = shareMilestoneRequest)

        return request<ShareMilestoneRequest, ShareMilestone200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation shareMilestone
     *
     * @param shareMilestoneRequest 
     * @return RequestConfig
     */
    fun shareMilestoneRequestConfig(shareMilestoneRequest: ShareMilestoneRequest) : RequestConfig<ShareMilestoneRequest> {
        val localVariableBody = shareMilestoneRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/gamification/share",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * PUT /api/gamification/preferences
     * Atualizar preferências de gamificação
     * 
     * @param updateGamificationPreferencesRequest  (optional)
     * @return UpdateGamificationPreferences200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateGamificationPreferences(updateGamificationPreferencesRequest: UpdateGamificationPreferencesRequest? = null) : UpdateGamificationPreferences200Response {
        val localVarResponse = updateGamificationPreferencesWithHttpInfo(updateGamificationPreferencesRequest = updateGamificationPreferencesRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateGamificationPreferences200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /api/gamification/preferences
     * Atualizar preferências de gamificação
     * 
     * @param updateGamificationPreferencesRequest  (optional)
     * @return ApiResponse<UpdateGamificationPreferences200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateGamificationPreferencesWithHttpInfo(updateGamificationPreferencesRequest: UpdateGamificationPreferencesRequest?) : ApiResponse<UpdateGamificationPreferences200Response?> {
        val localVariableConfig = updateGamificationPreferencesRequestConfig(updateGamificationPreferencesRequest = updateGamificationPreferencesRequest)

        return request<UpdateGamificationPreferencesRequest, UpdateGamificationPreferences200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateGamificationPreferences
     *
     * @param updateGamificationPreferencesRequest  (optional)
     * @return RequestConfig
     */
    fun updateGamificationPreferencesRequestConfig(updateGamificationPreferencesRequest: UpdateGamificationPreferencesRequest?) : RequestConfig<UpdateGamificationPreferencesRequest> {
        val localVariableBody = updateGamificationPreferencesRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/gamification/preferences",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
