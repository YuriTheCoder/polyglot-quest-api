/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.DeleteUser200Response
import org.openapitools.client.models.Error
import org.openapitools.client.models.GetAllUsers200Response
import org.openapitools.client.models.GetUserById200Response
import org.openapitools.client.models.GetUserStats200Response
import org.openapitools.client.models.ToggleUserStatus200Response
import org.openapitools.client.models.UpdateUser200Response
import org.openapitools.client.models.UpdateUserRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class UsersApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:3000")
        }
    }

    /**
     * DELETE /api/users/{id}
     * Deletar usuário (Admin only)
     * 
     * @param id ID do usuário
     * @return DeleteUser200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteUser(id: kotlin.String) : DeleteUser200Response {
        val localVarResponse = deleteUserWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeleteUser200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /api/users/{id}
     * Deletar usuário (Admin only)
     * 
     * @param id ID do usuário
     * @return ApiResponse<DeleteUser200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteUserWithHttpInfo(id: kotlin.String) : ApiResponse<DeleteUser200Response?> {
        val localVariableConfig = deleteUserRequestConfig(id = id)

        return request<Unit, DeleteUser200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteUser
     *
     * @param id ID do usuário
     * @return RequestConfig
     */
    fun deleteUserRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/users/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter role
     */
     enum class RoleGetAllUsers(val value: kotlin.String) {
         @Json(name = "user") user("user"),
         @Json(name = "admin") admin("admin");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * GET /api/users
     * Listar todos os usuários (Admin only)
     * 
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param search Buscar por nome ou email (optional)
     * @param role Filtrar por papel (optional)
     * @param isActive Filtrar por status ativo (optional)
     * @return GetAllUsers200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAllUsers(page: kotlin.Int? = 1, limit: kotlin.Int? = 10, search: kotlin.String? = null, role: RoleGetAllUsers? = null, isActive: kotlin.Boolean? = null) : GetAllUsers200Response {
        val localVarResponse = getAllUsersWithHttpInfo(page = page, limit = limit, search = search, role = role, isActive = isActive)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetAllUsers200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/users
     * Listar todos os usuários (Admin only)
     * 
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param search Buscar por nome ou email (optional)
     * @param role Filtrar por papel (optional)
     * @param isActive Filtrar por status ativo (optional)
     * @return ApiResponse<GetAllUsers200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAllUsersWithHttpInfo(page: kotlin.Int?, limit: kotlin.Int?, search: kotlin.String?, role: RoleGetAllUsers?, isActive: kotlin.Boolean?) : ApiResponse<GetAllUsers200Response?> {
        val localVariableConfig = getAllUsersRequestConfig(page = page, limit = limit, search = search, role = role, isActive = isActive)

        return request<Unit, GetAllUsers200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAllUsers
     *
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param search Buscar por nome ou email (optional)
     * @param role Filtrar por papel (optional)
     * @param isActive Filtrar por status ativo (optional)
     * @return RequestConfig
     */
    fun getAllUsersRequestConfig(page: kotlin.Int?, limit: kotlin.Int?, search: kotlin.String?, role: RoleGetAllUsers?, isActive: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (search != null) {
                    put("search", listOf(search.toString()))
                }
                if (role != null) {
                    put("role", listOf(role.value))
                }
                if (isActive != null) {
                    put("isActive", listOf(isActive.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /api/users/{id}
     * Obter usuário específico (Admin only)
     * 
     * @param id ID do usuário
     * @return GetUserById200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserById(id: kotlin.String) : GetUserById200Response {
        val localVarResponse = getUserByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetUserById200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/users/{id}
     * Obter usuário específico (Admin only)
     * 
     * @param id ID do usuário
     * @return ApiResponse<GetUserById200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserByIdWithHttpInfo(id: kotlin.String) : ApiResponse<GetUserById200Response?> {
        val localVariableConfig = getUserByIdRequestConfig(id = id)

        return request<Unit, GetUserById200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserById
     *
     * @param id ID do usuário
     * @return RequestConfig
     */
    fun getUserByIdRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/users/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /api/users/stats
     * Obter estatísticas gerais do sistema (Admin only)
     * 
     * @return GetUserStats200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserStats() : GetUserStats200Response {
        val localVarResponse = getUserStatsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetUserStats200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /api/users/stats
     * Obter estatísticas gerais do sistema (Admin only)
     * 
     * @return ApiResponse<GetUserStats200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserStatsWithHttpInfo() : ApiResponse<GetUserStats200Response?> {
        val localVariableConfig = getUserStatsRequestConfig()

        return request<Unit, GetUserStats200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserStats
     *
     * @return RequestConfig
     */
    fun getUserStatsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/users/stats",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * PATCH /api/users/{id}/toggle-status
     * Ativar/Desativar usuário (Admin only)
     * 
     * @param id ID do usuário
     * @return ToggleUserStatus200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun toggleUserStatus(id: kotlin.String) : ToggleUserStatus200Response {
        val localVarResponse = toggleUserStatusWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ToggleUserStatus200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PATCH /api/users/{id}/toggle-status
     * Ativar/Desativar usuário (Admin only)
     * 
     * @param id ID do usuário
     * @return ApiResponse<ToggleUserStatus200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun toggleUserStatusWithHttpInfo(id: kotlin.String) : ApiResponse<ToggleUserStatus200Response?> {
        val localVariableConfig = toggleUserStatusRequestConfig(id = id)

        return request<Unit, ToggleUserStatus200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation toggleUserStatus
     *
     * @param id ID do usuário
     * @return RequestConfig
     */
    fun toggleUserStatusRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/users/{id}/toggle-status".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * PUT /api/users/{id}
     * Atualizar usuário (Admin only)
     * 
     * @param id ID do usuário
     * @param updateUserRequest 
     * @return UpdateUser200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateUser(id: kotlin.String, updateUserRequest: UpdateUserRequest) : UpdateUser200Response {
        val localVarResponse = updateUserWithHttpInfo(id = id, updateUserRequest = updateUserRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateUser200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /api/users/{id}
     * Atualizar usuário (Admin only)
     * 
     * @param id ID do usuário
     * @param updateUserRequest 
     * @return ApiResponse<UpdateUser200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateUserWithHttpInfo(id: kotlin.String, updateUserRequest: UpdateUserRequest) : ApiResponse<UpdateUser200Response?> {
        val localVariableConfig = updateUserRequestConfig(id = id, updateUserRequest = updateUserRequest)

        return request<UpdateUserRequest, UpdateUser200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateUser
     *
     * @param id ID do usuário
     * @param updateUserRequest 
     * @return RequestConfig
     */
    fun updateUserRequestConfig(id: kotlin.String, updateUserRequest: UpdateUserRequest) : RequestConfig<UpdateUserRequest> {
        val localVariableBody = updateUserRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/users/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
