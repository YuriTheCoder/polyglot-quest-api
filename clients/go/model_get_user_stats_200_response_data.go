/*
Gamified Task Management API

API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetUserStats200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetUserStats200ResponseData{}

// GetUserStats200ResponseData struct for GetUserStats200ResponseData
type GetUserStats200ResponseData struct {
	Users *GetUserStats200ResponseDataUsers `json:"users,omitempty"`
	Tasks *GetUserStats200ResponseDataTasks `json:"tasks,omitempty"`
	MostActiveUsers []GetUserStats200ResponseDataMostActiveUsersInner `json:"mostActiveUsers,omitempty"`
}

// NewGetUserStats200ResponseData instantiates a new GetUserStats200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetUserStats200ResponseData() *GetUserStats200ResponseData {
	this := GetUserStats200ResponseData{}
	return &this
}

// NewGetUserStats200ResponseDataWithDefaults instantiates a new GetUserStats200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetUserStats200ResponseDataWithDefaults() *GetUserStats200ResponseData {
	this := GetUserStats200ResponseData{}
	return &this
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *GetUserStats200ResponseData) GetUsers() GetUserStats200ResponseDataUsers {
	if o == nil || IsNil(o.Users) {
		var ret GetUserStats200ResponseDataUsers
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserStats200ResponseData) GetUsersOk() (*GetUserStats200ResponseDataUsers, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *GetUserStats200ResponseData) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given GetUserStats200ResponseDataUsers and assigns it to the Users field.
func (o *GetUserStats200ResponseData) SetUsers(v GetUserStats200ResponseDataUsers) {
	o.Users = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *GetUserStats200ResponseData) GetTasks() GetUserStats200ResponseDataTasks {
	if o == nil || IsNil(o.Tasks) {
		var ret GetUserStats200ResponseDataTasks
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserStats200ResponseData) GetTasksOk() (*GetUserStats200ResponseDataTasks, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *GetUserStats200ResponseData) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given GetUserStats200ResponseDataTasks and assigns it to the Tasks field.
func (o *GetUserStats200ResponseData) SetTasks(v GetUserStats200ResponseDataTasks) {
	o.Tasks = &v
}

// GetMostActiveUsers returns the MostActiveUsers field value if set, zero value otherwise.
func (o *GetUserStats200ResponseData) GetMostActiveUsers() []GetUserStats200ResponseDataMostActiveUsersInner {
	if o == nil || IsNil(o.MostActiveUsers) {
		var ret []GetUserStats200ResponseDataMostActiveUsersInner
		return ret
	}
	return o.MostActiveUsers
}

// GetMostActiveUsersOk returns a tuple with the MostActiveUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserStats200ResponseData) GetMostActiveUsersOk() ([]GetUserStats200ResponseDataMostActiveUsersInner, bool) {
	if o == nil || IsNil(o.MostActiveUsers) {
		return nil, false
	}
	return o.MostActiveUsers, true
}

// HasMostActiveUsers returns a boolean if a field has been set.
func (o *GetUserStats200ResponseData) HasMostActiveUsers() bool {
	if o != nil && !IsNil(o.MostActiveUsers) {
		return true
	}

	return false
}

// SetMostActiveUsers gets a reference to the given []GetUserStats200ResponseDataMostActiveUsersInner and assigns it to the MostActiveUsers field.
func (o *GetUserStats200ResponseData) SetMostActiveUsers(v []GetUserStats200ResponseDataMostActiveUsersInner) {
	o.MostActiveUsers = v
}

func (o GetUserStats200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetUserStats200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.MostActiveUsers) {
		toSerialize["mostActiveUsers"] = o.MostActiveUsers
	}
	return toSerialize, nil
}

type NullableGetUserStats200ResponseData struct {
	value *GetUserStats200ResponseData
	isSet bool
}

func (v NullableGetUserStats200ResponseData) Get() *GetUserStats200ResponseData {
	return v.value
}

func (v *NullableGetUserStats200ResponseData) Set(val *GetUserStats200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUserStats200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUserStats200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUserStats200ResponseData(val *GetUserStats200ResponseData) *NullableGetUserStats200ResponseData {
	return &NullableGetUserStats200ResponseData{value: val, isSet: true}
}

func (v NullableGetUserStats200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUserStats200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


