/*
Gamified Task Management API

API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CompleteQuest200ResponseDataTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteQuest200ResponseDataTask{}

// CompleteQuest200ResponseDataTask struct for CompleteQuest200ResponseDataTask
type CompleteQuest200ResponseDataTask struct {
	Id *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	QuestTitle *string `json:"questTitle,omitempty"`
	XpEarned *float32 `json:"xpEarned,omitempty"`
}

// NewCompleteQuest200ResponseDataTask instantiates a new CompleteQuest200ResponseDataTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteQuest200ResponseDataTask() *CompleteQuest200ResponseDataTask {
	this := CompleteQuest200ResponseDataTask{}
	return &this
}

// NewCompleteQuest200ResponseDataTaskWithDefaults instantiates a new CompleteQuest200ResponseDataTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteQuest200ResponseDataTaskWithDefaults() *CompleteQuest200ResponseDataTask {
	this := CompleteQuest200ResponseDataTask{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompleteQuest200ResponseDataTask) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteQuest200ResponseDataTask) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompleteQuest200ResponseDataTask) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CompleteQuest200ResponseDataTask) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CompleteQuest200ResponseDataTask) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteQuest200ResponseDataTask) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CompleteQuest200ResponseDataTask) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CompleteQuest200ResponseDataTask) SetTitle(v string) {
	o.Title = &v
}

// GetQuestTitle returns the QuestTitle field value if set, zero value otherwise.
func (o *CompleteQuest200ResponseDataTask) GetQuestTitle() string {
	if o == nil || IsNil(o.QuestTitle) {
		var ret string
		return ret
	}
	return *o.QuestTitle
}

// GetQuestTitleOk returns a tuple with the QuestTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteQuest200ResponseDataTask) GetQuestTitleOk() (*string, bool) {
	if o == nil || IsNil(o.QuestTitle) {
		return nil, false
	}
	return o.QuestTitle, true
}

// HasQuestTitle returns a boolean if a field has been set.
func (o *CompleteQuest200ResponseDataTask) HasQuestTitle() bool {
	if o != nil && !IsNil(o.QuestTitle) {
		return true
	}

	return false
}

// SetQuestTitle gets a reference to the given string and assigns it to the QuestTitle field.
func (o *CompleteQuest200ResponseDataTask) SetQuestTitle(v string) {
	o.QuestTitle = &v
}

// GetXpEarned returns the XpEarned field value if set, zero value otherwise.
func (o *CompleteQuest200ResponseDataTask) GetXpEarned() float32 {
	if o == nil || IsNil(o.XpEarned) {
		var ret float32
		return ret
	}
	return *o.XpEarned
}

// GetXpEarnedOk returns a tuple with the XpEarned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteQuest200ResponseDataTask) GetXpEarnedOk() (*float32, bool) {
	if o == nil || IsNil(o.XpEarned) {
		return nil, false
	}
	return o.XpEarned, true
}

// HasXpEarned returns a boolean if a field has been set.
func (o *CompleteQuest200ResponseDataTask) HasXpEarned() bool {
	if o != nil && !IsNil(o.XpEarned) {
		return true
	}

	return false
}

// SetXpEarned gets a reference to the given float32 and assigns it to the XpEarned field.
func (o *CompleteQuest200ResponseDataTask) SetXpEarned(v float32) {
	o.XpEarned = &v
}

func (o CompleteQuest200ResponseDataTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteQuest200ResponseDataTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.QuestTitle) {
		toSerialize["questTitle"] = o.QuestTitle
	}
	if !IsNil(o.XpEarned) {
		toSerialize["xpEarned"] = o.XpEarned
	}
	return toSerialize, nil
}

type NullableCompleteQuest200ResponseDataTask struct {
	value *CompleteQuest200ResponseDataTask
	isSet bool
}

func (v NullableCompleteQuest200ResponseDataTask) Get() *CompleteQuest200ResponseDataTask {
	return v.value
}

func (v *NullableCompleteQuest200ResponseDataTask) Set(val *CompleteQuest200ResponseDataTask) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteQuest200ResponseDataTask) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteQuest200ResponseDataTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteQuest200ResponseDataTask(val *CompleteQuest200ResponseDataTask) *NullableCompleteQuest200ResponseDataTask {
	return &NullableCompleteQuest200ResponseDataTask{value: val, isSet: true}
}

func (v NullableCompleteQuest200ResponseDataTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteQuest200ResponseDataTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


