/*
Gamified Task Management API

API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CompleteQuest200ResponseDataGamification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteQuest200ResponseDataGamification{}

// CompleteQuest200ResponseDataGamification struct for CompleteQuest200ResponseDataGamification
type CompleteQuest200ResponseDataGamification struct {
	XpGained *float32 `json:"xpGained,omitempty"`
	LeveledUp *bool `json:"leveledUp,omitempty"`
	NewLevel *float32 `json:"newLevel,omitempty"`
	NewBadges []string `json:"newBadges,omitempty"`
	TotalXP *float32 `json:"totalXP,omitempty"`
	CurrentStreak *float32 `json:"currentStreak,omitempty"`
}

// NewCompleteQuest200ResponseDataGamification instantiates a new CompleteQuest200ResponseDataGamification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteQuest200ResponseDataGamification() *CompleteQuest200ResponseDataGamification {
	this := CompleteQuest200ResponseDataGamification{}
	return &this
}

// NewCompleteQuest200ResponseDataGamificationWithDefaults instantiates a new CompleteQuest200ResponseDataGamification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteQuest200ResponseDataGamificationWithDefaults() *CompleteQuest200ResponseDataGamification {
	this := CompleteQuest200ResponseDataGamification{}
	return &this
}

// GetXpGained returns the XpGained field value if set, zero value otherwise.
func (o *CompleteQuest200ResponseDataGamification) GetXpGained() float32 {
	if o == nil || IsNil(o.XpGained) {
		var ret float32
		return ret
	}
	return *o.XpGained
}

// GetXpGainedOk returns a tuple with the XpGained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteQuest200ResponseDataGamification) GetXpGainedOk() (*float32, bool) {
	if o == nil || IsNil(o.XpGained) {
		return nil, false
	}
	return o.XpGained, true
}

// HasXpGained returns a boolean if a field has been set.
func (o *CompleteQuest200ResponseDataGamification) HasXpGained() bool {
	if o != nil && !IsNil(o.XpGained) {
		return true
	}

	return false
}

// SetXpGained gets a reference to the given float32 and assigns it to the XpGained field.
func (o *CompleteQuest200ResponseDataGamification) SetXpGained(v float32) {
	o.XpGained = &v
}

// GetLeveledUp returns the LeveledUp field value if set, zero value otherwise.
func (o *CompleteQuest200ResponseDataGamification) GetLeveledUp() bool {
	if o == nil || IsNil(o.LeveledUp) {
		var ret bool
		return ret
	}
	return *o.LeveledUp
}

// GetLeveledUpOk returns a tuple with the LeveledUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteQuest200ResponseDataGamification) GetLeveledUpOk() (*bool, bool) {
	if o == nil || IsNil(o.LeveledUp) {
		return nil, false
	}
	return o.LeveledUp, true
}

// HasLeveledUp returns a boolean if a field has been set.
func (o *CompleteQuest200ResponseDataGamification) HasLeveledUp() bool {
	if o != nil && !IsNil(o.LeveledUp) {
		return true
	}

	return false
}

// SetLeveledUp gets a reference to the given bool and assigns it to the LeveledUp field.
func (o *CompleteQuest200ResponseDataGamification) SetLeveledUp(v bool) {
	o.LeveledUp = &v
}

// GetNewLevel returns the NewLevel field value if set, zero value otherwise.
func (o *CompleteQuest200ResponseDataGamification) GetNewLevel() float32 {
	if o == nil || IsNil(o.NewLevel) {
		var ret float32
		return ret
	}
	return *o.NewLevel
}

// GetNewLevelOk returns a tuple with the NewLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteQuest200ResponseDataGamification) GetNewLevelOk() (*float32, bool) {
	if o == nil || IsNil(o.NewLevel) {
		return nil, false
	}
	return o.NewLevel, true
}

// HasNewLevel returns a boolean if a field has been set.
func (o *CompleteQuest200ResponseDataGamification) HasNewLevel() bool {
	if o != nil && !IsNil(o.NewLevel) {
		return true
	}

	return false
}

// SetNewLevel gets a reference to the given float32 and assigns it to the NewLevel field.
func (o *CompleteQuest200ResponseDataGamification) SetNewLevel(v float32) {
	o.NewLevel = &v
}

// GetNewBadges returns the NewBadges field value if set, zero value otherwise.
func (o *CompleteQuest200ResponseDataGamification) GetNewBadges() []string {
	if o == nil || IsNil(o.NewBadges) {
		var ret []string
		return ret
	}
	return o.NewBadges
}

// GetNewBadgesOk returns a tuple with the NewBadges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteQuest200ResponseDataGamification) GetNewBadgesOk() ([]string, bool) {
	if o == nil || IsNil(o.NewBadges) {
		return nil, false
	}
	return o.NewBadges, true
}

// HasNewBadges returns a boolean if a field has been set.
func (o *CompleteQuest200ResponseDataGamification) HasNewBadges() bool {
	if o != nil && !IsNil(o.NewBadges) {
		return true
	}

	return false
}

// SetNewBadges gets a reference to the given []string and assigns it to the NewBadges field.
func (o *CompleteQuest200ResponseDataGamification) SetNewBadges(v []string) {
	o.NewBadges = v
}

// GetTotalXP returns the TotalXP field value if set, zero value otherwise.
func (o *CompleteQuest200ResponseDataGamification) GetTotalXP() float32 {
	if o == nil || IsNil(o.TotalXP) {
		var ret float32
		return ret
	}
	return *o.TotalXP
}

// GetTotalXPOk returns a tuple with the TotalXP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteQuest200ResponseDataGamification) GetTotalXPOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalXP) {
		return nil, false
	}
	return o.TotalXP, true
}

// HasTotalXP returns a boolean if a field has been set.
func (o *CompleteQuest200ResponseDataGamification) HasTotalXP() bool {
	if o != nil && !IsNil(o.TotalXP) {
		return true
	}

	return false
}

// SetTotalXP gets a reference to the given float32 and assigns it to the TotalXP field.
func (o *CompleteQuest200ResponseDataGamification) SetTotalXP(v float32) {
	o.TotalXP = &v
}

// GetCurrentStreak returns the CurrentStreak field value if set, zero value otherwise.
func (o *CompleteQuest200ResponseDataGamification) GetCurrentStreak() float32 {
	if o == nil || IsNil(o.CurrentStreak) {
		var ret float32
		return ret
	}
	return *o.CurrentStreak
}

// GetCurrentStreakOk returns a tuple with the CurrentStreak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteQuest200ResponseDataGamification) GetCurrentStreakOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentStreak) {
		return nil, false
	}
	return o.CurrentStreak, true
}

// HasCurrentStreak returns a boolean if a field has been set.
func (o *CompleteQuest200ResponseDataGamification) HasCurrentStreak() bool {
	if o != nil && !IsNil(o.CurrentStreak) {
		return true
	}

	return false
}

// SetCurrentStreak gets a reference to the given float32 and assigns it to the CurrentStreak field.
func (o *CompleteQuest200ResponseDataGamification) SetCurrentStreak(v float32) {
	o.CurrentStreak = &v
}

func (o CompleteQuest200ResponseDataGamification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteQuest200ResponseDataGamification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.XpGained) {
		toSerialize["xpGained"] = o.XpGained
	}
	if !IsNil(o.LeveledUp) {
		toSerialize["leveledUp"] = o.LeveledUp
	}
	if !IsNil(o.NewLevel) {
		toSerialize["newLevel"] = o.NewLevel
	}
	if !IsNil(o.NewBadges) {
		toSerialize["newBadges"] = o.NewBadges
	}
	if !IsNil(o.TotalXP) {
		toSerialize["totalXP"] = o.TotalXP
	}
	if !IsNil(o.CurrentStreak) {
		toSerialize["currentStreak"] = o.CurrentStreak
	}
	return toSerialize, nil
}

type NullableCompleteQuest200ResponseDataGamification struct {
	value *CompleteQuest200ResponseDataGamification
	isSet bool
}

func (v NullableCompleteQuest200ResponseDataGamification) Get() *CompleteQuest200ResponseDataGamification {
	return v.value
}

func (v *NullableCompleteQuest200ResponseDataGamification) Set(val *CompleteQuest200ResponseDataGamification) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteQuest200ResponseDataGamification) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteQuest200ResponseDataGamification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteQuest200ResponseDataGamification(val *CompleteQuest200ResponseDataGamification) *NullableCompleteQuest200ResponseDataGamification {
	return &NullableCompleteQuest200ResponseDataGamification{value: val, isSet: true}
}

func (v NullableCompleteQuest200ResponseDataGamification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteQuest200ResponseDataGamification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


