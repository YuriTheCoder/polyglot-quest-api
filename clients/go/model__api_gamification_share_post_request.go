/*
Gamified Task Management API

API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiGamificationSharePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiGamificationSharePostRequest{}

// ApiGamificationSharePostRequest struct for ApiGamificationSharePostRequest
type ApiGamificationSharePostRequest struct {
	Type string `json:"type"`
	Data *ApiGamificationSharePostRequestData `json:"data,omitempty"`
}

type _ApiGamificationSharePostRequest ApiGamificationSharePostRequest

// NewApiGamificationSharePostRequest instantiates a new ApiGamificationSharePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiGamificationSharePostRequest(type_ string) *ApiGamificationSharePostRequest {
	this := ApiGamificationSharePostRequest{}
	this.Type = type_
	return &this
}

// NewApiGamificationSharePostRequestWithDefaults instantiates a new ApiGamificationSharePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiGamificationSharePostRequestWithDefaults() *ApiGamificationSharePostRequest {
	this := ApiGamificationSharePostRequest{}
	return &this
}

// GetType returns the Type field value
func (o *ApiGamificationSharePostRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApiGamificationSharePostRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApiGamificationSharePostRequest) SetType(v string) {
	o.Type = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ApiGamificationSharePostRequest) GetData() ApiGamificationSharePostRequestData {
	if o == nil || IsNil(o.Data) {
		var ret ApiGamificationSharePostRequestData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGamificationSharePostRequest) GetDataOk() (*ApiGamificationSharePostRequestData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ApiGamificationSharePostRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given ApiGamificationSharePostRequestData and assigns it to the Data field.
func (o *ApiGamificationSharePostRequest) SetData(v ApiGamificationSharePostRequestData) {
	o.Data = &v
}

func (o ApiGamificationSharePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiGamificationSharePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *ApiGamificationSharePostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiGamificationSharePostRequest := _ApiGamificationSharePostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiGamificationSharePostRequest)

	if err != nil {
		return err
	}

	*o = ApiGamificationSharePostRequest(varApiGamificationSharePostRequest)

	return err
}

type NullableApiGamificationSharePostRequest struct {
	value *ApiGamificationSharePostRequest
	isSet bool
}

func (v NullableApiGamificationSharePostRequest) Get() *ApiGamificationSharePostRequest {
	return v.value
}

func (v *NullableApiGamificationSharePostRequest) Set(val *ApiGamificationSharePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiGamificationSharePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiGamificationSharePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiGamificationSharePostRequest(val *ApiGamificationSharePostRequest) *NullableApiGamificationSharePostRequest {
	return &NullableApiGamificationSharePostRequest{value: val, isSet: true}
}

func (v NullableApiGamificationSharePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiGamificationSharePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


