/*
Gamified Task Management API

API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CompleteQuest200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteQuest200ResponseData{}

// CompleteQuest200ResponseData struct for CompleteQuest200ResponseData
type CompleteQuest200ResponseData struct {
	Task *CompleteQuest200ResponseDataTask `json:"task,omitempty"`
	Gamification *CompleteQuest200ResponseDataGamification `json:"gamification,omitempty"`
}

// NewCompleteQuest200ResponseData instantiates a new CompleteQuest200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteQuest200ResponseData() *CompleteQuest200ResponseData {
	this := CompleteQuest200ResponseData{}
	return &this
}

// NewCompleteQuest200ResponseDataWithDefaults instantiates a new CompleteQuest200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteQuest200ResponseDataWithDefaults() *CompleteQuest200ResponseData {
	this := CompleteQuest200ResponseData{}
	return &this
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *CompleteQuest200ResponseData) GetTask() CompleteQuest200ResponseDataTask {
	if o == nil || IsNil(o.Task) {
		var ret CompleteQuest200ResponseDataTask
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteQuest200ResponseData) GetTaskOk() (*CompleteQuest200ResponseDataTask, bool) {
	if o == nil || IsNil(o.Task) {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *CompleteQuest200ResponseData) HasTask() bool {
	if o != nil && !IsNil(o.Task) {
		return true
	}

	return false
}

// SetTask gets a reference to the given CompleteQuest200ResponseDataTask and assigns it to the Task field.
func (o *CompleteQuest200ResponseData) SetTask(v CompleteQuest200ResponseDataTask) {
	o.Task = &v
}

// GetGamification returns the Gamification field value if set, zero value otherwise.
func (o *CompleteQuest200ResponseData) GetGamification() CompleteQuest200ResponseDataGamification {
	if o == nil || IsNil(o.Gamification) {
		var ret CompleteQuest200ResponseDataGamification
		return ret
	}
	return *o.Gamification
}

// GetGamificationOk returns a tuple with the Gamification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteQuest200ResponseData) GetGamificationOk() (*CompleteQuest200ResponseDataGamification, bool) {
	if o == nil || IsNil(o.Gamification) {
		return nil, false
	}
	return o.Gamification, true
}

// HasGamification returns a boolean if a field has been set.
func (o *CompleteQuest200ResponseData) HasGamification() bool {
	if o != nil && !IsNil(o.Gamification) {
		return true
	}

	return false
}

// SetGamification gets a reference to the given CompleteQuest200ResponseDataGamification and assigns it to the Gamification field.
func (o *CompleteQuest200ResponseData) SetGamification(v CompleteQuest200ResponseDataGamification) {
	o.Gamification = &v
}

func (o CompleteQuest200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteQuest200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Task) {
		toSerialize["task"] = o.Task
	}
	if !IsNil(o.Gamification) {
		toSerialize["gamification"] = o.Gamification
	}
	return toSerialize, nil
}

type NullableCompleteQuest200ResponseData struct {
	value *CompleteQuest200ResponseData
	isSet bool
}

func (v NullableCompleteQuest200ResponseData) Get() *CompleteQuest200ResponseData {
	return v.value
}

func (v *NullableCompleteQuest200ResponseData) Set(val *CompleteQuest200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteQuest200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteQuest200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteQuest200ResponseData(val *CompleteQuest200ResponseData) *NullableCompleteQuest200ResponseData {
	return &NullableCompleteQuest200ResponseData{value: val, isSet: true}
}

func (v NullableCompleteQuest200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteQuest200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


