/*
Gamified Task Management API

API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisterUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterUserRequest{}

// RegisterUserRequest struct for RegisterUserRequest
type RegisterUserRequest struct {
	Name string `json:"name"`
	Email string `json:"email"`
	Password string `json:"password"`
	Role *string `json:"role,omitempty"`
}

type _RegisterUserRequest RegisterUserRequest

// NewRegisterUserRequest instantiates a new RegisterUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterUserRequest(name string, email string, password string) *RegisterUserRequest {
	this := RegisterUserRequest{}
	this.Name = name
	this.Email = email
	this.Password = password
	var role string = "user"
	this.Role = &role
	return &this
}

// NewRegisterUserRequestWithDefaults instantiates a new RegisterUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterUserRequestWithDefaults() *RegisterUserRequest {
	this := RegisterUserRequest{}
	var role string = "user"
	this.Role = &role
	return &this
}

// GetName returns the Name field value
func (o *RegisterUserRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RegisterUserRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RegisterUserRequest) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *RegisterUserRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *RegisterUserRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *RegisterUserRequest) SetEmail(v string) {
	o.Email = v
}

// GetPassword returns the Password field value
func (o *RegisterUserRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *RegisterUserRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *RegisterUserRequest) SetPassword(v string) {
	o.Password = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RegisterUserRequest) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterUserRequest) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RegisterUserRequest) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *RegisterUserRequest) SetRole(v string) {
	o.Role = &v
}

func (o RegisterUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["email"] = o.Email
	toSerialize["password"] = o.Password
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

func (o *RegisterUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"email",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterUserRequest := _RegisterUserRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterUserRequest)

	if err != nil {
		return err
	}

	*o = RegisterUserRequest(varRegisterUserRequest)

	return err
}

type NullableRegisterUserRequest struct {
	value *RegisterUserRequest
	isSet bool
}

func (v NullableRegisterUserRequest) Get() *RegisterUserRequest {
	return v.value
}

func (v *NullableRegisterUserRequest) Set(val *RegisterUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterUserRequest(val *RegisterUserRequest) *NullableRegisterUserRequest {
	return &NullableRegisterUserRequest{value: val, isSet: true}
}

func (v NullableRegisterUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


