/*
Gamified Task Management API

API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Story type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Story{}

// Story struct for Story
type Story struct {
	Id *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Story *string `json:"story,omitempty"`
	Theme *string `json:"theme,omitempty"`
	Progress *float32 `json:"progress,omitempty"`
}

// NewStory instantiates a new Story object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStory() *Story {
	this := Story{}
	return &this
}

// NewStoryWithDefaults instantiates a new Story object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoryWithDefaults() *Story {
	this := Story{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Story) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Story) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Story) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Story) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Story) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Story) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Story) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Story) SetTitle(v string) {
	o.Title = &v
}

// GetStory returns the Story field value if set, zero value otherwise.
func (o *Story) GetStory() string {
	if o == nil || IsNil(o.Story) {
		var ret string
		return ret
	}
	return *o.Story
}

// GetStoryOk returns a tuple with the Story field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Story) GetStoryOk() (*string, bool) {
	if o == nil || IsNil(o.Story) {
		return nil, false
	}
	return o.Story, true
}

// HasStory returns a boolean if a field has been set.
func (o *Story) HasStory() bool {
	if o != nil && !IsNil(o.Story) {
		return true
	}

	return false
}

// SetStory gets a reference to the given string and assigns it to the Story field.
func (o *Story) SetStory(v string) {
	o.Story = &v
}

// GetTheme returns the Theme field value if set, zero value otherwise.
func (o *Story) GetTheme() string {
	if o == nil || IsNil(o.Theme) {
		var ret string
		return ret
	}
	return *o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Story) GetThemeOk() (*string, bool) {
	if o == nil || IsNil(o.Theme) {
		return nil, false
	}
	return o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *Story) HasTheme() bool {
	if o != nil && !IsNil(o.Theme) {
		return true
	}

	return false
}

// SetTheme gets a reference to the given string and assigns it to the Theme field.
func (o *Story) SetTheme(v string) {
	o.Theme = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *Story) GetProgress() float32 {
	if o == nil || IsNil(o.Progress) {
		var ret float32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Story) GetProgressOk() (*float32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *Story) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given float32 and assigns it to the Progress field.
func (o *Story) SetProgress(v float32) {
	o.Progress = &v
}

func (o Story) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Story) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Story) {
		toSerialize["story"] = o.Story
	}
	if !IsNil(o.Theme) {
		toSerialize["theme"] = o.Theme
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	return toSerialize, nil
}

type NullableStory struct {
	value *Story
	isSet bool
}

func (v NullableStory) Get() *Story {
	return v.value
}

func (v *NullableStory) Set(val *Story) {
	v.value = val
	v.isSet = true
}

func (v NullableStory) IsSet() bool {
	return v.isSet
}

func (v *NullableStory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStory(val *Story) *NullableStory {
	return &NullableStory{value: val, isSet: true}
}

func (v NullableStory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


