/*
Gamified Task Management API

API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiGamificationDashboardGet200ResponseDataStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiGamificationDashboardGet200ResponseDataStats{}

// ApiGamificationDashboardGet200ResponseDataStats struct for ApiGamificationDashboardGet200ResponseDataStats
type ApiGamificationDashboardGet200ResponseDataStats struct {
	Level *float32 `json:"level,omitempty"`
	TotalXP *float32 `json:"totalXP,omitempty"`
	TasksCompleted *float32 `json:"tasksCompleted,omitempty"`
	CurrentStreak *float32 `json:"currentStreak,omitempty"`
	LongestStreak *float32 `json:"longestStreak,omitempty"`
	Badges []string `json:"badges,omitempty"`
	NextLevel map[string]interface{} `json:"nextLevel,omitempty"`
}

// NewApiGamificationDashboardGet200ResponseDataStats instantiates a new ApiGamificationDashboardGet200ResponseDataStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiGamificationDashboardGet200ResponseDataStats() *ApiGamificationDashboardGet200ResponseDataStats {
	this := ApiGamificationDashboardGet200ResponseDataStats{}
	return &this
}

// NewApiGamificationDashboardGet200ResponseDataStatsWithDefaults instantiates a new ApiGamificationDashboardGet200ResponseDataStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiGamificationDashboardGet200ResponseDataStatsWithDefaults() *ApiGamificationDashboardGet200ResponseDataStats {
	this := ApiGamificationDashboardGet200ResponseDataStats{}
	return &this
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetLevel() float32 {
	if o == nil || IsNil(o.Level) {
		var ret float32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetLevelOk() (*float32, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given float32 and assigns it to the Level field.
func (o *ApiGamificationDashboardGet200ResponseDataStats) SetLevel(v float32) {
	o.Level = &v
}

// GetTotalXP returns the TotalXP field value if set, zero value otherwise.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetTotalXP() float32 {
	if o == nil || IsNil(o.TotalXP) {
		var ret float32
		return ret
	}
	return *o.TotalXP
}

// GetTotalXPOk returns a tuple with the TotalXP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetTotalXPOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalXP) {
		return nil, false
	}
	return o.TotalXP, true
}

// HasTotalXP returns a boolean if a field has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) HasTotalXP() bool {
	if o != nil && !IsNil(o.TotalXP) {
		return true
	}

	return false
}

// SetTotalXP gets a reference to the given float32 and assigns it to the TotalXP field.
func (o *ApiGamificationDashboardGet200ResponseDataStats) SetTotalXP(v float32) {
	o.TotalXP = &v
}

// GetTasksCompleted returns the TasksCompleted field value if set, zero value otherwise.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetTasksCompleted() float32 {
	if o == nil || IsNil(o.TasksCompleted) {
		var ret float32
		return ret
	}
	return *o.TasksCompleted
}

// GetTasksCompletedOk returns a tuple with the TasksCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetTasksCompletedOk() (*float32, bool) {
	if o == nil || IsNil(o.TasksCompleted) {
		return nil, false
	}
	return o.TasksCompleted, true
}

// HasTasksCompleted returns a boolean if a field has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) HasTasksCompleted() bool {
	if o != nil && !IsNil(o.TasksCompleted) {
		return true
	}

	return false
}

// SetTasksCompleted gets a reference to the given float32 and assigns it to the TasksCompleted field.
func (o *ApiGamificationDashboardGet200ResponseDataStats) SetTasksCompleted(v float32) {
	o.TasksCompleted = &v
}

// GetCurrentStreak returns the CurrentStreak field value if set, zero value otherwise.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetCurrentStreak() float32 {
	if o == nil || IsNil(o.CurrentStreak) {
		var ret float32
		return ret
	}
	return *o.CurrentStreak
}

// GetCurrentStreakOk returns a tuple with the CurrentStreak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetCurrentStreakOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentStreak) {
		return nil, false
	}
	return o.CurrentStreak, true
}

// HasCurrentStreak returns a boolean if a field has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) HasCurrentStreak() bool {
	if o != nil && !IsNil(o.CurrentStreak) {
		return true
	}

	return false
}

// SetCurrentStreak gets a reference to the given float32 and assigns it to the CurrentStreak field.
func (o *ApiGamificationDashboardGet200ResponseDataStats) SetCurrentStreak(v float32) {
	o.CurrentStreak = &v
}

// GetLongestStreak returns the LongestStreak field value if set, zero value otherwise.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetLongestStreak() float32 {
	if o == nil || IsNil(o.LongestStreak) {
		var ret float32
		return ret
	}
	return *o.LongestStreak
}

// GetLongestStreakOk returns a tuple with the LongestStreak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetLongestStreakOk() (*float32, bool) {
	if o == nil || IsNil(o.LongestStreak) {
		return nil, false
	}
	return o.LongestStreak, true
}

// HasLongestStreak returns a boolean if a field has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) HasLongestStreak() bool {
	if o != nil && !IsNil(o.LongestStreak) {
		return true
	}

	return false
}

// SetLongestStreak gets a reference to the given float32 and assigns it to the LongestStreak field.
func (o *ApiGamificationDashboardGet200ResponseDataStats) SetLongestStreak(v float32) {
	o.LongestStreak = &v
}

// GetBadges returns the Badges field value if set, zero value otherwise.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetBadges() []string {
	if o == nil || IsNil(o.Badges) {
		var ret []string
		return ret
	}
	return o.Badges
}

// GetBadgesOk returns a tuple with the Badges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetBadgesOk() ([]string, bool) {
	if o == nil || IsNil(o.Badges) {
		return nil, false
	}
	return o.Badges, true
}

// HasBadges returns a boolean if a field has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) HasBadges() bool {
	if o != nil && !IsNil(o.Badges) {
		return true
	}

	return false
}

// SetBadges gets a reference to the given []string and assigns it to the Badges field.
func (o *ApiGamificationDashboardGet200ResponseDataStats) SetBadges(v []string) {
	o.Badges = v
}

// GetNextLevel returns the NextLevel field value if set, zero value otherwise.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetNextLevel() map[string]interface{} {
	if o == nil || IsNil(o.NextLevel) {
		var ret map[string]interface{}
		return ret
	}
	return o.NextLevel
}

// GetNextLevelOk returns a tuple with the NextLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) GetNextLevelOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.NextLevel) {
		return map[string]interface{}{}, false
	}
	return o.NextLevel, true
}

// HasNextLevel returns a boolean if a field has been set.
func (o *ApiGamificationDashboardGet200ResponseDataStats) HasNextLevel() bool {
	if o != nil && !IsNil(o.NextLevel) {
		return true
	}

	return false
}

// SetNextLevel gets a reference to the given map[string]interface{} and assigns it to the NextLevel field.
func (o *ApiGamificationDashboardGet200ResponseDataStats) SetNextLevel(v map[string]interface{}) {
	o.NextLevel = v
}

func (o ApiGamificationDashboardGet200ResponseDataStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiGamificationDashboardGet200ResponseDataStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.TotalXP) {
		toSerialize["totalXP"] = o.TotalXP
	}
	if !IsNil(o.TasksCompleted) {
		toSerialize["tasksCompleted"] = o.TasksCompleted
	}
	if !IsNil(o.CurrentStreak) {
		toSerialize["currentStreak"] = o.CurrentStreak
	}
	if !IsNil(o.LongestStreak) {
		toSerialize["longestStreak"] = o.LongestStreak
	}
	if !IsNil(o.Badges) {
		toSerialize["badges"] = o.Badges
	}
	if !IsNil(o.NextLevel) {
		toSerialize["nextLevel"] = o.NextLevel
	}
	return toSerialize, nil
}

type NullableApiGamificationDashboardGet200ResponseDataStats struct {
	value *ApiGamificationDashboardGet200ResponseDataStats
	isSet bool
}

func (v NullableApiGamificationDashboardGet200ResponseDataStats) Get() *ApiGamificationDashboardGet200ResponseDataStats {
	return v.value
}

func (v *NullableApiGamificationDashboardGet200ResponseDataStats) Set(val *ApiGamificationDashboardGet200ResponseDataStats) {
	v.value = val
	v.isSet = true
}

func (v NullableApiGamificationDashboardGet200ResponseDataStats) IsSet() bool {
	return v.isSet
}

func (v *NullableApiGamificationDashboardGet200ResponseDataStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiGamificationDashboardGet200ResponseDataStats(val *ApiGamificationDashboardGet200ResponseDataStats) *NullableApiGamificationDashboardGet200ResponseDataStats {
	return &NullableApiGamificationDashboardGet200ResponseDataStats{value: val, isSet: true}
}

func (v NullableApiGamificationDashboardGet200ResponseDataStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiGamificationDashboardGet200ResponseDataStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


