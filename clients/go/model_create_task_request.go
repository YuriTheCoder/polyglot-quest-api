/*
Gamified Task Management API

API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CreateTaskRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTaskRequest{}

// CreateTaskRequest struct for CreateTaskRequest
type CreateTaskRequest struct {
	Title string `json:"title"`
	Description string `json:"description"`
	Status *string `json:"status,omitempty"`
	Priority *string `json:"priority,omitempty"`
	DueDate *time.Time `json:"dueDate,omitempty"`
	Tags []string `json:"tags,omitempty"`
}

type _CreateTaskRequest CreateTaskRequest

// NewCreateTaskRequest instantiates a new CreateTaskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTaskRequest(title string, description string) *CreateTaskRequest {
	this := CreateTaskRequest{}
	this.Title = title
	this.Description = description
	var status string = "pending"
	this.Status = &status
	var priority string = "medium"
	this.Priority = &priority
	return &this
}

// NewCreateTaskRequestWithDefaults instantiates a new CreateTaskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTaskRequestWithDefaults() *CreateTaskRequest {
	this := CreateTaskRequest{}
	var status string = "pending"
	this.Status = &status
	var priority string = "medium"
	this.Priority = &priority
	return &this
}

// GetTitle returns the Title field value
func (o *CreateTaskRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CreateTaskRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CreateTaskRequest) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *CreateTaskRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CreateTaskRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CreateTaskRequest) SetDescription(v string) {
	o.Description = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CreateTaskRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTaskRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CreateTaskRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CreateTaskRequest) SetStatus(v string) {
	o.Status = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *CreateTaskRequest) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTaskRequest) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *CreateTaskRequest) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *CreateTaskRequest) SetPriority(v string) {
	o.Priority = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *CreateTaskRequest) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate) {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTaskRequest) GetDueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *CreateTaskRequest) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *CreateTaskRequest) SetDueDate(v time.Time) {
	o.DueDate = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateTaskRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTaskRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateTaskRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CreateTaskRequest) SetTags(v []string) {
	o.Tags = v
}

func (o CreateTaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTaskRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["description"] = o.Description
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *CreateTaskRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTaskRequest := _CreateTaskRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTaskRequest)

	if err != nil {
		return err
	}

	*o = CreateTaskRequest(varCreateTaskRequest)

	return err
}

type NullableCreateTaskRequest struct {
	value *CreateTaskRequest
	isSet bool
}

func (v NullableCreateTaskRequest) Get() *CreateTaskRequest {
	return v.value
}

func (v *NullableCreateTaskRequest) Set(val *CreateTaskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTaskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTaskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTaskRequest(val *CreateTaskRequest) *NullableCreateTaskRequest {
	return &NullableCreateTaskRequest{value: val, isSet: true}
}

func (v NullableCreateTaskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTaskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


