/*
Gamified Task Management API

API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListStories200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListStories200ResponseData{}

// ListStories200ResponseData struct for ListStories200ResponseData
type ListStories200ResponseData struct {
	Stories []Story `json:"stories,omitempty"`
	Pagination map[string]interface{} `json:"pagination,omitempty"`
}

// NewListStories200ResponseData instantiates a new ListStories200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListStories200ResponseData() *ListStories200ResponseData {
	this := ListStories200ResponseData{}
	return &this
}

// NewListStories200ResponseDataWithDefaults instantiates a new ListStories200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListStories200ResponseDataWithDefaults() *ListStories200ResponseData {
	this := ListStories200ResponseData{}
	return &this
}

// GetStories returns the Stories field value if set, zero value otherwise.
func (o *ListStories200ResponseData) GetStories() []Story {
	if o == nil || IsNil(o.Stories) {
		var ret []Story
		return ret
	}
	return o.Stories
}

// GetStoriesOk returns a tuple with the Stories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListStories200ResponseData) GetStoriesOk() ([]Story, bool) {
	if o == nil || IsNil(o.Stories) {
		return nil, false
	}
	return o.Stories, true
}

// HasStories returns a boolean if a field has been set.
func (o *ListStories200ResponseData) HasStories() bool {
	if o != nil && !IsNil(o.Stories) {
		return true
	}

	return false
}

// SetStories gets a reference to the given []Story and assigns it to the Stories field.
func (o *ListStories200ResponseData) SetStories(v []Story) {
	o.Stories = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ListStories200ResponseData) GetPagination() map[string]interface{} {
	if o == nil || IsNil(o.Pagination) {
		var ret map[string]interface{}
		return ret
	}
	return o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListStories200ResponseData) GetPaginationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Pagination) {
		return map[string]interface{}{}, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ListStories200ResponseData) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given map[string]interface{} and assigns it to the Pagination field.
func (o *ListStories200ResponseData) SetPagination(v map[string]interface{}) {
	o.Pagination = v
}

func (o ListStories200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListStories200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Stories) {
		toSerialize["stories"] = o.Stories
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	return toSerialize, nil
}

type NullableListStories200ResponseData struct {
	value *ListStories200ResponseData
	isSet bool
}

func (v NullableListStories200ResponseData) Get() *ListStories200ResponseData {
	return v.value
}

func (v *NullableListStories200ResponseData) Set(val *ListStories200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableListStories200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableListStories200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListStories200ResponseData(val *ListStories200ResponseData) *NullableListStories200ResponseData {
	return &NullableListStories200ResponseData{value: val, isSet: true}
}

func (v NullableListStories200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListStories200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


