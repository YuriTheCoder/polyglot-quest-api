/*
Gamified Task Management API

API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiGamificationBadgesGet200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiGamificationBadgesGet200ResponseData{}

// ApiGamificationBadgesGet200ResponseData struct for ApiGamificationBadgesGet200ResponseData
type ApiGamificationBadgesGet200ResponseData struct {
	Earned []ApiGamificationBadgesGet200ResponseDataEarnedInner `json:"earned,omitempty"`
	Available []map[string]interface{} `json:"available,omitempty"`
	Total *float32 `json:"total,omitempty"`
	EarnedCount *float32 `json:"earnedCount,omitempty"`
}

// NewApiGamificationBadgesGet200ResponseData instantiates a new ApiGamificationBadgesGet200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiGamificationBadgesGet200ResponseData() *ApiGamificationBadgesGet200ResponseData {
	this := ApiGamificationBadgesGet200ResponseData{}
	return &this
}

// NewApiGamificationBadgesGet200ResponseDataWithDefaults instantiates a new ApiGamificationBadgesGet200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiGamificationBadgesGet200ResponseDataWithDefaults() *ApiGamificationBadgesGet200ResponseData {
	this := ApiGamificationBadgesGet200ResponseData{}
	return &this
}

// GetEarned returns the Earned field value if set, zero value otherwise.
func (o *ApiGamificationBadgesGet200ResponseData) GetEarned() []ApiGamificationBadgesGet200ResponseDataEarnedInner {
	if o == nil || IsNil(o.Earned) {
		var ret []ApiGamificationBadgesGet200ResponseDataEarnedInner
		return ret
	}
	return o.Earned
}

// GetEarnedOk returns a tuple with the Earned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGamificationBadgesGet200ResponseData) GetEarnedOk() ([]ApiGamificationBadgesGet200ResponseDataEarnedInner, bool) {
	if o == nil || IsNil(o.Earned) {
		return nil, false
	}
	return o.Earned, true
}

// HasEarned returns a boolean if a field has been set.
func (o *ApiGamificationBadgesGet200ResponseData) HasEarned() bool {
	if o != nil && !IsNil(o.Earned) {
		return true
	}

	return false
}

// SetEarned gets a reference to the given []ApiGamificationBadgesGet200ResponseDataEarnedInner and assigns it to the Earned field.
func (o *ApiGamificationBadgesGet200ResponseData) SetEarned(v []ApiGamificationBadgesGet200ResponseDataEarnedInner) {
	o.Earned = v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *ApiGamificationBadgesGet200ResponseData) GetAvailable() []map[string]interface{} {
	if o == nil || IsNil(o.Available) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGamificationBadgesGet200ResponseData) GetAvailableOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *ApiGamificationBadgesGet200ResponseData) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given []map[string]interface{} and assigns it to the Available field.
func (o *ApiGamificationBadgesGet200ResponseData) SetAvailable(v []map[string]interface{}) {
	o.Available = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ApiGamificationBadgesGet200ResponseData) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGamificationBadgesGet200ResponseData) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ApiGamificationBadgesGet200ResponseData) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *ApiGamificationBadgesGet200ResponseData) SetTotal(v float32) {
	o.Total = &v
}

// GetEarnedCount returns the EarnedCount field value if set, zero value otherwise.
func (o *ApiGamificationBadgesGet200ResponseData) GetEarnedCount() float32 {
	if o == nil || IsNil(o.EarnedCount) {
		var ret float32
		return ret
	}
	return *o.EarnedCount
}

// GetEarnedCountOk returns a tuple with the EarnedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGamificationBadgesGet200ResponseData) GetEarnedCountOk() (*float32, bool) {
	if o == nil || IsNil(o.EarnedCount) {
		return nil, false
	}
	return o.EarnedCount, true
}

// HasEarnedCount returns a boolean if a field has been set.
func (o *ApiGamificationBadgesGet200ResponseData) HasEarnedCount() bool {
	if o != nil && !IsNil(o.EarnedCount) {
		return true
	}

	return false
}

// SetEarnedCount gets a reference to the given float32 and assigns it to the EarnedCount field.
func (o *ApiGamificationBadgesGet200ResponseData) SetEarnedCount(v float32) {
	o.EarnedCount = &v
}

func (o ApiGamificationBadgesGet200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiGamificationBadgesGet200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Earned) {
		toSerialize["earned"] = o.Earned
	}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.EarnedCount) {
		toSerialize["earnedCount"] = o.EarnedCount
	}
	return toSerialize, nil
}

type NullableApiGamificationBadgesGet200ResponseData struct {
	value *ApiGamificationBadgesGet200ResponseData
	isSet bool
}

func (v NullableApiGamificationBadgesGet200ResponseData) Get() *ApiGamificationBadgesGet200ResponseData {
	return v.value
}

func (v *NullableApiGamificationBadgesGet200ResponseData) Set(val *ApiGamificationBadgesGet200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableApiGamificationBadgesGet200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableApiGamificationBadgesGet200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiGamificationBadgesGet200ResponseData(val *ApiGamificationBadgesGet200ResponseData) *NullableApiGamificationBadgesGet200ResponseData {
	return &NullableApiGamificationBadgesGet200ResponseData{value: val, isSet: true}
}

func (v NullableApiGamificationBadgesGet200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiGamificationBadgesGet200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


