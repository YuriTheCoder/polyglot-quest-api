//
// AuthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthAPI {

    /**
     Alterar senha do usuário
     
     - parameter changeUserPasswordRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func changeUserPassword(changeUserPasswordRequest: ChangeUserPasswordRequest, apiResponseQueue: DispatchQueue = GamifiedTasksClientAPI.apiResponseQueue, completion: @escaping ((_ data: ChangeUserPassword200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return changeUserPasswordWithRequestBuilder(changeUserPasswordRequest: changeUserPasswordRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Alterar senha do usuário
     - PUT /api/auth/change-password
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter changeUserPasswordRequest: (body)  
     - returns: RequestBuilder<ChangeUserPassword200Response> 
     */
    open class func changeUserPasswordWithRequestBuilder(changeUserPasswordRequest: ChangeUserPasswordRequest) -> RequestBuilder<ChangeUserPassword200Response> {
        let localVariablePath = "/api/auth/change-password"
        let localVariableURLString = GamifiedTasksClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: changeUserPasswordRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ChangeUserPassword200Response>.Type = GamifiedTasksClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Obter perfil do usuário logado
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserProfile(apiResponseQueue: DispatchQueue = GamifiedTasksClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetUserProfile200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserProfileWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Obter perfil do usuário logado
     - GET /api/auth/profile
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<GetUserProfile200Response> 
     */
    open class func getUserProfileWithRequestBuilder() -> RequestBuilder<GetUserProfile200Response> {
        let localVariablePath = "/api/auth/profile"
        let localVariableURLString = GamifiedTasksClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetUserProfile200Response>.Type = GamifiedTasksClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Login de usuário
     
     - parameter loginUserRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func loginUser(loginUserRequest: LoginUserRequest, apiResponseQueue: DispatchQueue = GamifiedTasksClientAPI.apiResponseQueue, completion: @escaping ((_ data: LoginUser200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return loginUserWithRequestBuilder(loginUserRequest: loginUserRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Login de usuário
     - POST /api/auth/login
     - parameter loginUserRequest: (body)  
     - returns: RequestBuilder<LoginUser200Response> 
     */
    open class func loginUserWithRequestBuilder(loginUserRequest: LoginUserRequest) -> RequestBuilder<LoginUser200Response> {
        let localVariablePath = "/api/auth/login"
        let localVariableURLString = GamifiedTasksClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LoginUser200Response>.Type = GamifiedTasksClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Logout do usuário
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func logoutUser(apiResponseQueue: DispatchQueue = GamifiedTasksClientAPI.apiResponseQueue, completion: @escaping ((_ data: LogoutUser200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return logoutUserWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Logout do usuário
     - POST /api/auth/logout
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<LogoutUser200Response> 
     */
    open class func logoutUserWithRequestBuilder() -> RequestBuilder<LogoutUser200Response> {
        let localVariablePath = "/api/auth/logout"
        let localVariableURLString = GamifiedTasksClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LogoutUser200Response>.Type = GamifiedTasksClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Registrar novo usuário
     
     - parameter registerUserRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func registerUser(registerUserRequest: RegisterUserRequest, apiResponseQueue: DispatchQueue = GamifiedTasksClientAPI.apiResponseQueue, completion: @escaping ((_ data: RegisterUser201Response?, _ error: Error?) -> Void)) -> RequestTask {
        return registerUserWithRequestBuilder(registerUserRequest: registerUserRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Registrar novo usuário
     - POST /api/auth/register
     - parameter registerUserRequest: (body)  
     - returns: RequestBuilder<RegisterUser201Response> 
     */
    open class func registerUserWithRequestBuilder(registerUserRequest: RegisterUserRequest) -> RequestBuilder<RegisterUser201Response> {
        let localVariablePath = "/api/auth/register"
        let localVariableURLString = GamifiedTasksClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RegisterUser201Response>.Type = GamifiedTasksClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Atualizar perfil do usuário
     
     - parameter updateUserProfileRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateUserProfile(updateUserProfileRequest: UpdateUserProfileRequest, apiResponseQueue: DispatchQueue = GamifiedTasksClientAPI.apiResponseQueue, completion: @escaping ((_ data: UpdateUserProfile200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return updateUserProfileWithRequestBuilder(updateUserProfileRequest: updateUserProfileRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Atualizar perfil do usuário
     - PUT /api/auth/profile
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter updateUserProfileRequest: (body)  
     - returns: RequestBuilder<UpdateUserProfile200Response> 
     */
    open class func updateUserProfileWithRequestBuilder(updateUserProfileRequest: UpdateUserProfileRequest) -> RequestBuilder<UpdateUserProfile200Response> {
        let localVariablePath = "/api/auth/profile"
        let localVariableURLString = GamifiedTasksClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserProfileRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdateUserProfile200Response>.Type = GamifiedTasksClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
