//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UsersAPI {

    /**
     Deletar usuário (Admin only)
     
     - parameter id: (path) ID do usuário 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteUser(id: String, apiResponseQueue: DispatchQueue = GamifiedTasksClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteUser200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteUserWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletar usuário (Admin only)
     - DELETE /api/users/{id}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter id: (path) ID do usuário 
     - returns: RequestBuilder<DeleteUser200Response> 
     */
    open class func deleteUserWithRequestBuilder(id: String) -> RequestBuilder<DeleteUser200Response> {
        var localVariablePath = "/api/users/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = GamifiedTasksClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeleteUser200Response>.Type = GamifiedTasksClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter role
     */
    public enum Role_getAllUsers: String, CaseIterable {
        case user = "user"
        case admin = "admin"
    }

    /**
     Listar todos os usuários (Admin only)
     
     - parameter page: (query) Número da página (optional, default to 1)
     - parameter limit: (query) Itens por página (optional, default to 10)
     - parameter search: (query) Buscar por nome ou email (optional)
     - parameter role: (query) Filtrar por papel (optional)
     - parameter isActive: (query) Filtrar por status ativo (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllUsers(page: Int? = nil, limit: Int? = nil, search: String? = nil, role: Role_getAllUsers? = nil, isActive: Bool? = nil, apiResponseQueue: DispatchQueue = GamifiedTasksClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetAllUsers200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllUsersWithRequestBuilder(page: page, limit: limit, search: search, role: role, isActive: isActive).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Listar todos os usuários (Admin only)
     - GET /api/users
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter page: (query) Número da página (optional, default to 1)
     - parameter limit: (query) Itens por página (optional, default to 10)
     - parameter search: (query) Buscar por nome ou email (optional)
     - parameter role: (query) Filtrar por papel (optional)
     - parameter isActive: (query) Filtrar por status ativo (optional)
     - returns: RequestBuilder<GetAllUsers200Response> 
     */
    open class func getAllUsersWithRequestBuilder(page: Int? = nil, limit: Int? = nil, search: String? = nil, role: Role_getAllUsers? = nil, isActive: Bool? = nil) -> RequestBuilder<GetAllUsers200Response> {
        let localVariablePath = "/api/users"
        let localVariableURLString = GamifiedTasksClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "role": (wrappedValue: role?.encodeToJSON(), isExplode: true),
            "isActive": (wrappedValue: isActive?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetAllUsers200Response>.Type = GamifiedTasksClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Obter usuário específico (Admin only)
     
     - parameter id: (path) ID do usuário 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserById(id: String, apiResponseQueue: DispatchQueue = GamifiedTasksClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetUserById200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Obter usuário específico (Admin only)
     - GET /api/users/{id}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter id: (path) ID do usuário 
     - returns: RequestBuilder<GetUserById200Response> 
     */
    open class func getUserByIdWithRequestBuilder(id: String) -> RequestBuilder<GetUserById200Response> {
        var localVariablePath = "/api/users/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = GamifiedTasksClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetUserById200Response>.Type = GamifiedTasksClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Obter estatísticas gerais do sistema (Admin only)
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserStats(apiResponseQueue: DispatchQueue = GamifiedTasksClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetUserStats200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserStatsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Obter estatísticas gerais do sistema (Admin only)
     - GET /api/users/stats
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<GetUserStats200Response> 
     */
    open class func getUserStatsWithRequestBuilder() -> RequestBuilder<GetUserStats200Response> {
        let localVariablePath = "/api/users/stats"
        let localVariableURLString = GamifiedTasksClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetUserStats200Response>.Type = GamifiedTasksClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Ativar/Desativar usuário (Admin only)
     
     - parameter id: (path) ID do usuário 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func toggleUserStatus(id: String, apiResponseQueue: DispatchQueue = GamifiedTasksClientAPI.apiResponseQueue, completion: @escaping ((_ data: ToggleUserStatus200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return toggleUserStatusWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Ativar/Desativar usuário (Admin only)
     - PATCH /api/users/{id}/toggle-status
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter id: (path) ID do usuário 
     - returns: RequestBuilder<ToggleUserStatus200Response> 
     */
    open class func toggleUserStatusWithRequestBuilder(id: String) -> RequestBuilder<ToggleUserStatus200Response> {
        var localVariablePath = "/api/users/{id}/toggle-status"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = GamifiedTasksClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ToggleUserStatus200Response>.Type = GamifiedTasksClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Atualizar usuário (Admin only)
     
     - parameter id: (path) ID do usuário 
     - parameter updateUserRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateUser(id: String, updateUserRequest: UpdateUserRequest, apiResponseQueue: DispatchQueue = GamifiedTasksClientAPI.apiResponseQueue, completion: @escaping ((_ data: UpdateUser200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return updateUserWithRequestBuilder(id: id, updateUserRequest: updateUserRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Atualizar usuário (Admin only)
     - PUT /api/users/{id}
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter id: (path) ID do usuário 
     - parameter updateUserRequest: (body)  
     - returns: RequestBuilder<UpdateUser200Response> 
     */
    open class func updateUserWithRequestBuilder(id: String, updateUserRequest: UpdateUserRequest) -> RequestBuilder<UpdateUser200Response> {
        var localVariablePath = "/api/users/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = GamifiedTasksClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdateUser200Response>.Type = GamifiedTasksClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
