//
// UpdateTaskRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateTaskRequest: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case pending = "pending"
        case inProgress = "in_progress"
        case completed = "completed"
    }
    public enum Priority: String, Codable, CaseIterable {
        case low = "low"
        case medium = "medium"
        case high = "high"
    }
    public static let titleRule = StringRule(minLength: 3, maxLength: 100, pattern: nil)
    public static let descriptionRule = StringRule(minLength: 10, maxLength: 500, pattern: nil)
    public static let tagsRule = ArrayRule(minItems: nil, maxItems: 10, uniqueItems: false)
    public var title: String?
    public var description: String?
    public var status: Status?
    public var priority: Priority?
    public var dueDate: Date?
    public var tags: [String]?

    public init(title: String? = nil, description: String? = nil, status: Status? = nil, priority: Priority? = nil, dueDate: Date? = nil, tags: [String]? = nil) {
        self.title = title
        self.description = description
        self.status = status
        self.priority = priority
        self.dueDate = dueDate
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case description
        case status
        case priority
        case dueDate
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(dueDate, forKey: .dueDate)
        try container.encodeIfPresent(tags, forKey: .tags)
    }
}

