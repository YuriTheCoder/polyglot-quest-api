//
// UpdateGamificationPreferencesRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateGamificationPreferencesRequest: Codable, JSONEncodable, Hashable {

    public enum ModelClass: String, Codable, CaseIterable {
        case aventureiro = "Aventureiro"
        case guerreiro = "Guerreiro"
        case mago = "Mago"
        case ladino = "Ladino"
        case paladino = "Paladino"
        case explorador = "Explorador"
    }
    public enum Theme: String, Codable, CaseIterable {
        case medieval = "medieval"
        case scifi = "scifi"
        case modern = "modern"
        case fantasy = "fantasy"
    }
    public var _class: ModelClass?
    public var theme: Theme?
    public var autoShare: Bool?
    public var shareOnLevelUp: Bool?
    public var shareOnBadge: Bool?

    public init(_class: ModelClass? = nil, theme: Theme? = nil, autoShare: Bool? = nil, shareOnLevelUp: Bool? = nil, shareOnBadge: Bool? = nil) {
        self._class = _class
        self.theme = theme
        self.autoShare = autoShare
        self.shareOnLevelUp = shareOnLevelUp
        self.shareOnBadge = shareOnBadge
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _class = "class"
        case theme
        case autoShare
        case shareOnLevelUp
        case shareOnBadge
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_class, forKey: ._class)
        try container.encodeIfPresent(theme, forKey: .theme)
        try container.encodeIfPresent(autoShare, forKey: .autoShare)
        try container.encodeIfPresent(shareOnLevelUp, forKey: .shareOnLevelUp)
        try container.encodeIfPresent(shareOnBadge, forKey: .shareOnBadge)
    }
}

