//
// GetGamificationDashboard200ResponseDataStats.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetGamificationDashboard200ResponseDataStats: Codable, JSONEncodable, Hashable {

    public var level: Double?
    public var totalXP: Double?
    public var tasksCompleted: Double?
    public var currentStreak: Double?
    public var longestStreak: Double?
    public var badges: [String]?
    public var nextLevel: AnyCodable?

    public init(level: Double? = nil, totalXP: Double? = nil, tasksCompleted: Double? = nil, currentStreak: Double? = nil, longestStreak: Double? = nil, badges: [String]? = nil, nextLevel: AnyCodable? = nil) {
        self.level = level
        self.totalXP = totalXP
        self.tasksCompleted = tasksCompleted
        self.currentStreak = currentStreak
        self.longestStreak = longestStreak
        self.badges = badges
        self.nextLevel = nextLevel
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case level
        case totalXP
        case tasksCompleted
        case currentStreak
        case longestStreak
        case badges
        case nextLevel
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(level, forKey: .level)
        try container.encodeIfPresent(totalXP, forKey: .totalXP)
        try container.encodeIfPresent(tasksCompleted, forKey: .tasksCompleted)
        try container.encodeIfPresent(currentStreak, forKey: .currentStreak)
        try container.encodeIfPresent(longestStreak, forKey: .longestStreak)
        try container.encodeIfPresent(badges, forKey: .badges)
        try container.encodeIfPresent(nextLevel, forKey: .nextLevel)
    }
}

