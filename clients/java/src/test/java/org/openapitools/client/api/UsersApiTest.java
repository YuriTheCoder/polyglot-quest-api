/*
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiUsersGet200Response;
import org.openapitools.client.model.ApiUsersIdDelete200Response;
import org.openapitools.client.model.ApiUsersIdGet200Response;
import org.openapitools.client.model.ApiUsersIdPut200Response;
import org.openapitools.client.model.ApiUsersIdPutRequest;
import org.openapitools.client.model.ApiUsersIdToggleStatusPatch200Response;
import org.openapitools.client.model.ApiUsersStatsGet200Response;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Listar todos os usuários (Admin only)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersGetTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String search = null;
        String role = null;
        Boolean isActive = null;
        ApiUsersGet200Response response = api.apiUsersGet(page, limit, search, role, isActive);
        // TODO: test validations
    }

    /**
     * Deletar usuário (Admin only)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdDeleteTest() throws ApiException {
        String id = null;
        ApiUsersIdDelete200Response response = api.apiUsersIdDelete(id);
        // TODO: test validations
    }

    /**
     * Obter usuário específico (Admin only)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdGetTest() throws ApiException {
        String id = null;
        ApiUsersIdGet200Response response = api.apiUsersIdGet(id);
        // TODO: test validations
    }

    /**
     * Atualizar usuário (Admin only)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdPutTest() throws ApiException {
        String id = null;
        ApiUsersIdPutRequest apiUsersIdPutRequest = null;
        ApiUsersIdPut200Response response = api.apiUsersIdPut(id, apiUsersIdPutRequest);
        // TODO: test validations
    }

    /**
     * Ativar/Desativar usuário (Admin only)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdToggleStatusPatchTest() throws ApiException {
        String id = null;
        ApiUsersIdToggleStatusPatch200Response response = api.apiUsersIdToggleStatusPatch(id);
        // TODO: test validations
    }

    /**
     * Obter estatísticas gerais do sistema (Admin only)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersStatsGetTest() throws ApiException {
        ApiUsersStatsGet200Response response = api.apiUsersStatsGet();
        // TODO: test validations
    }

}
