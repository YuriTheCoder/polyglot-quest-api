/*
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiAuthChangePasswordPut200Response;
import org.openapitools.client.model.ApiAuthChangePasswordPutRequest;
import org.openapitools.client.model.ApiAuthLoginPost200Response;
import org.openapitools.client.model.ApiAuthLoginPostRequest;
import org.openapitools.client.model.ApiAuthLogoutPost200Response;
import org.openapitools.client.model.ApiAuthProfileGet200Response;
import org.openapitools.client.model.ApiAuthProfilePut200Response;
import org.openapitools.client.model.ApiAuthProfilePutRequest;
import org.openapitools.client.model.ApiAuthRegisterPost201Response;
import org.openapitools.client.model.ApiAuthRegisterPostRequest;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Disabled
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    /**
     * Alterar senha do usuário
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAuthChangePasswordPutTest() throws ApiException {
        ApiAuthChangePasswordPutRequest apiAuthChangePasswordPutRequest = null;
        ApiAuthChangePasswordPut200Response response = api.apiAuthChangePasswordPut(apiAuthChangePasswordPutRequest);
        // TODO: test validations
    }

    /**
     * Login de usuário
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAuthLoginPostTest() throws ApiException {
        ApiAuthLoginPostRequest apiAuthLoginPostRequest = null;
        ApiAuthLoginPost200Response response = api.apiAuthLoginPost(apiAuthLoginPostRequest);
        // TODO: test validations
    }

    /**
     * Logout do usuário
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAuthLogoutPostTest() throws ApiException {
        ApiAuthLogoutPost200Response response = api.apiAuthLogoutPost();
        // TODO: test validations
    }

    /**
     * Obter perfil do usuário logado
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAuthProfileGetTest() throws ApiException {
        ApiAuthProfileGet200Response response = api.apiAuthProfileGet();
        // TODO: test validations
    }

    /**
     * Atualizar perfil do usuário
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAuthProfilePutTest() throws ApiException {
        ApiAuthProfilePutRequest apiAuthProfilePutRequest = null;
        ApiAuthProfilePut200Response response = api.apiAuthProfilePut(apiAuthProfilePutRequest);
        // TODO: test validations
    }

    /**
     * Registrar novo usuário
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiAuthRegisterPostTest() throws ApiException {
        ApiAuthRegisterPostRequest apiAuthRegisterPostRequest = null;
        ApiAuthRegisterPost201Response response = api.apiAuthRegisterPost(apiAuthRegisterPostRequest);
        // TODO: test validations
    }

}
