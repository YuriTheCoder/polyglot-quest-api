/*
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChangeUserPassword200Response;
import org.openapitools.client.model.ChangeUserPasswordRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetUserProfile200Response;
import org.openapitools.client.model.LoginUser200Response;
import org.openapitools.client.model.LoginUserRequest;
import org.openapitools.client.model.LogoutUser200Response;
import org.openapitools.client.model.RegisterUser201Response;
import org.openapitools.client.model.RegisterUserRequest;
import org.openapitools.client.model.UpdateUserProfile200Response;
import org.openapitools.client.model.UpdateUserProfileRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changeUserPassword
     * @param changeUserPasswordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Senha alterada com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Senha atual incorreta ou nova senha inválida </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeUserPasswordCall(@javax.annotation.Nonnull ChangeUserPasswordRequest changeUserPasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeUserPasswordRequest;

        // create path and map variables
        String localVarPath = "/api/auth/change-password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeUserPasswordValidateBeforeCall(@javax.annotation.Nonnull ChangeUserPasswordRequest changeUserPasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changeUserPasswordRequest' is set
        if (changeUserPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'changeUserPasswordRequest' when calling changeUserPassword(Async)");
        }

        return changeUserPasswordCall(changeUserPasswordRequest, _callback);

    }

    /**
     * Alterar senha do usuário
     * 
     * @param changeUserPasswordRequest  (required)
     * @return ChangeUserPassword200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Senha alterada com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Senha atual incorreta ou nova senha inválida </td><td>  -  </td></tr>
     </table>
     */
    public ChangeUserPassword200Response changeUserPassword(@javax.annotation.Nonnull ChangeUserPasswordRequest changeUserPasswordRequest) throws ApiException {
        ApiResponse<ChangeUserPassword200Response> localVarResp = changeUserPasswordWithHttpInfo(changeUserPasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Alterar senha do usuário
     * 
     * @param changeUserPasswordRequest  (required)
     * @return ApiResponse&lt;ChangeUserPassword200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Senha alterada com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Senha atual incorreta ou nova senha inválida </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChangeUserPassword200Response> changeUserPasswordWithHttpInfo(@javax.annotation.Nonnull ChangeUserPasswordRequest changeUserPasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = changeUserPasswordValidateBeforeCall(changeUserPasswordRequest, null);
        Type localVarReturnType = new TypeToken<ChangeUserPassword200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alterar senha do usuário (asynchronously)
     * 
     * @param changeUserPasswordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Senha alterada com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Senha atual incorreta ou nova senha inválida </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeUserPasswordAsync(@javax.annotation.Nonnull ChangeUserPasswordRequest changeUserPasswordRequest, final ApiCallback<ChangeUserPassword200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeUserPasswordValidateBeforeCall(changeUserPasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<ChangeUserPassword200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserProfile
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Perfil do usuário </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token não fornecido ou inválido </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserProfileCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserProfileValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserProfileCall(_callback);

    }

    /**
     * Obter perfil do usuário logado
     * 
     * @return GetUserProfile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Perfil do usuário </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token não fornecido ou inválido </td><td>  -  </td></tr>
     </table>
     */
    public GetUserProfile200Response getUserProfile() throws ApiException {
        ApiResponse<GetUserProfile200Response> localVarResp = getUserProfileWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obter perfil do usuário logado
     * 
     * @return ApiResponse&lt;GetUserProfile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Perfil do usuário </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token não fornecido ou inválido </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserProfile200Response> getUserProfileWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserProfileValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetUserProfile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obter perfil do usuário logado (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Perfil do usuário </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Token não fornecido ou inválido </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserProfileAsync(final ApiCallback<GetUserProfile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserProfileValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetUserProfile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loginUser
     * @param loginUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login realizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credenciais inválidas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginUserCall(@javax.annotation.Nonnull LoginUserRequest loginUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loginUserRequest;

        // create path and map variables
        String localVarPath = "/api/auth/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginUserValidateBeforeCall(@javax.annotation.Nonnull LoginUserRequest loginUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loginUserRequest' is set
        if (loginUserRequest == null) {
            throw new ApiException("Missing the required parameter 'loginUserRequest' when calling loginUser(Async)");
        }

        return loginUserCall(loginUserRequest, _callback);

    }

    /**
     * Login de usuário
     * 
     * @param loginUserRequest  (required)
     * @return LoginUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login realizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credenciais inválidas </td><td>  -  </td></tr>
     </table>
     */
    public LoginUser200Response loginUser(@javax.annotation.Nonnull LoginUserRequest loginUserRequest) throws ApiException {
        ApiResponse<LoginUser200Response> localVarResp = loginUserWithHttpInfo(loginUserRequest);
        return localVarResp.getData();
    }

    /**
     * Login de usuário
     * 
     * @param loginUserRequest  (required)
     * @return ApiResponse&lt;LoginUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login realizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credenciais inválidas </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginUser200Response> loginUserWithHttpInfo(@javax.annotation.Nonnull LoginUserRequest loginUserRequest) throws ApiException {
        okhttp3.Call localVarCall = loginUserValidateBeforeCall(loginUserRequest, null);
        Type localVarReturnType = new TypeToken<LoginUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Login de usuário (asynchronously)
     * 
     * @param loginUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login realizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credenciais inválidas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginUserAsync(@javax.annotation.Nonnull LoginUserRequest loginUserRequest, final ApiCallback<LoginUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginUserValidateBeforeCall(loginUserRequest, _callback);
        Type localVarReturnType = new TypeToken<LoginUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logoutUser
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logout realizado com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/auth/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return logoutUserCall(_callback);

    }

    /**
     * Logout do usuário
     * 
     * @return LogoutUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logout realizado com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public LogoutUser200Response logoutUser() throws ApiException {
        ApiResponse<LogoutUser200Response> localVarResp = logoutUserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Logout do usuário
     * 
     * @return ApiResponse&lt;LogoutUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logout realizado com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutUser200Response> logoutUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = logoutUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LogoutUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Logout do usuário (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logout realizado com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutUserAsync(final ApiCallback<LogoutUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LogoutUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerUser
     * @param registerUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Usuário registrado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Dados inválidos ou usuário já existe </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUserCall(@javax.annotation.Nonnull RegisterUserRequest registerUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerUserRequest;

        // create path and map variables
        String localVarPath = "/api/auth/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerUserValidateBeforeCall(@javax.annotation.Nonnull RegisterUserRequest registerUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registerUserRequest' is set
        if (registerUserRequest == null) {
            throw new ApiException("Missing the required parameter 'registerUserRequest' when calling registerUser(Async)");
        }

        return registerUserCall(registerUserRequest, _callback);

    }

    /**
     * Registrar novo usuário
     * 
     * @param registerUserRequest  (required)
     * @return RegisterUser201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Usuário registrado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Dados inválidos ou usuário já existe </td><td>  -  </td></tr>
     </table>
     */
    public RegisterUser201Response registerUser(@javax.annotation.Nonnull RegisterUserRequest registerUserRequest) throws ApiException {
        ApiResponse<RegisterUser201Response> localVarResp = registerUserWithHttpInfo(registerUserRequest);
        return localVarResp.getData();
    }

    /**
     * Registrar novo usuário
     * 
     * @param registerUserRequest  (required)
     * @return ApiResponse&lt;RegisterUser201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Usuário registrado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Dados inválidos ou usuário já existe </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterUser201Response> registerUserWithHttpInfo(@javax.annotation.Nonnull RegisterUserRequest registerUserRequest) throws ApiException {
        okhttp3.Call localVarCall = registerUserValidateBeforeCall(registerUserRequest, null);
        Type localVarReturnType = new TypeToken<RegisterUser201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Registrar novo usuário (asynchronously)
     * 
     * @param registerUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Usuário registrado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Dados inválidos ou usuário já existe </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUserAsync(@javax.annotation.Nonnull RegisterUserRequest registerUserRequest, final ApiCallback<RegisterUser201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerUserValidateBeforeCall(registerUserRequest, _callback);
        Type localVarReturnType = new TypeToken<RegisterUser201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserProfile
     * @param updateUserProfileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Perfil atualizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email já está em uso </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserProfileCall(@javax.annotation.Nonnull UpdateUserProfileRequest updateUserProfileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserProfileRequest;

        // create path and map variables
        String localVarPath = "/api/auth/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserProfileValidateBeforeCall(@javax.annotation.Nonnull UpdateUserProfileRequest updateUserProfileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateUserProfileRequest' is set
        if (updateUserProfileRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserProfileRequest' when calling updateUserProfile(Async)");
        }

        return updateUserProfileCall(updateUserProfileRequest, _callback);

    }

    /**
     * Atualizar perfil do usuário
     * 
     * @param updateUserProfileRequest  (required)
     * @return UpdateUserProfile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Perfil atualizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email já está em uso </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserProfile200Response updateUserProfile(@javax.annotation.Nonnull UpdateUserProfileRequest updateUserProfileRequest) throws ApiException {
        ApiResponse<UpdateUserProfile200Response> localVarResp = updateUserProfileWithHttpInfo(updateUserProfileRequest);
        return localVarResp.getData();
    }

    /**
     * Atualizar perfil do usuário
     * 
     * @param updateUserProfileRequest  (required)
     * @return ApiResponse&lt;UpdateUserProfile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Perfil atualizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email já está em uso </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateUserProfile200Response> updateUserProfileWithHttpInfo(@javax.annotation.Nonnull UpdateUserProfileRequest updateUserProfileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserProfileValidateBeforeCall(updateUserProfileRequest, null);
        Type localVarReturnType = new TypeToken<UpdateUserProfile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Atualizar perfil do usuário (asynchronously)
     * 
     * @param updateUserProfileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Perfil atualizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email já está em uso </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserProfileAsync(@javax.annotation.Nonnull UpdateUserProfileRequest updateUserProfileRequest, final ApiCallback<UpdateUserProfile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserProfileValidateBeforeCall(updateUserProfileRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateUserProfile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
