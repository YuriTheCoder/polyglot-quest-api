/*
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateGamificationPreferencesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-14T22:52:12.042322500-03:00[America/Sao_Paulo]", comments = "Generator version: 7.13.0")
public class UpdateGamificationPreferencesRequest {
  /**
   * Gets or Sets propertyClass
   */
  @JsonAdapter(PropertyClassEnum.Adapter.class)
  public enum PropertyClassEnum {
    AVENTUREIRO("Aventureiro"),
    
    GUERREIRO("Guerreiro"),
    
    MAGO("Mago"),
    
    LADINO("Ladino"),
    
    PALADINO("Paladino"),
    
    EXPLORADOR("Explorador");

    private String value;

    PropertyClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyClassEnum fromValue(String value) {
      for (PropertyClassEnum b : PropertyClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PropertyClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  @javax.annotation.Nullable
  private PropertyClassEnum propertyClass;

  /**
   * Gets or Sets theme
   */
  @JsonAdapter(ThemeEnum.Adapter.class)
  public enum ThemeEnum {
    MEDIEVAL("medieval"),
    
    SCIFI("scifi"),
    
    MODERN("modern"),
    
    FANTASY("fantasy");

    private String value;

    ThemeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThemeEnum fromValue(String value) {
      for (ThemeEnum b : ThemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThemeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThemeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ThemeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  @javax.annotation.Nullable
  private ThemeEnum theme;

  public static final String SERIALIZED_NAME_AUTO_SHARE = "autoShare";
  @SerializedName(SERIALIZED_NAME_AUTO_SHARE)
  @javax.annotation.Nullable
  private Boolean autoShare;

  public static final String SERIALIZED_NAME_SHARE_ON_LEVEL_UP = "shareOnLevelUp";
  @SerializedName(SERIALIZED_NAME_SHARE_ON_LEVEL_UP)
  @javax.annotation.Nullable
  private Boolean shareOnLevelUp;

  public static final String SERIALIZED_NAME_SHARE_ON_BADGE = "shareOnBadge";
  @SerializedName(SERIALIZED_NAME_SHARE_ON_BADGE)
  @javax.annotation.Nullable
  private Boolean shareOnBadge;

  public UpdateGamificationPreferencesRequest() {
  }

  public UpdateGamificationPreferencesRequest propertyClass(@javax.annotation.Nullable PropertyClassEnum propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * Get propertyClass
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public PropertyClassEnum getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(@javax.annotation.Nullable PropertyClassEnum propertyClass) {
    this.propertyClass = propertyClass;
  }


  public UpdateGamificationPreferencesRequest theme(@javax.annotation.Nullable ThemeEnum theme) {
    this.theme = theme;
    return this;
  }

  /**
   * Get theme
   * @return theme
   */
  @javax.annotation.Nullable
  public ThemeEnum getTheme() {
    return theme;
  }

  public void setTheme(@javax.annotation.Nullable ThemeEnum theme) {
    this.theme = theme;
  }


  public UpdateGamificationPreferencesRequest autoShare(@javax.annotation.Nullable Boolean autoShare) {
    this.autoShare = autoShare;
    return this;
  }

  /**
   * Get autoShare
   * @return autoShare
   */
  @javax.annotation.Nullable
  public Boolean getAutoShare() {
    return autoShare;
  }

  public void setAutoShare(@javax.annotation.Nullable Boolean autoShare) {
    this.autoShare = autoShare;
  }


  public UpdateGamificationPreferencesRequest shareOnLevelUp(@javax.annotation.Nullable Boolean shareOnLevelUp) {
    this.shareOnLevelUp = shareOnLevelUp;
    return this;
  }

  /**
   * Get shareOnLevelUp
   * @return shareOnLevelUp
   */
  @javax.annotation.Nullable
  public Boolean getShareOnLevelUp() {
    return shareOnLevelUp;
  }

  public void setShareOnLevelUp(@javax.annotation.Nullable Boolean shareOnLevelUp) {
    this.shareOnLevelUp = shareOnLevelUp;
  }


  public UpdateGamificationPreferencesRequest shareOnBadge(@javax.annotation.Nullable Boolean shareOnBadge) {
    this.shareOnBadge = shareOnBadge;
    return this;
  }

  /**
   * Get shareOnBadge
   * @return shareOnBadge
   */
  @javax.annotation.Nullable
  public Boolean getShareOnBadge() {
    return shareOnBadge;
  }

  public void setShareOnBadge(@javax.annotation.Nullable Boolean shareOnBadge) {
    this.shareOnBadge = shareOnBadge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateGamificationPreferencesRequest updateGamificationPreferencesRequest = (UpdateGamificationPreferencesRequest) o;
    return Objects.equals(this.propertyClass, updateGamificationPreferencesRequest.propertyClass) &&
        Objects.equals(this.theme, updateGamificationPreferencesRequest.theme) &&
        Objects.equals(this.autoShare, updateGamificationPreferencesRequest.autoShare) &&
        Objects.equals(this.shareOnLevelUp, updateGamificationPreferencesRequest.shareOnLevelUp) &&
        Objects.equals(this.shareOnBadge, updateGamificationPreferencesRequest.shareOnBadge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyClass, theme, autoShare, shareOnLevelUp, shareOnBadge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateGamificationPreferencesRequest {\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    autoShare: ").append(toIndentedString(autoShare)).append("\n");
    sb.append("    shareOnLevelUp: ").append(toIndentedString(shareOnLevelUp)).append("\n");
    sb.append("    shareOnBadge: ").append(toIndentedString(shareOnBadge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("class");
    openapiFields.add("theme");
    openapiFields.add("autoShare");
    openapiFields.add("shareOnLevelUp");
    openapiFields.add("shareOnBadge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateGamificationPreferencesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateGamificationPreferencesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateGamificationPreferencesRequest is not found in the empty JSON string", UpdateGamificationPreferencesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateGamificationPreferencesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateGamificationPreferencesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) && !jsonObj.get("class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class").toString()));
      }
      // validate the optional field `class`
      if (jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) {
        PropertyClassEnum.validateJsonElement(jsonObj.get("class"));
      }
      if ((jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) && !jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
      // validate the optional field `theme`
      if (jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) {
        ThemeEnum.validateJsonElement(jsonObj.get("theme"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateGamificationPreferencesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateGamificationPreferencesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateGamificationPreferencesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateGamificationPreferencesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateGamificationPreferencesRequest>() {
           @Override
           public void write(JsonWriter out, UpdateGamificationPreferencesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateGamificationPreferencesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateGamificationPreferencesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateGamificationPreferencesRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateGamificationPreferencesRequest
   */
  public static UpdateGamificationPreferencesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateGamificationPreferencesRequest.class);
  }

  /**
   * Convert an instance of UpdateGamificationPreferencesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

