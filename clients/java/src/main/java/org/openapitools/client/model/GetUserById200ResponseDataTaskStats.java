/*
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetUserById200ResponseDataTaskStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-14T22:52:12.042322500-03:00[America/Sao_Paulo]", comments = "Generator version: 7.13.0")
public class GetUserById200ResponseDataTaskStats {
  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  @javax.annotation.Nullable
  private Integer total;

  public static final String SERIALIZED_NAME_PENDING = "pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  @javax.annotation.Nullable
  private Integer pending;

  public static final String SERIALIZED_NAME_IN_PROGRESS = "in_progress";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS)
  @javax.annotation.Nullable
  private Integer inProgress;

  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  @javax.annotation.Nullable
  private Integer completed;

  public GetUserById200ResponseDataTaskStats() {
  }

  public GetUserById200ResponseDataTaskStats total(@javax.annotation.Nullable Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(@javax.annotation.Nullable Integer total) {
    this.total = total;
  }


  public GetUserById200ResponseDataTaskStats pending(@javax.annotation.Nullable Integer pending) {
    this.pending = pending;
    return this;
  }

  /**
   * Get pending
   * @return pending
   */
  @javax.annotation.Nullable
  public Integer getPending() {
    return pending;
  }

  public void setPending(@javax.annotation.Nullable Integer pending) {
    this.pending = pending;
  }


  public GetUserById200ResponseDataTaskStats inProgress(@javax.annotation.Nullable Integer inProgress) {
    this.inProgress = inProgress;
    return this;
  }

  /**
   * Get inProgress
   * @return inProgress
   */
  @javax.annotation.Nullable
  public Integer getInProgress() {
    return inProgress;
  }

  public void setInProgress(@javax.annotation.Nullable Integer inProgress) {
    this.inProgress = inProgress;
  }


  public GetUserById200ResponseDataTaskStats completed(@javax.annotation.Nullable Integer completed) {
    this.completed = completed;
    return this;
  }

  /**
   * Get completed
   * @return completed
   */
  @javax.annotation.Nullable
  public Integer getCompleted() {
    return completed;
  }

  public void setCompleted(@javax.annotation.Nullable Integer completed) {
    this.completed = completed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUserById200ResponseDataTaskStats getUserById200ResponseDataTaskStats = (GetUserById200ResponseDataTaskStats) o;
    return Objects.equals(this.total, getUserById200ResponseDataTaskStats.total) &&
        Objects.equals(this.pending, getUserById200ResponseDataTaskStats.pending) &&
        Objects.equals(this.inProgress, getUserById200ResponseDataTaskStats.inProgress) &&
        Objects.equals(this.completed, getUserById200ResponseDataTaskStats.completed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, pending, inProgress, completed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUserById200ResponseDataTaskStats {\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total");
    openapiFields.add("pending");
    openapiFields.add("in_progress");
    openapiFields.add("completed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetUserById200ResponseDataTaskStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUserById200ResponseDataTaskStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUserById200ResponseDataTaskStats is not found in the empty JSON string", GetUserById200ResponseDataTaskStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetUserById200ResponseDataTaskStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUserById200ResponseDataTaskStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUserById200ResponseDataTaskStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUserById200ResponseDataTaskStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUserById200ResponseDataTaskStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUserById200ResponseDataTaskStats.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUserById200ResponseDataTaskStats>() {
           @Override
           public void write(JsonWriter out, GetUserById200ResponseDataTaskStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUserById200ResponseDataTaskStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetUserById200ResponseDataTaskStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetUserById200ResponseDataTaskStats
   * @throws IOException if the JSON string is invalid with respect to GetUserById200ResponseDataTaskStats
   */
  public static GetUserById200ResponseDataTaskStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUserById200ResponseDataTaskStats.class);
  }

  /**
   * Convert an instance of GetUserById200ResponseDataTaskStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

