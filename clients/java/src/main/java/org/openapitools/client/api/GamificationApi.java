/*
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CompleteQuest200Response;
import org.openapitools.client.model.CompleteQuestRequest;
import org.openapitools.client.model.CreateStoryFromTasks201Response;
import org.openapitools.client.model.CreateStoryFromTasksRequest;
import org.openapitools.client.model.GetBadges200Response;
import org.openapitools.client.model.GetGamificationDashboard200Response;
import org.openapitools.client.model.GetGlobalStats200Response;
import org.openapitools.client.model.GetLeaderboard200Response;
import org.openapitools.client.model.GetStoryById200Response;
import org.openapitools.client.model.ListStories200Response;
import org.openapitools.client.model.ShareMilestone200Response;
import org.openapitools.client.model.ShareMilestoneRequest;
import org.openapitools.client.model.UpdateGamificationPreferences200Response;
import org.openapitools.client.model.UpdateGamificationPreferencesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GamificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GamificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GamificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for completeQuest
     * @param id ID da tarefa/quest (required)
     * @param completeQuestRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quest completada com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeQuestCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable CompleteQuestRequest completeQuestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completeQuestRequest;

        // create path and map variables
        String localVarPath = "/api/tasks/{id}/complete-quest"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeQuestValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nullable CompleteQuestRequest completeQuestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling completeQuest(Async)");
        }

        return completeQuestCall(id, completeQuestRequest, _callback);

    }

    /**
     * Complete a quest (task) and get XP
     * 
     * @param id ID da tarefa/quest (required)
     * @param completeQuestRequest  (optional)
     * @return CompleteQuest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quest completada com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public CompleteQuest200Response completeQuest(@javax.annotation.Nonnull String id, @javax.annotation.Nullable CompleteQuestRequest completeQuestRequest) throws ApiException {
        ApiResponse<CompleteQuest200Response> localVarResp = completeQuestWithHttpInfo(id, completeQuestRequest);
        return localVarResp.getData();
    }

    /**
     * Complete a quest (task) and get XP
     * 
     * @param id ID da tarefa/quest (required)
     * @param completeQuestRequest  (optional)
     * @return ApiResponse&lt;CompleteQuest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quest completada com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompleteQuest200Response> completeQuestWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nullable CompleteQuestRequest completeQuestRequest) throws ApiException {
        okhttp3.Call localVarCall = completeQuestValidateBeforeCall(id, completeQuestRequest, null);
        Type localVarReturnType = new TypeToken<CompleteQuest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Complete a quest (task) and get XP (asynchronously)
     * 
     * @param id ID da tarefa/quest (required)
     * @param completeQuestRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quest completada com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeQuestAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nullable CompleteQuestRequest completeQuestRequest, final ApiCallback<CompleteQuest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeQuestValidateBeforeCall(id, completeQuestRequest, _callback);
        Type localVarReturnType = new TypeToken<CompleteQuest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStoryFromTasks
     * @param createStoryFromTasksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> História épica gerada com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStoryFromTasksCall(@javax.annotation.Nonnull CreateStoryFromTasksRequest createStoryFromTasksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStoryFromTasksRequest;

        // create path and map variables
        String localVarPath = "/api/tasks/story";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStoryFromTasksValidateBeforeCall(@javax.annotation.Nonnull CreateStoryFromTasksRequest createStoryFromTasksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createStoryFromTasksRequest' is set
        if (createStoryFromTasksRequest == null) {
            throw new ApiException("Missing the required parameter 'createStoryFromTasksRequest' when calling createStoryFromTasks(Async)");
        }

        return createStoryFromTasksCall(createStoryFromTasksRequest, _callback);

    }

    /**
     * Generate a story from tasks
     * 
     * @param createStoryFromTasksRequest  (required)
     * @return CreateStoryFromTasks201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> História épica gerada com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public CreateStoryFromTasks201Response createStoryFromTasks(@javax.annotation.Nonnull CreateStoryFromTasksRequest createStoryFromTasksRequest) throws ApiException {
        ApiResponse<CreateStoryFromTasks201Response> localVarResp = createStoryFromTasksWithHttpInfo(createStoryFromTasksRequest);
        return localVarResp.getData();
    }

    /**
     * Generate a story from tasks
     * 
     * @param createStoryFromTasksRequest  (required)
     * @return ApiResponse&lt;CreateStoryFromTasks201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> História épica gerada com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStoryFromTasks201Response> createStoryFromTasksWithHttpInfo(@javax.annotation.Nonnull CreateStoryFromTasksRequest createStoryFromTasksRequest) throws ApiException {
        okhttp3.Call localVarCall = createStoryFromTasksValidateBeforeCall(createStoryFromTasksRequest, null);
        Type localVarReturnType = new TypeToken<CreateStoryFromTasks201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a story from tasks (asynchronously)
     * 
     * @param createStoryFromTasksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> História épica gerada com sucesso </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStoryFromTasksAsync(@javax.annotation.Nonnull CreateStoryFromTasksRequest createStoryFromTasksRequest, final ApiCallback<CreateStoryFromTasks201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStoryFromTasksValidateBeforeCall(createStoryFromTasksRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateStoryFromTasks201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBadges
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de badges </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBadgesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/gamification/badges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBadgesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getBadgesCall(_callback);

    }

    /**
     * Listar badges disponíveis e conquistados
     * 
     * @return GetBadges200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de badges </td><td>  -  </td></tr>
     </table>
     */
    public GetBadges200Response getBadges() throws ApiException {
        ApiResponse<GetBadges200Response> localVarResp = getBadgesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Listar badges disponíveis e conquistados
     * 
     * @return ApiResponse&lt;GetBadges200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de badges </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBadges200Response> getBadgesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getBadgesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetBadges200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listar badges disponíveis e conquistados (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de badges </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBadgesAsync(final ApiCallback<GetBadges200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBadgesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetBadges200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGamificationDashboard
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dashboard completo do usuário </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGamificationDashboardCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/gamification/dashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGamificationDashboardValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGamificationDashboardCall(_callback);

    }

    /**
     * Dashboard de gamificação do usuário
     * 
     * @return GetGamificationDashboard200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dashboard completo do usuário </td><td>  -  </td></tr>
     </table>
     */
    public GetGamificationDashboard200Response getGamificationDashboard() throws ApiException {
        ApiResponse<GetGamificationDashboard200Response> localVarResp = getGamificationDashboardWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Dashboard de gamificação do usuário
     * 
     * @return ApiResponse&lt;GetGamificationDashboard200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dashboard completo do usuário </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGamificationDashboard200Response> getGamificationDashboardWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGamificationDashboardValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetGamificationDashboard200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dashboard de gamificação do usuário (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dashboard completo do usuário </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGamificationDashboardAsync(final ApiCallback<GetGamificationDashboard200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGamificationDashboardValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetGamificationDashboard200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGlobalStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estatísticas globais </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlobalStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/gamification/global-stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGlobalStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGlobalStatsCall(_callback);

    }

    /**
     * Estatísticas globais da plataforma
     * 
     * @return GetGlobalStats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estatísticas globais </td><td>  -  </td></tr>
     </table>
     */
    public GetGlobalStats200Response getGlobalStats() throws ApiException {
        ApiResponse<GetGlobalStats200Response> localVarResp = getGlobalStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Estatísticas globais da plataforma
     * 
     * @return ApiResponse&lt;GetGlobalStats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estatísticas globais </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGlobalStats200Response> getGlobalStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGlobalStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetGlobalStats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Estatísticas globais da plataforma (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estatísticas globais </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlobalStatsAsync(final ApiCallback<GetGlobalStats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGlobalStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetGlobalStats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLeaderboard
     * @param limit Número de usuários no ranking (optional, default to 10)
     * @param period Período do ranking (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Leaderboard dos top usuários </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLeaderboardCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String period, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/leaderboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLeaderboardValidateBeforeCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String period, final ApiCallback _callback) throws ApiException {
        return getLeaderboardCall(limit, period, _callback);

    }

    /**
     * Obter leaderboard público
     * 
     * @param limit Número de usuários no ranking (optional, default to 10)
     * @param period Período do ranking (optional, default to all)
     * @return GetLeaderboard200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Leaderboard dos top usuários </td><td>  -  </td></tr>
     </table>
     */
    public GetLeaderboard200Response getLeaderboard(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String period) throws ApiException {
        ApiResponse<GetLeaderboard200Response> localVarResp = getLeaderboardWithHttpInfo(limit, period);
        return localVarResp.getData();
    }

    /**
     * Obter leaderboard público
     * 
     * @param limit Número de usuários no ranking (optional, default to 10)
     * @param period Período do ranking (optional, default to all)
     * @return ApiResponse&lt;GetLeaderboard200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Leaderboard dos top usuários </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLeaderboard200Response> getLeaderboardWithHttpInfo(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String period) throws ApiException {
        okhttp3.Call localVarCall = getLeaderboardValidateBeforeCall(limit, period, null);
        Type localVarReturnType = new TypeToken<GetLeaderboard200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obter leaderboard público (asynchronously)
     * 
     * @param limit Número de usuários no ranking (optional, default to 10)
     * @param period Período do ranking (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Leaderboard dos top usuários </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLeaderboardAsync(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String period, final ApiCallback<GetLeaderboard200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLeaderboardValidateBeforeCall(limit, period, _callback);
        Type localVarReturnType = new TypeToken<GetLeaderboard200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStoryById
     * @param id ID da história (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalhes da história </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoryByIdCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/stories/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoryByIdValidateBeforeCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStoryById(Async)");
        }

        return getStoryByIdCall(id, _callback);

    }

    /**
     * Get a specific story by ID
     * 
     * @param id ID da história (required)
     * @return GetStoryById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalhes da história </td><td>  -  </td></tr>
     </table>
     */
    public GetStoryById200Response getStoryById(@javax.annotation.Nonnull String id) throws ApiException {
        ApiResponse<GetStoryById200Response> localVarResp = getStoryByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a specific story by ID
     * 
     * @param id ID da história (required)
     * @return ApiResponse&lt;GetStoryById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalhes da história </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStoryById200Response> getStoryByIdWithHttpInfo(@javax.annotation.Nonnull String id) throws ApiException {
        okhttp3.Call localVarCall = getStoryByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetStoryById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific story by ID (asynchronously)
     * 
     * @param id ID da história (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalhes da história </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoryByIdAsync(@javax.annotation.Nonnull String id, final ApiCallback<GetStoryById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoryByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetStoryById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listStories
     * @param active Filtrar histórias ativas (optional, default to true)
     * @param limit Limite de resultados (optional, default to 10)
     * @param page Página (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de histórias </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStoriesCall(@javax.annotation.Nullable String active, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/stories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStoriesValidateBeforeCall(@javax.annotation.Nullable String active, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer page, final ApiCallback _callback) throws ApiException {
        return listStoriesCall(active, limit, page, _callback);

    }

    /**
     * List all stories for the user
     * 
     * @param active Filtrar histórias ativas (optional, default to true)
     * @param limit Limite de resultados (optional, default to 10)
     * @param page Página (optional, default to 1)
     * @return ListStories200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de histórias </td><td>  -  </td></tr>
     </table>
     */
    public ListStories200Response listStories(@javax.annotation.Nullable String active, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer page) throws ApiException {
        ApiResponse<ListStories200Response> localVarResp = listStoriesWithHttpInfo(active, limit, page);
        return localVarResp.getData();
    }

    /**
     * List all stories for the user
     * 
     * @param active Filtrar histórias ativas (optional, default to true)
     * @param limit Limite de resultados (optional, default to 10)
     * @param page Página (optional, default to 1)
     * @return ApiResponse&lt;ListStories200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de histórias </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStories200Response> listStoriesWithHttpInfo(@javax.annotation.Nullable String active, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer page) throws ApiException {
        okhttp3.Call localVarCall = listStoriesValidateBeforeCall(active, limit, page, null);
        Type localVarReturnType = new TypeToken<ListStories200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all stories for the user (asynchronously)
     * 
     * @param active Filtrar histórias ativas (optional, default to true)
     * @param limit Limite de resultados (optional, default to 10)
     * @param page Página (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de histórias </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStoriesAsync(@javax.annotation.Nullable String active, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer page, final ApiCallback<ListStories200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStoriesValidateBeforeCall(active, limit, page, _callback);
        Type localVarReturnType = new TypeToken<ListStories200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareMilestone
     * @param shareMilestoneRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Conquista compartilhada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareMilestoneCall(@javax.annotation.Nonnull ShareMilestoneRequest shareMilestoneRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shareMilestoneRequest;

        // create path and map variables
        String localVarPath = "/api/gamification/share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareMilestoneValidateBeforeCall(@javax.annotation.Nonnull ShareMilestoneRequest shareMilestoneRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shareMilestoneRequest' is set
        if (shareMilestoneRequest == null) {
            throw new ApiException("Missing the required parameter 'shareMilestoneRequest' when calling shareMilestone(Async)");
        }

        return shareMilestoneCall(shareMilestoneRequest, _callback);

    }

    /**
     * Compartilhar conquista manualmente
     * 
     * @param shareMilestoneRequest  (required)
     * @return ShareMilestone200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Conquista compartilhada </td><td>  -  </td></tr>
     </table>
     */
    public ShareMilestone200Response shareMilestone(@javax.annotation.Nonnull ShareMilestoneRequest shareMilestoneRequest) throws ApiException {
        ApiResponse<ShareMilestone200Response> localVarResp = shareMilestoneWithHttpInfo(shareMilestoneRequest);
        return localVarResp.getData();
    }

    /**
     * Compartilhar conquista manualmente
     * 
     * @param shareMilestoneRequest  (required)
     * @return ApiResponse&lt;ShareMilestone200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Conquista compartilhada </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareMilestone200Response> shareMilestoneWithHttpInfo(@javax.annotation.Nonnull ShareMilestoneRequest shareMilestoneRequest) throws ApiException {
        okhttp3.Call localVarCall = shareMilestoneValidateBeforeCall(shareMilestoneRequest, null);
        Type localVarReturnType = new TypeToken<ShareMilestone200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compartilhar conquista manualmente (asynchronously)
     * 
     * @param shareMilestoneRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Conquista compartilhada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareMilestoneAsync(@javax.annotation.Nonnull ShareMilestoneRequest shareMilestoneRequest, final ApiCallback<ShareMilestone200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareMilestoneValidateBeforeCall(shareMilestoneRequest, _callback);
        Type localVarReturnType = new TypeToken<ShareMilestone200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGamificationPreferences
     * @param updateGamificationPreferencesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preferências atualizadas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGamificationPreferencesCall(@javax.annotation.Nullable UpdateGamificationPreferencesRequest updateGamificationPreferencesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGamificationPreferencesRequest;

        // create path and map variables
        String localVarPath = "/api/gamification/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGamificationPreferencesValidateBeforeCall(@javax.annotation.Nullable UpdateGamificationPreferencesRequest updateGamificationPreferencesRequest, final ApiCallback _callback) throws ApiException {
        return updateGamificationPreferencesCall(updateGamificationPreferencesRequest, _callback);

    }

    /**
     * Atualizar preferências de gamificação
     * 
     * @param updateGamificationPreferencesRequest  (optional)
     * @return UpdateGamificationPreferences200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preferências atualizadas </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGamificationPreferences200Response updateGamificationPreferences(@javax.annotation.Nullable UpdateGamificationPreferencesRequest updateGamificationPreferencesRequest) throws ApiException {
        ApiResponse<UpdateGamificationPreferences200Response> localVarResp = updateGamificationPreferencesWithHttpInfo(updateGamificationPreferencesRequest);
        return localVarResp.getData();
    }

    /**
     * Atualizar preferências de gamificação
     * 
     * @param updateGamificationPreferencesRequest  (optional)
     * @return ApiResponse&lt;UpdateGamificationPreferences200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preferências atualizadas </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGamificationPreferences200Response> updateGamificationPreferencesWithHttpInfo(@javax.annotation.Nullable UpdateGamificationPreferencesRequest updateGamificationPreferencesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGamificationPreferencesValidateBeforeCall(updateGamificationPreferencesRequest, null);
        Type localVarReturnType = new TypeToken<UpdateGamificationPreferences200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Atualizar preferências de gamificação (asynchronously)
     * 
     * @param updateGamificationPreferencesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preferências atualizadas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGamificationPreferencesAsync(@javax.annotation.Nullable UpdateGamificationPreferencesRequest updateGamificationPreferencesRequest, final ApiCallback<UpdateGamificationPreferences200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGamificationPreferencesValidateBeforeCall(updateGamificationPreferencesRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateGamificationPreferences200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
