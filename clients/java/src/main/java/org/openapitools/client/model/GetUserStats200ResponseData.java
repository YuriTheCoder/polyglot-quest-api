/*
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetUserStats200ResponseDataMostActiveUsersInner;
import org.openapitools.client.model.GetUserStats200ResponseDataTasks;
import org.openapitools.client.model.GetUserStats200ResponseDataUsers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetUserStats200ResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-14T22:52:12.042322500-03:00[America/Sao_Paulo]", comments = "Generator version: 7.13.0")
public class GetUserStats200ResponseData {
  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  @javax.annotation.Nullable
  private GetUserStats200ResponseDataUsers users;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  @javax.annotation.Nullable
  private GetUserStats200ResponseDataTasks tasks;

  public static final String SERIALIZED_NAME_MOST_ACTIVE_USERS = "mostActiveUsers";
  @SerializedName(SERIALIZED_NAME_MOST_ACTIVE_USERS)
  @javax.annotation.Nullable
  private List<GetUserStats200ResponseDataMostActiveUsersInner> mostActiveUsers = new ArrayList<>();

  public GetUserStats200ResponseData() {
  }

  public GetUserStats200ResponseData users(@javax.annotation.Nullable GetUserStats200ResponseDataUsers users) {
    this.users = users;
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  public GetUserStats200ResponseDataUsers getUsers() {
    return users;
  }

  public void setUsers(@javax.annotation.Nullable GetUserStats200ResponseDataUsers users) {
    this.users = users;
  }


  public GetUserStats200ResponseData tasks(@javax.annotation.Nullable GetUserStats200ResponseDataTasks tasks) {
    this.tasks = tasks;
    return this;
  }

  /**
   * Get tasks
   * @return tasks
   */
  @javax.annotation.Nullable
  public GetUserStats200ResponseDataTasks getTasks() {
    return tasks;
  }

  public void setTasks(@javax.annotation.Nullable GetUserStats200ResponseDataTasks tasks) {
    this.tasks = tasks;
  }


  public GetUserStats200ResponseData mostActiveUsers(@javax.annotation.Nullable List<GetUserStats200ResponseDataMostActiveUsersInner> mostActiveUsers) {
    this.mostActiveUsers = mostActiveUsers;
    return this;
  }

  public GetUserStats200ResponseData addMostActiveUsersItem(GetUserStats200ResponseDataMostActiveUsersInner mostActiveUsersItem) {
    if (this.mostActiveUsers == null) {
      this.mostActiveUsers = new ArrayList<>();
    }
    this.mostActiveUsers.add(mostActiveUsersItem);
    return this;
  }

  /**
   * Get mostActiveUsers
   * @return mostActiveUsers
   */
  @javax.annotation.Nullable
  public List<GetUserStats200ResponseDataMostActiveUsersInner> getMostActiveUsers() {
    return mostActiveUsers;
  }

  public void setMostActiveUsers(@javax.annotation.Nullable List<GetUserStats200ResponseDataMostActiveUsersInner> mostActiveUsers) {
    this.mostActiveUsers = mostActiveUsers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUserStats200ResponseData getUserStats200ResponseData = (GetUserStats200ResponseData) o;
    return Objects.equals(this.users, getUserStats200ResponseData.users) &&
        Objects.equals(this.tasks, getUserStats200ResponseData.tasks) &&
        Objects.equals(this.mostActiveUsers, getUserStats200ResponseData.mostActiveUsers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(users, tasks, mostActiveUsers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUserStats200ResponseData {\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    mostActiveUsers: ").append(toIndentedString(mostActiveUsers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("users");
    openapiFields.add("tasks");
    openapiFields.add("mostActiveUsers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetUserStats200ResponseData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetUserStats200ResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUserStats200ResponseData is not found in the empty JSON string", GetUserStats200ResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetUserStats200ResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUserStats200ResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `users`
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        GetUserStats200ResponseDataUsers.validateJsonElement(jsonObj.get("users"));
      }
      // validate the optional field `tasks`
      if (jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) {
        GetUserStats200ResponseDataTasks.validateJsonElement(jsonObj.get("tasks"));
      }
      if (jsonObj.get("mostActiveUsers") != null && !jsonObj.get("mostActiveUsers").isJsonNull()) {
        JsonArray jsonArraymostActiveUsers = jsonObj.getAsJsonArray("mostActiveUsers");
        if (jsonArraymostActiveUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mostActiveUsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mostActiveUsers` to be an array in the JSON string but got `%s`", jsonObj.get("mostActiveUsers").toString()));
          }

          // validate the optional field `mostActiveUsers` (array)
          for (int i = 0; i < jsonArraymostActiveUsers.size(); i++) {
            GetUserStats200ResponseDataMostActiveUsersInner.validateJsonElement(jsonArraymostActiveUsers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUserStats200ResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUserStats200ResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUserStats200ResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUserStats200ResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUserStats200ResponseData>() {
           @Override
           public void write(JsonWriter out, GetUserStats200ResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUserStats200ResponseData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetUserStats200ResponseData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetUserStats200ResponseData
   * @throws IOException if the JSON string is invalid with respect to GetUserStats200ResponseData
   */
  public static GetUserStats200ResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUserStats200ResponseData.class);
  }

  /**
   * Convert an instance of GetUserStats200ResponseData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

