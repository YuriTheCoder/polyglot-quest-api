/*
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CompleteTask200Response;
import org.openapitools.client.model.CreateTask201Response;
import org.openapitools.client.model.CreateTaskRequest;
import org.openapitools.client.model.DeleteTask200Response;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetTaskById200Response;
import org.openapitools.client.model.GetTaskStats200Response;
import org.openapitools.client.model.ListTasks200Response;
import org.openapitools.client.model.ListTasksByStatus200Response;
import org.openapitools.client.model.UpdateTask200Response;
import org.openapitools.client.model.UpdateTaskRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for completeTask
     * @param id ID da tarefa (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefa marcada como concluída </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Tarefa já está concluída </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeTaskCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/{id}/complete"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeTaskValidateBeforeCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling completeTask(Async)");
        }

        return completeTaskCall(id, _callback);

    }

    /**
     * Mark a task as complete
     * 
     * @param id ID da tarefa (required)
     * @return CompleteTask200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefa marcada como concluída </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Tarefa já está concluída </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public CompleteTask200Response completeTask(@javax.annotation.Nonnull String id) throws ApiException {
        ApiResponse<CompleteTask200Response> localVarResp = completeTaskWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Mark a task as complete
     * 
     * @param id ID da tarefa (required)
     * @return ApiResponse&lt;CompleteTask200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefa marcada como concluída </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Tarefa já está concluída </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompleteTask200Response> completeTaskWithHttpInfo(@javax.annotation.Nonnull String id) throws ApiException {
        okhttp3.Call localVarCall = completeTaskValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CompleteTask200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark a task as complete (asynchronously)
     * 
     * @param id ID da tarefa (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefa marcada como concluída </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Tarefa já está concluída </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeTaskAsync(@javax.annotation.Nonnull String id, final ApiCallback<CompleteTask200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeTaskValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CompleteTask200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTask
     * @param createTaskRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Tarefa criada com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Dados inválidos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskCall(@javax.annotation.Nonnull CreateTaskRequest createTaskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaskRequest;

        // create path and map variables
        String localVarPath = "/api/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskValidateBeforeCall(@javax.annotation.Nonnull CreateTaskRequest createTaskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTaskRequest' is set
        if (createTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'createTaskRequest' when calling createTask(Async)");
        }

        return createTaskCall(createTaskRequest, _callback);

    }

    /**
     * Create a new task
     * 
     * @param createTaskRequest  (required)
     * @return CreateTask201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Tarefa criada com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Dados inválidos </td><td>  -  </td></tr>
     </table>
     */
    public CreateTask201Response createTask(@javax.annotation.Nonnull CreateTaskRequest createTaskRequest) throws ApiException {
        ApiResponse<CreateTask201Response> localVarResp = createTaskWithHttpInfo(createTaskRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new task
     * 
     * @param createTaskRequest  (required)
     * @return ApiResponse&lt;CreateTask201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Tarefa criada com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Dados inválidos </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTask201Response> createTaskWithHttpInfo(@javax.annotation.Nonnull CreateTaskRequest createTaskRequest) throws ApiException {
        okhttp3.Call localVarCall = createTaskValidateBeforeCall(createTaskRequest, null);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new task (asynchronously)
     * 
     * @param createTaskRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Tarefa criada com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Dados inválidos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskAsync(@javax.annotation.Nonnull CreateTaskRequest createTaskRequest, final ApiCallback<CreateTask201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskValidateBeforeCall(createTaskRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTask
     * @param id ID da tarefa (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefa deletada com sucesso </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaskCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaskValidateBeforeCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTask(Async)");
        }

        return deleteTaskCall(id, _callback);

    }

    /**
     * Delete a task
     * 
     * @param id ID da tarefa (required)
     * @return DeleteTask200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefa deletada com sucesso </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTask200Response deleteTask(@javax.annotation.Nonnull String id) throws ApiException {
        ApiResponse<DeleteTask200Response> localVarResp = deleteTaskWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a task
     * 
     * @param id ID da tarefa (required)
     * @return ApiResponse&lt;DeleteTask200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefa deletada com sucesso </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteTask200Response> deleteTaskWithHttpInfo(@javax.annotation.Nonnull String id) throws ApiException {
        okhttp3.Call localVarCall = deleteTaskValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteTask200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a task (asynchronously)
     * 
     * @param id ID da tarefa (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefa deletada com sucesso </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaskAsync(@javax.annotation.Nonnull String id, final ApiCallback<DeleteTask200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaskValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteTask200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaskById
     * @param id ID da tarefa (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalhes da tarefa </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskByIdCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskByIdValidateBeforeCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTaskById(Async)");
        }

        return getTaskByIdCall(id, _callback);

    }

    /**
     * Get a specific task by ID
     * 
     * @param id ID da tarefa (required)
     * @return GetTaskById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalhes da tarefa </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskById200Response getTaskById(@javax.annotation.Nonnull String id) throws ApiException {
        ApiResponse<GetTaskById200Response> localVarResp = getTaskByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a specific task by ID
     * 
     * @param id ID da tarefa (required)
     * @return ApiResponse&lt;GetTaskById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalhes da tarefa </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTaskById200Response> getTaskByIdWithHttpInfo(@javax.annotation.Nonnull String id) throws ApiException {
        okhttp3.Call localVarCall = getTaskByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetTaskById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific task by ID (asynchronously)
     * 
     * @param id ID da tarefa (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalhes da tarefa </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskByIdAsync(@javax.annotation.Nonnull String id, final ApiCallback<GetTaskById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetTaskById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaskStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estatísticas das tarefas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTaskStatsCall(_callback);

    }

    /**
     * Get task statistics
     * 
     * @return GetTaskStats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estatísticas das tarefas </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskStats200Response getTaskStats() throws ApiException {
        ApiResponse<GetTaskStats200Response> localVarResp = getTaskStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get task statistics
     * 
     * @return ApiResponse&lt;GetTaskStats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estatísticas das tarefas </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTaskStats200Response> getTaskStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTaskStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetTaskStats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estatísticas das tarefas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskStatsAsync(final ApiCallback<GetTaskStats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetTaskStats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTasks
     * @param status Filtrar por status (optional)
     * @param priority Filtrar por prioridade (optional)
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param sortBy Campo para ordenação (optional, default to createdAt)
     * @param sortOrder Ordem da classificação (optional, default to desc)
     * @param search Buscar no título e descrição (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de tarefas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTasksCall(@javax.annotation.Nullable String status, @javax.annotation.Nullable String priority, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (priority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("priority", priority));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTasksValidateBeforeCall(@javax.annotation.Nullable String status, @javax.annotation.Nullable String priority, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String search, final ApiCallback _callback) throws ApiException {
        return listTasksCall(status, priority, page, limit, sortBy, sortOrder, search, _callback);

    }

    /**
     * Get all tasks for the logged-in user
     * 
     * @param status Filtrar por status (optional)
     * @param priority Filtrar por prioridade (optional)
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param sortBy Campo para ordenação (optional, default to createdAt)
     * @param sortOrder Ordem da classificação (optional, default to desc)
     * @param search Buscar no título e descrição (optional)
     * @return ListTasks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de tarefas </td><td>  -  </td></tr>
     </table>
     */
    public ListTasks200Response listTasks(@javax.annotation.Nullable String status, @javax.annotation.Nullable String priority, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String search) throws ApiException {
        ApiResponse<ListTasks200Response> localVarResp = listTasksWithHttpInfo(status, priority, page, limit, sortBy, sortOrder, search);
        return localVarResp.getData();
    }

    /**
     * Get all tasks for the logged-in user
     * 
     * @param status Filtrar por status (optional)
     * @param priority Filtrar por prioridade (optional)
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param sortBy Campo para ordenação (optional, default to createdAt)
     * @param sortOrder Ordem da classificação (optional, default to desc)
     * @param search Buscar no título e descrição (optional)
     * @return ApiResponse&lt;ListTasks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de tarefas </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTasks200Response> listTasksWithHttpInfo(@javax.annotation.Nullable String status, @javax.annotation.Nullable String priority, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String search) throws ApiException {
        okhttp3.Call localVarCall = listTasksValidateBeforeCall(status, priority, page, limit, sortBy, sortOrder, search, null);
        Type localVarReturnType = new TypeToken<ListTasks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all tasks for the logged-in user (asynchronously)
     * 
     * @param status Filtrar por status (optional)
     * @param priority Filtrar por prioridade (optional)
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param sortBy Campo para ordenação (optional, default to createdAt)
     * @param sortOrder Ordem da classificação (optional, default to desc)
     * @param search Buscar no título e descrição (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de tarefas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTasksAsync(@javax.annotation.Nullable String status, @javax.annotation.Nullable String priority, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, @javax.annotation.Nullable String search, final ApiCallback<ListTasks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTasksValidateBeforeCall(status, priority, page, limit, sortBy, sortOrder, search, _callback);
        Type localVarReturnType = new TypeToken<ListTasks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTasksByStatus
     * @param status Status das tarefas (required)
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefas filtradas por status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Status inválido </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTasksByStatusCall(@javax.annotation.Nonnull String status, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/status/{status}"
            .replace("{" + "status" + "}", localVarApiClient.escapeString(status.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTasksByStatusValidateBeforeCall(@javax.annotation.Nonnull String status, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling listTasksByStatus(Async)");
        }

        return listTasksByStatusCall(status, page, limit, _callback);

    }

    /**
     * Get tasks by status
     * 
     * @param status Status das tarefas (required)
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @return ListTasksByStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefas filtradas por status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Status inválido </td><td>  -  </td></tr>
     </table>
     */
    public ListTasksByStatus200Response listTasksByStatus(@javax.annotation.Nonnull String status, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<ListTasksByStatus200Response> localVarResp = listTasksByStatusWithHttpInfo(status, page, limit);
        return localVarResp.getData();
    }

    /**
     * Get tasks by status
     * 
     * @param status Status das tarefas (required)
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @return ApiResponse&lt;ListTasksByStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefas filtradas por status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Status inválido </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTasksByStatus200Response> listTasksByStatusWithHttpInfo(@javax.annotation.Nonnull String status, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listTasksByStatusValidateBeforeCall(status, page, limit, null);
        Type localVarReturnType = new TypeToken<ListTasksByStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tasks by status (asynchronously)
     * 
     * @param status Status das tarefas (required)
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefas filtradas por status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Status inválido </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTasksByStatusAsync(@javax.annotation.Nonnull String status, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, final ApiCallback<ListTasksByStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTasksByStatusValidateBeforeCall(status, page, limit, _callback);
        Type localVarReturnType = new TypeToken<ListTasksByStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTask
     * @param id ID da tarefa (required)
     * @param updateTaskRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefa atualizada com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Dados inválidos </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull UpdateTaskRequest updateTaskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTaskRequest;

        // create path and map variables
        String localVarPath = "/api/tasks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull UpdateTaskRequest updateTaskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTask(Async)");
        }

        // verify the required parameter 'updateTaskRequest' is set
        if (updateTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTaskRequest' when calling updateTask(Async)");
        }

        return updateTaskCall(id, updateTaskRequest, _callback);

    }

    /**
     * Update a task
     * 
     * @param id ID da tarefa (required)
     * @param updateTaskRequest  (required)
     * @return UpdateTask200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefa atualizada com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Dados inválidos </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTask200Response updateTask(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull UpdateTaskRequest updateTaskRequest) throws ApiException {
        ApiResponse<UpdateTask200Response> localVarResp = updateTaskWithHttpInfo(id, updateTaskRequest);
        return localVarResp.getData();
    }

    /**
     * Update a task
     * 
     * @param id ID da tarefa (required)
     * @param updateTaskRequest  (required)
     * @return ApiResponse&lt;UpdateTask200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefa atualizada com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Dados inválidos </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTask200Response> updateTaskWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull UpdateTaskRequest updateTaskRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTaskValidateBeforeCall(id, updateTaskRequest, null);
        Type localVarReturnType = new TypeToken<UpdateTask200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a task (asynchronously)
     * 
     * @param id ID da tarefa (required)
     * @param updateTaskRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tarefa atualizada com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Dados inválidos </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Tarefa não encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull UpdateTaskRequest updateTaskRequest, final ApiCallback<UpdateTask200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskValidateBeforeCall(id, updateTaskRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateTask200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
