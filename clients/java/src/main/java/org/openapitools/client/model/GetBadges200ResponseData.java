/*
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetBadges200ResponseDataEarnedInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBadges200ResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-14T22:52:12.042322500-03:00[America/Sao_Paulo]", comments = "Generator version: 7.13.0")
public class GetBadges200ResponseData {
  public static final String SERIALIZED_NAME_EARNED = "earned";
  @SerializedName(SERIALIZED_NAME_EARNED)
  @javax.annotation.Nullable
  private List<GetBadges200ResponseDataEarnedInner> earned = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  @javax.annotation.Nullable
  private List<Object> available = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  @javax.annotation.Nullable
  private BigDecimal total;

  public static final String SERIALIZED_NAME_EARNED_COUNT = "earnedCount";
  @SerializedName(SERIALIZED_NAME_EARNED_COUNT)
  @javax.annotation.Nullable
  private BigDecimal earnedCount;

  public GetBadges200ResponseData() {
  }

  public GetBadges200ResponseData earned(@javax.annotation.Nullable List<GetBadges200ResponseDataEarnedInner> earned) {
    this.earned = earned;
    return this;
  }

  public GetBadges200ResponseData addEarnedItem(GetBadges200ResponseDataEarnedInner earnedItem) {
    if (this.earned == null) {
      this.earned = new ArrayList<>();
    }
    this.earned.add(earnedItem);
    return this;
  }

  /**
   * Get earned
   * @return earned
   */
  @javax.annotation.Nullable
  public List<GetBadges200ResponseDataEarnedInner> getEarned() {
    return earned;
  }

  public void setEarned(@javax.annotation.Nullable List<GetBadges200ResponseDataEarnedInner> earned) {
    this.earned = earned;
  }


  public GetBadges200ResponseData available(@javax.annotation.Nullable List<Object> available) {
    this.available = available;
    return this;
  }

  public GetBadges200ResponseData addAvailableItem(Object availableItem) {
    if (this.available == null) {
      this.available = new ArrayList<>();
    }
    this.available.add(availableItem);
    return this;
  }

  /**
   * Get available
   * @return available
   */
  @javax.annotation.Nullable
  public List<Object> getAvailable() {
    return available;
  }

  public void setAvailable(@javax.annotation.Nullable List<Object> available) {
    this.available = available;
  }


  public GetBadges200ResponseData total(@javax.annotation.Nullable BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(@javax.annotation.Nullable BigDecimal total) {
    this.total = total;
  }


  public GetBadges200ResponseData earnedCount(@javax.annotation.Nullable BigDecimal earnedCount) {
    this.earnedCount = earnedCount;
    return this;
  }

  /**
   * Get earnedCount
   * @return earnedCount
   */
  @javax.annotation.Nullable
  public BigDecimal getEarnedCount() {
    return earnedCount;
  }

  public void setEarnedCount(@javax.annotation.Nullable BigDecimal earnedCount) {
    this.earnedCount = earnedCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBadges200ResponseData getBadges200ResponseData = (GetBadges200ResponseData) o;
    return Objects.equals(this.earned, getBadges200ResponseData.earned) &&
        Objects.equals(this.available, getBadges200ResponseData.available) &&
        Objects.equals(this.total, getBadges200ResponseData.total) &&
        Objects.equals(this.earnedCount, getBadges200ResponseData.earnedCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(earned, available, total, earnedCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBadges200ResponseData {\n");
    sb.append("    earned: ").append(toIndentedString(earned)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    earnedCount: ").append(toIndentedString(earnedCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("earned");
    openapiFields.add("available");
    openapiFields.add("total");
    openapiFields.add("earnedCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBadges200ResponseData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBadges200ResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBadges200ResponseData is not found in the empty JSON string", GetBadges200ResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBadges200ResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBadges200ResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("earned") != null && !jsonObj.get("earned").isJsonNull()) {
        JsonArray jsonArrayearned = jsonObj.getAsJsonArray("earned");
        if (jsonArrayearned != null) {
          // ensure the json data is an array
          if (!jsonObj.get("earned").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `earned` to be an array in the JSON string but got `%s`", jsonObj.get("earned").toString()));
          }

          // validate the optional field `earned` (array)
          for (int i = 0; i < jsonArrayearned.size(); i++) {
            GetBadges200ResponseDataEarnedInner.validateJsonElement(jsonArrayearned.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("available") != null && !jsonObj.get("available").isJsonNull() && !jsonObj.get("available").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available` to be an array in the JSON string but got `%s`", jsonObj.get("available").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBadges200ResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBadges200ResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBadges200ResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBadges200ResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBadges200ResponseData>() {
           @Override
           public void write(JsonWriter out, GetBadges200ResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBadges200ResponseData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBadges200ResponseData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBadges200ResponseData
   * @throws IOException if the JSON string is invalid with respect to GetBadges200ResponseData
   */
  public static GetBadges200ResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBadges200ResponseData.class);
  }

  /**
   * Convert an instance of GetBadges200ResponseData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

