/*
 * Gamified Task Management API
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeleteUser200Response;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetAllUsers200Response;
import org.openapitools.client.model.GetUserById200Response;
import org.openapitools.client.model.GetUserStats200Response;
import org.openapitools.client.model.ToggleUserStatus200Response;
import org.openapitools.client.model.UpdateUser200Response;
import org.openapitools.client.model.UpdateUserRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteUser
     * @param id ID do usuário (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário deletado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Não é possível deletar própria conta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUser(Async)");
        }

        return deleteUserCall(id, _callback);

    }

    /**
     * Deletar usuário (Admin only)
     * 
     * @param id ID do usuário (required)
     * @return DeleteUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário deletado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Não é possível deletar própria conta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUser200Response deleteUser(@javax.annotation.Nonnull String id) throws ApiException {
        ApiResponse<DeleteUser200Response> localVarResp = deleteUserWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Deletar usuário (Admin only)
     * 
     * @param id ID do usuário (required)
     * @return ApiResponse&lt;DeleteUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário deletado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Não é possível deletar própria conta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteUser200Response> deleteUserWithHttpInfo(@javax.annotation.Nonnull String id) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletar usuário (Admin only) (asynchronously)
     * 
     * @param id ID do usuário (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário deletado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Não é possível deletar própria conta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(@javax.annotation.Nonnull String id, final ApiCallback<DeleteUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllUsers
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param search Buscar por nome ou email (optional)
     * @param role Filtrar por papel (optional)
     * @param isActive Filtrar por status ativo (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de usuários </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllUsersCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String search, @javax.annotation.Nullable String role, @javax.annotation.Nullable Boolean isActive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUsersValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String search, @javax.annotation.Nullable String role, @javax.annotation.Nullable Boolean isActive, final ApiCallback _callback) throws ApiException {
        return getAllUsersCall(page, limit, search, role, isActive, _callback);

    }

    /**
     * Listar todos os usuários (Admin only)
     * 
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param search Buscar por nome ou email (optional)
     * @param role Filtrar por papel (optional)
     * @param isActive Filtrar por status ativo (optional)
     * @return GetAllUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de usuários </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUsers200Response getAllUsers(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String search, @javax.annotation.Nullable String role, @javax.annotation.Nullable Boolean isActive) throws ApiException {
        ApiResponse<GetAllUsers200Response> localVarResp = getAllUsersWithHttpInfo(page, limit, search, role, isActive);
        return localVarResp.getData();
    }

    /**
     * Listar todos os usuários (Admin only)
     * 
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param search Buscar por nome ou email (optional)
     * @param role Filtrar por papel (optional)
     * @param isActive Filtrar por status ativo (optional)
     * @return ApiResponse&lt;GetAllUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de usuários </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllUsers200Response> getAllUsersWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String search, @javax.annotation.Nullable String role, @javax.annotation.Nullable Boolean isActive) throws ApiException {
        okhttp3.Call localVarCall = getAllUsersValidateBeforeCall(page, limit, search, role, isActive, null);
        Type localVarReturnType = new TypeToken<GetAllUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listar todos os usuários (Admin only) (asynchronously)
     * 
     * @param page Número da página (optional, default to 1)
     * @param limit Itens por página (optional, default to 10)
     * @param search Buscar por nome ou email (optional)
     * @param role Filtrar por papel (optional)
     * @param isActive Filtrar por status ativo (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de usuários </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllUsersAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String search, @javax.annotation.Nullable String role, @javax.annotation.Nullable Boolean isActive, final ApiCallback<GetAllUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUsersValidateBeforeCall(page, limit, search, role, isActive, _callback);
        Type localVarReturnType = new TypeToken<GetAllUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserById
     * @param id ID do usuário (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalhes do usuário </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserByIdCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByIdValidateBeforeCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserById(Async)");
        }

        return getUserByIdCall(id, _callback);

    }

    /**
     * Obter usuário específico (Admin only)
     * 
     * @param id ID do usuário (required)
     * @return GetUserById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalhes do usuário </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public GetUserById200Response getUserById(@javax.annotation.Nonnull String id) throws ApiException {
        ApiResponse<GetUserById200Response> localVarResp = getUserByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Obter usuário específico (Admin only)
     * 
     * @param id ID do usuário (required)
     * @return ApiResponse&lt;GetUserById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalhes do usuário </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserById200Response> getUserByIdWithHttpInfo(@javax.annotation.Nonnull String id) throws ApiException {
        okhttp3.Call localVarCall = getUserByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetUserById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obter usuário específico (Admin only) (asynchronously)
     * 
     * @param id ID do usuário (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detalhes do usuário </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserByIdAsync(@javax.annotation.Nonnull String id, final ApiCallback<GetUserById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetUserById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estatísticas do sistema </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/users/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserStatsCall(_callback);

    }

    /**
     * Obter estatísticas gerais do sistema (Admin only)
     * 
     * @return GetUserStats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estatísticas do sistema </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
     </table>
     */
    public GetUserStats200Response getUserStats() throws ApiException {
        ApiResponse<GetUserStats200Response> localVarResp = getUserStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obter estatísticas gerais do sistema (Admin only)
     * 
     * @return ApiResponse&lt;GetUserStats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estatísticas do sistema </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserStats200Response> getUserStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetUserStats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obter estatísticas gerais do sistema (Admin only) (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Estatísticas do sistema </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserStatsAsync(final ApiCallback<GetUserStats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetUserStats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toggleUserStatus
     * @param id ID do usuário (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status do usuário alterado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Não é possível desativar própria conta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toggleUserStatusCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/users/{id}/toggle-status"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toggleUserStatusValidateBeforeCall(@javax.annotation.Nonnull String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling toggleUserStatus(Async)");
        }

        return toggleUserStatusCall(id, _callback);

    }

    /**
     * Ativar/Desativar usuário (Admin only)
     * 
     * @param id ID do usuário (required)
     * @return ToggleUserStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status do usuário alterado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Não é possível desativar própria conta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ToggleUserStatus200Response toggleUserStatus(@javax.annotation.Nonnull String id) throws ApiException {
        ApiResponse<ToggleUserStatus200Response> localVarResp = toggleUserStatusWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Ativar/Desativar usuário (Admin only)
     * 
     * @param id ID do usuário (required)
     * @return ApiResponse&lt;ToggleUserStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status do usuário alterado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Não é possível desativar própria conta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToggleUserStatus200Response> toggleUserStatusWithHttpInfo(@javax.annotation.Nonnull String id) throws ApiException {
        okhttp3.Call localVarCall = toggleUserStatusValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ToggleUserStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ativar/Desativar usuário (Admin only) (asynchronously)
     * 
     * @param id ID do usuário (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status do usuário alterado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Não é possível desativar própria conta </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toggleUserStatusAsync(@javax.annotation.Nonnull String id, final ApiCallback<ToggleUserStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toggleUserStatusValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ToggleUserStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param id ID do usuário (required)
     * @param updateUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário atualizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email já está em uso </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull UpdateUserRequest updateUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserRequest;

        // create path and map variables
        String localVarPath = "/api/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull UpdateUserRequest updateUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUser(Async)");
        }

        // verify the required parameter 'updateUserRequest' is set
        if (updateUserRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserRequest' when calling updateUser(Async)");
        }

        return updateUserCall(id, updateUserRequest, _callback);

    }

    /**
     * Atualizar usuário (Admin only)
     * 
     * @param id ID do usuário (required)
     * @param updateUserRequest  (required)
     * @return UpdateUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário atualizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email já está em uso </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUser200Response updateUser(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull UpdateUserRequest updateUserRequest) throws ApiException {
        ApiResponse<UpdateUser200Response> localVarResp = updateUserWithHttpInfo(id, updateUserRequest);
        return localVarResp.getData();
    }

    /**
     * Atualizar usuário (Admin only)
     * 
     * @param id ID do usuário (required)
     * @param updateUserRequest  (required)
     * @return ApiResponse&lt;UpdateUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário atualizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email já está em uso </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateUser200Response> updateUserWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull UpdateUserRequest updateUserRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(id, updateUserRequest, null);
        Type localVarReturnType = new TypeToken<UpdateUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Atualizar usuário (Admin only) (asynchronously)
     * 
     * @param id ID do usuário (required)
     * @param updateUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usuário atualizado com sucesso </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Email já está em uso </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Acesso negado - privilégios de admin necessários </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Usuário não encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull UpdateUserRequest updateUserRequest, final ApiCallback<UpdateUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(id, updateUserRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
