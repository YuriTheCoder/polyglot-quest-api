/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using GamifiedTasks.Client.Api;
using GamifiedTasks.Client.Model;

namespace GamifiedTasks.Client.Client
{
    /// <summary>
    /// Provides hosting configuration for GamifiedTasks.Client
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new ChangeUserPassword200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ChangeUserPasswordRequestJsonConverter());
            _jsonOptions.Converters.Add(new CompleteQuest200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new CompleteQuest200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new CompleteQuest200ResponseDataGamificationJsonConverter());
            _jsonOptions.Converters.Add(new CompleteQuest200ResponseDataTaskJsonConverter());
            _jsonOptions.Converters.Add(new CompleteQuestRequestJsonConverter());
            _jsonOptions.Converters.Add(new CompleteTask200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new CreateStoryFromTasks201ResponseJsonConverter());
            _jsonOptions.Converters.Add(new CreateStoryFromTasks201ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new CreateStoryFromTasks201ResponseDataQuestsInnerJsonConverter());
            _jsonOptions.Converters.Add(new CreateStoryFromTasks201ResponseDataStoryJsonConverter());
            _jsonOptions.Converters.Add(new CreateStoryFromTasksRequestJsonConverter());
            _jsonOptions.Converters.Add(new CreateStoryFromTasksRequestUserPreferencesJsonConverter());
            _jsonOptions.Converters.Add(new CreateTask201ResponseJsonConverter());
            _jsonOptions.Converters.Add(new CreateTask201ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new CreateTaskRequestJsonConverter());
            _jsonOptions.Converters.Add(new DeleteTask200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new DeleteUser200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ErrorJsonConverter());
            _jsonOptions.Converters.Add(new GetAllUsers200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new GetAllUsers200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new GetAllUsers200ResponseDataPaginationJsonConverter());
            _jsonOptions.Converters.Add(new GetBadges200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new GetBadges200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new GetBadges200ResponseDataEarnedInnerJsonConverter());
            _jsonOptions.Converters.Add(new GetGamificationDashboard200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new GetGamificationDashboard200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new GetGamificationDashboard200ResponseDataStatsJsonConverter());
            _jsonOptions.Converters.Add(new GetGamificationDashboard200ResponseDataUserJsonConverter());
            _jsonOptions.Converters.Add(new GetGlobalStats200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new GetGlobalStats200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new GetGlobalStats200ResponseDataGamificationJsonConverter());
            _jsonOptions.Converters.Add(new GetGlobalStats200ResponseDataStoriesJsonConverter());
            _jsonOptions.Converters.Add(new GetGlobalStats200ResponseDataUsersJsonConverter());
            _jsonOptions.Converters.Add(new GetLeaderboard200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new GetLeaderboard200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new GetLeaderboard200ResponseDataLeaderboardInnerJsonConverter());
            _jsonOptions.Converters.Add(new GetStoryById200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new GetStoryById200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new GetTaskById200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new GetTaskStats200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new GetTaskStats200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new GetTaskStats200ResponseDataStatsJsonConverter());
            _jsonOptions.Converters.Add(new GetUserById200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new GetUserById200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new GetUserById200ResponseDataTaskStatsJsonConverter());
            _jsonOptions.Converters.Add(new GetUserProfile200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new GetUserProfile200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new GetUserStats200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new GetUserStats200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new GetUserStats200ResponseDataMostActiveUsersInnerJsonConverter());
            _jsonOptions.Converters.Add(new GetUserStats200ResponseDataTasksJsonConverter());
            _jsonOptions.Converters.Add(new GetUserStats200ResponseDataUsersJsonConverter());
            _jsonOptions.Converters.Add(new ListStories200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ListStories200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new ListTasks200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ListTasks200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new ListTasks200ResponseDataPaginationJsonConverter());
            _jsonOptions.Converters.Add(new ListTasksByStatus200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ListTasksByStatus200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new ListTasksByStatus200ResponseDataPaginationJsonConverter());
            _jsonOptions.Converters.Add(new LoginUser200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new LoginUserRequestJsonConverter());
            _jsonOptions.Converters.Add(new LogoutUser200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ProcessShareWebhook200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ProcessShareWebhookRequestJsonConverter());
            _jsonOptions.Converters.Add(new RegisterUser201ResponseJsonConverter());
            _jsonOptions.Converters.Add(new RegisterUser201ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new RegisterUserRequestJsonConverter());
            _jsonOptions.Converters.Add(new ShareMilestone200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ShareMilestoneRequestJsonConverter());
            _jsonOptions.Converters.Add(new ShareMilestoneRequestDataJsonConverter());
            _jsonOptions.Converters.Add(new StoryJsonConverter());
            _jsonOptions.Converters.Add(new TaskJsonConverter());
            _jsonOptions.Converters.Add(new ToggleUserStatus200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new ToggleUserStatus200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new ToggleUserStatus200ResponseDataUserJsonConverter());
            _jsonOptions.Converters.Add(new UpdateGamificationPreferences200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new UpdateGamificationPreferences200ResponseDataJsonConverter());
            _jsonOptions.Converters.Add(new UpdateGamificationPreferencesRequestJsonConverter());
            _jsonOptions.Converters.Add(new UpdateTask200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new UpdateTaskRequestJsonConverter());
            _jsonOptions.Converters.Add(new UpdateUser200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new UpdateUserProfile200ResponseJsonConverter());
            _jsonOptions.Converters.Add(new UpdateUserProfileRequestJsonConverter());
            _jsonOptions.Converters.Add(new UpdateUserRequestJsonConverter());
            _jsonOptions.Converters.Add(new UserJsonConverter());
            _jsonOptions.Converters.Add(new UserGamificationJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<AuthApiEvents>();
            _services.AddTransient<IAuthApi, AuthApi>();
            _services.AddSingleton<GamificationApiEvents>();
            _services.AddTransient<IGamificationApi, GamificationApi>();
            _services.AddSingleton<TasksApiEvents>();
            _services.AddTransient<ITasksApi, TasksApi>();
            _services.AddSingleton<UsersApiEvents>();
            _services.AddTransient<IUsersApi, UsersApi>();
            _services.AddSingleton<WebhooksApiEvents>();
            _services.AddTransient<IWebhooksApi, WebhooksApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IAuthApi, AuthApi>(client));
            builders.Add(_services.AddHttpClient<IGamificationApi, GamificationApi>(client));
            builders.Add(_services.AddHttpClient<ITasksApi, TasksApi>(client));
            builders.Add(_services.AddHttpClient<IUsersApi, UsersApi>(client));
            builders.Add(_services.AddHttpClient<IWebhooksApi, WebhooksApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
