// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// ListTasksByStatus200ResponseDataPagination
    /// </summary>
    public partial class ListTasksByStatus200ResponseDataPagination : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListTasksByStatus200ResponseDataPagination" /> class.
        /// </summary>
        /// <param name="current">current</param>
        /// <param name="pages">pages</param>
        /// <param name="total">total</param>
        /// <param name="limit">limit</param>
        [JsonConstructor]
        public ListTasksByStatus200ResponseDataPagination(Option<int?> current = default, Option<int?> pages = default, Option<int?> total = default, Option<int?> limit = default)
        {
            CurrentOption = current;
            PagesOption = pages;
            TotalOption = total;
            LimitOption = limit;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Current
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [JsonPropertyName("current")]
        public int? Current { get { return this.CurrentOption; } set { this.CurrentOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PagesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pages
        /// </summary>
        [JsonPropertyName("pages")]
        public int? Pages { get { return this.PagesOption; } set { this.PagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [JsonPropertyName("total")]
        public int? Total { get { return this.TotalOption; } set { this.TotalOption = new(value); } }

        /// <summary>
        /// Used to track the state of Limit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LimitOption { get; private set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [JsonPropertyName("limit")]
        public int? Limit { get { return this.LimitOption; } set { this.LimitOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListTasksByStatus200ResponseDataPagination {\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ListTasksByStatus200ResponseDataPagination" />
    /// </summary>
    public class ListTasksByStatus200ResponseDataPaginationJsonConverter : JsonConverter<ListTasksByStatus200ResponseDataPagination>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListTasksByStatus200ResponseDataPagination" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListTasksByStatus200ResponseDataPagination Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> current = default;
            Option<int?> pages = default;
            Option<int?> total = default;
            Option<int?> limit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "current":
                            current = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pages":
                            pages = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "limit":
                            limit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (current.IsSet && current.Value == null)
                throw new ArgumentNullException(nameof(current), "Property is not nullable for class ListTasksByStatus200ResponseDataPagination.");

            if (pages.IsSet && pages.Value == null)
                throw new ArgumentNullException(nameof(pages), "Property is not nullable for class ListTasksByStatus200ResponseDataPagination.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class ListTasksByStatus200ResponseDataPagination.");

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit), "Property is not nullable for class ListTasksByStatus200ResponseDataPagination.");

            return new ListTasksByStatus200ResponseDataPagination(current, pages, total, limit);
        }

        /// <summary>
        /// Serializes a <see cref="ListTasksByStatus200ResponseDataPagination" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listTasksByStatus200ResponseDataPagination"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListTasksByStatus200ResponseDataPagination listTasksByStatus200ResponseDataPagination, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, listTasksByStatus200ResponseDataPagination, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ListTasksByStatus200ResponseDataPagination" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listTasksByStatus200ResponseDataPagination"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListTasksByStatus200ResponseDataPagination listTasksByStatus200ResponseDataPagination, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listTasksByStatus200ResponseDataPagination.CurrentOption.IsSet)
                writer.WriteNumber("current", listTasksByStatus200ResponseDataPagination.CurrentOption.Value!.Value);

            if (listTasksByStatus200ResponseDataPagination.PagesOption.IsSet)
                writer.WriteNumber("pages", listTasksByStatus200ResponseDataPagination.PagesOption.Value!.Value);

            if (listTasksByStatus200ResponseDataPagination.TotalOption.IsSet)
                writer.WriteNumber("total", listTasksByStatus200ResponseDataPagination.TotalOption.Value!.Value);

            if (listTasksByStatus200ResponseDataPagination.LimitOption.IsSet)
                writer.WriteNumber("limit", listTasksByStatus200ResponseDataPagination.LimitOption.Value!.Value);
        }
    }
}
