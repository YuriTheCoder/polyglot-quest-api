// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// GetGlobalStats200ResponseDataGamification
    /// </summary>
    public partial class GetGlobalStats200ResponseDataGamification : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetGlobalStats200ResponseDataGamification" /> class.
        /// </summary>
        /// <param name="totalXP">totalXP</param>
        /// <param name="totalTasksCompleted">totalTasksCompleted</param>
        /// <param name="totalBadgesEarned">totalBadgesEarned</param>
        /// <param name="longestStreak">longestStreak</param>
        [JsonConstructor]
        public GetGlobalStats200ResponseDataGamification(Option<decimal?> totalXP = default, Option<decimal?> totalTasksCompleted = default, Option<decimal?> totalBadgesEarned = default, Option<decimal?> longestStreak = default)
        {
            TotalXPOption = totalXP;
            TotalTasksCompletedOption = totalTasksCompleted;
            TotalBadgesEarnedOption = totalBadgesEarned;
            LongestStreakOption = longestStreak;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TotalXP
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalXPOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalXP
        /// </summary>
        [JsonPropertyName("totalXP")]
        public decimal? TotalXP { get { return this.TotalXPOption; } set { this.TotalXPOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalTasksCompleted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalTasksCompletedOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalTasksCompleted
        /// </summary>
        [JsonPropertyName("totalTasksCompleted")]
        public decimal? TotalTasksCompleted { get { return this.TotalTasksCompletedOption; } set { this.TotalTasksCompletedOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalBadgesEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalBadgesEarnedOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalBadgesEarned
        /// </summary>
        [JsonPropertyName("totalBadgesEarned")]
        public decimal? TotalBadgesEarned { get { return this.TotalBadgesEarnedOption; } set { this.TotalBadgesEarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of LongestStreak
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LongestStreakOption { get; private set; }

        /// <summary>
        /// Gets or Sets LongestStreak
        /// </summary>
        [JsonPropertyName("longestStreak")]
        public decimal? LongestStreak { get { return this.LongestStreakOption; } set { this.LongestStreakOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetGlobalStats200ResponseDataGamification {\n");
            sb.Append("  TotalXP: ").Append(TotalXP).Append("\n");
            sb.Append("  TotalTasksCompleted: ").Append(TotalTasksCompleted).Append("\n");
            sb.Append("  TotalBadgesEarned: ").Append(TotalBadgesEarned).Append("\n");
            sb.Append("  LongestStreak: ").Append(LongestStreak).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetGlobalStats200ResponseDataGamification" />
    /// </summary>
    public class GetGlobalStats200ResponseDataGamificationJsonConverter : JsonConverter<GetGlobalStats200ResponseDataGamification>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetGlobalStats200ResponseDataGamification" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetGlobalStats200ResponseDataGamification Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> totalXP = default;
            Option<decimal?> totalTasksCompleted = default;
            Option<decimal?> totalBadgesEarned = default;
            Option<decimal?> longestStreak = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "totalXP":
                            totalXP = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "totalTasksCompleted":
                            totalTasksCompleted = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "totalBadgesEarned":
                            totalBadgesEarned = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "longestStreak":
                            longestStreak = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (totalXP.IsSet && totalXP.Value == null)
                throw new ArgumentNullException(nameof(totalXP), "Property is not nullable for class GetGlobalStats200ResponseDataGamification.");

            if (totalTasksCompleted.IsSet && totalTasksCompleted.Value == null)
                throw new ArgumentNullException(nameof(totalTasksCompleted), "Property is not nullable for class GetGlobalStats200ResponseDataGamification.");

            if (totalBadgesEarned.IsSet && totalBadgesEarned.Value == null)
                throw new ArgumentNullException(nameof(totalBadgesEarned), "Property is not nullable for class GetGlobalStats200ResponseDataGamification.");

            if (longestStreak.IsSet && longestStreak.Value == null)
                throw new ArgumentNullException(nameof(longestStreak), "Property is not nullable for class GetGlobalStats200ResponseDataGamification.");

            return new GetGlobalStats200ResponseDataGamification(totalXP, totalTasksCompleted, totalBadgesEarned, longestStreak);
        }

        /// <summary>
        /// Serializes a <see cref="GetGlobalStats200ResponseDataGamification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getGlobalStats200ResponseDataGamification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetGlobalStats200ResponseDataGamification getGlobalStats200ResponseDataGamification, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getGlobalStats200ResponseDataGamification, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetGlobalStats200ResponseDataGamification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getGlobalStats200ResponseDataGamification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetGlobalStats200ResponseDataGamification getGlobalStats200ResponseDataGamification, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getGlobalStats200ResponseDataGamification.TotalXPOption.IsSet)
                writer.WriteNumber("totalXP", getGlobalStats200ResponseDataGamification.TotalXPOption.Value!.Value);

            if (getGlobalStats200ResponseDataGamification.TotalTasksCompletedOption.IsSet)
                writer.WriteNumber("totalTasksCompleted", getGlobalStats200ResponseDataGamification.TotalTasksCompletedOption.Value!.Value);

            if (getGlobalStats200ResponseDataGamification.TotalBadgesEarnedOption.IsSet)
                writer.WriteNumber("totalBadgesEarned", getGlobalStats200ResponseDataGamification.TotalBadgesEarnedOption.Value!.Value);

            if (getGlobalStats200ResponseDataGamification.LongestStreakOption.IsSet)
                writer.WriteNumber("longestStreak", getGlobalStats200ResponseDataGamification.LongestStreakOption.Value!.Value);
        }
    }
}
