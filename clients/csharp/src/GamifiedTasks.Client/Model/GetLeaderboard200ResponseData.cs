// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// GetLeaderboard200ResponseData
    /// </summary>
    public partial class GetLeaderboard200ResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetLeaderboard200ResponseData" /> class.
        /// </summary>
        /// <param name="leaderboard">leaderboard</param>
        /// <param name="period">period</param>
        /// <param name="total">total</param>
        [JsonConstructor]
        public GetLeaderboard200ResponseData(Option<List<GetLeaderboard200ResponseDataLeaderboardInner>?> leaderboard = default, Option<string?> period = default, Option<decimal?> total = default)
        {
            LeaderboardOption = leaderboard;
            PeriodOption = period;
            TotalOption = total;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Leaderboard
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetLeaderboard200ResponseDataLeaderboardInner>?> LeaderboardOption { get; private set; }

        /// <summary>
        /// Gets or Sets Leaderboard
        /// </summary>
        [JsonPropertyName("leaderboard")]
        public List<GetLeaderboard200ResponseDataLeaderboardInner>? Leaderboard { get { return this.LeaderboardOption; } set { this.LeaderboardOption = new(value); } }

        /// <summary>
        /// Used to track the state of Period
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PeriodOption { get; private set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        /* <example>all</example> */
        [JsonPropertyName("period")]
        public string? Period { get { return this.PeriodOption; } set { this.PeriodOption = new(value); } }

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        /* <example>10</example> */
        [JsonPropertyName("total")]
        public decimal? Total { get { return this.TotalOption; } set { this.TotalOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetLeaderboard200ResponseData {\n");
            sb.Append("  Leaderboard: ").Append(Leaderboard).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetLeaderboard200ResponseData" />
    /// </summary>
    public class GetLeaderboard200ResponseDataJsonConverter : JsonConverter<GetLeaderboard200ResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetLeaderboard200ResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetLeaderboard200ResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<GetLeaderboard200ResponseDataLeaderboardInner>?> leaderboard = default;
            Option<string?> period = default;
            Option<decimal?> total = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "leaderboard":
                            leaderboard = new Option<List<GetLeaderboard200ResponseDataLeaderboardInner>?>(JsonSerializer.Deserialize<List<GetLeaderboard200ResponseDataLeaderboardInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "period":
                            period = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "total":
                            total = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (leaderboard.IsSet && leaderboard.Value == null)
                throw new ArgumentNullException(nameof(leaderboard), "Property is not nullable for class GetLeaderboard200ResponseData.");

            if (period.IsSet && period.Value == null)
                throw new ArgumentNullException(nameof(period), "Property is not nullable for class GetLeaderboard200ResponseData.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class GetLeaderboard200ResponseData.");

            return new GetLeaderboard200ResponseData(leaderboard, period, total);
        }

        /// <summary>
        /// Serializes a <see cref="GetLeaderboard200ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getLeaderboard200ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetLeaderboard200ResponseData getLeaderboard200ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getLeaderboard200ResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetLeaderboard200ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getLeaderboard200ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetLeaderboard200ResponseData getLeaderboard200ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getLeaderboard200ResponseData.LeaderboardOption.IsSet && getLeaderboard200ResponseData.Leaderboard == null)
                throw new ArgumentNullException(nameof(getLeaderboard200ResponseData.Leaderboard), "Property is required for class GetLeaderboard200ResponseData.");

            if (getLeaderboard200ResponseData.PeriodOption.IsSet && getLeaderboard200ResponseData.Period == null)
                throw new ArgumentNullException(nameof(getLeaderboard200ResponseData.Period), "Property is required for class GetLeaderboard200ResponseData.");

            if (getLeaderboard200ResponseData.LeaderboardOption.IsSet)
            {
                writer.WritePropertyName("leaderboard");
                JsonSerializer.Serialize(writer, getLeaderboard200ResponseData.Leaderboard, jsonSerializerOptions);
            }
            if (getLeaderboard200ResponseData.PeriodOption.IsSet)
                writer.WriteString("period", getLeaderboard200ResponseData.Period);

            if (getLeaderboard200ResponseData.TotalOption.IsSet)
                writer.WriteNumber("total", getLeaderboard200ResponseData.TotalOption.Value!.Value);
        }
    }
}
