// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// ShareMilestoneRequestData
    /// </summary>
    public partial class ShareMilestoneRequestData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareMilestoneRequestData" /> class.
        /// </summary>
        /// <param name="level">level</param>
        /// <param name="badge">badge</param>
        /// <param name="streak">streak</param>
        /// <param name="message">message</param>
        [JsonConstructor]
        public ShareMilestoneRequestData(Option<decimal?> level = default, Option<Object?> badge = default, Option<decimal?> streak = default, Option<string?> message = default)
        {
            LevelOption = level;
            BadgeOption = badge;
            StreakOption = streak;
            MessageOption = message;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Level
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [JsonPropertyName("level")]
        public decimal? Level { get { return this.LevelOption; } set { this.LevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Badge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> BadgeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Badge
        /// </summary>
        [JsonPropertyName("badge")]
        public Object? Badge { get { return this.BadgeOption; } set { this.BadgeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Streak
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StreakOption { get; private set; }

        /// <summary>
        /// Gets or Sets Streak
        /// </summary>
        [JsonPropertyName("streak")]
        public decimal? Streak { get { return this.StreakOption; } set { this.StreakOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShareMilestoneRequestData {\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Badge: ").Append(Badge).Append("\n");
            sb.Append("  Streak: ").Append(Streak).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShareMilestoneRequestData" />
    /// </summary>
    public class ShareMilestoneRequestDataJsonConverter : JsonConverter<ShareMilestoneRequestData>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShareMilestoneRequestData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShareMilestoneRequestData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> level = default;
            Option<Object?> badge = default;
            Option<decimal?> streak = default;
            Option<string?> message = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "level":
                            level = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "badge":
                            badge = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "streak":
                            streak = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (level.IsSet && level.Value == null)
                throw new ArgumentNullException(nameof(level), "Property is not nullable for class ShareMilestoneRequestData.");

            if (badge.IsSet && badge.Value == null)
                throw new ArgumentNullException(nameof(badge), "Property is not nullable for class ShareMilestoneRequestData.");

            if (streak.IsSet && streak.Value == null)
                throw new ArgumentNullException(nameof(streak), "Property is not nullable for class ShareMilestoneRequestData.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class ShareMilestoneRequestData.");

            return new ShareMilestoneRequestData(level, badge, streak, message);
        }

        /// <summary>
        /// Serializes a <see cref="ShareMilestoneRequestData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shareMilestoneRequestData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShareMilestoneRequestData shareMilestoneRequestData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shareMilestoneRequestData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShareMilestoneRequestData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shareMilestoneRequestData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShareMilestoneRequestData shareMilestoneRequestData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shareMilestoneRequestData.BadgeOption.IsSet && shareMilestoneRequestData.Badge == null)
                throw new ArgumentNullException(nameof(shareMilestoneRequestData.Badge), "Property is required for class ShareMilestoneRequestData.");

            if (shareMilestoneRequestData.MessageOption.IsSet && shareMilestoneRequestData.Message == null)
                throw new ArgumentNullException(nameof(shareMilestoneRequestData.Message), "Property is required for class ShareMilestoneRequestData.");

            if (shareMilestoneRequestData.LevelOption.IsSet)
                writer.WriteNumber("level", shareMilestoneRequestData.LevelOption.Value!.Value);

            if (shareMilestoneRequestData.BadgeOption.IsSet)
            {
                writer.WritePropertyName("badge");
                JsonSerializer.Serialize(writer, shareMilestoneRequestData.Badge, jsonSerializerOptions);
            }
            if (shareMilestoneRequestData.StreakOption.IsSet)
                writer.WriteNumber("streak", shareMilestoneRequestData.StreakOption.Value!.Value);

            if (shareMilestoneRequestData.MessageOption.IsSet)
                writer.WriteString("message", shareMilestoneRequestData.Message);
        }
    }
}
