// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// GetUserStats200ResponseDataUsers
    /// </summary>
    public partial class GetUserStats200ResponseDataUsers : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserStats200ResponseDataUsers" /> class.
        /// </summary>
        /// <param name="total">total</param>
        /// <param name="active">active</param>
        /// <param name="inactive">inactive</param>
        /// <param name="admins">admins</param>
        [JsonConstructor]
        public GetUserStats200ResponseDataUsers(Option<int?> total = default, Option<int?> active = default, Option<int?> inactive = default, Option<int?> admins = default)
        {
            TotalOption = total;
            ActiveOption = active;
            InactiveOption = inactive;
            AdminsOption = admins;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        /* <example>150</example> */
        [JsonPropertyName("total")]
        public int? Total { get { return this.TotalOption; } set { this.TotalOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        /* <example>140</example> */
        [JsonPropertyName("active")]
        public int? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Inactive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InactiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Inactive
        /// </summary>
        /* <example>10</example> */
        [JsonPropertyName("inactive")]
        public int? Inactive { get { return this.InactiveOption; } set { this.InactiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Admins
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AdminsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Admins
        /// </summary>
        /* <example>5</example> */
        [JsonPropertyName("admins")]
        public int? Admins { get { return this.AdminsOption; } set { this.AdminsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserStats200ResponseDataUsers {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  Admins: ").Append(Admins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetUserStats200ResponseDataUsers" />
    /// </summary>
    public class GetUserStats200ResponseDataUsersJsonConverter : JsonConverter<GetUserStats200ResponseDataUsers>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetUserStats200ResponseDataUsers" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetUserStats200ResponseDataUsers Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> total = default;
            Option<int?> active = default;
            Option<int?> inactive = default;
            Option<int?> admins = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "active":
                            active = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "inactive":
                            inactive = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "admins":
                            admins = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class GetUserStats200ResponseDataUsers.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class GetUserStats200ResponseDataUsers.");

            if (inactive.IsSet && inactive.Value == null)
                throw new ArgumentNullException(nameof(inactive), "Property is not nullable for class GetUserStats200ResponseDataUsers.");

            if (admins.IsSet && admins.Value == null)
                throw new ArgumentNullException(nameof(admins), "Property is not nullable for class GetUserStats200ResponseDataUsers.");

            return new GetUserStats200ResponseDataUsers(total, active, inactive, admins);
        }

        /// <summary>
        /// Serializes a <see cref="GetUserStats200ResponseDataUsers" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserStats200ResponseDataUsers"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetUserStats200ResponseDataUsers getUserStats200ResponseDataUsers, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getUserStats200ResponseDataUsers, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetUserStats200ResponseDataUsers" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserStats200ResponseDataUsers"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetUserStats200ResponseDataUsers getUserStats200ResponseDataUsers, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getUserStats200ResponseDataUsers.TotalOption.IsSet)
                writer.WriteNumber("total", getUserStats200ResponseDataUsers.TotalOption.Value!.Value);

            if (getUserStats200ResponseDataUsers.ActiveOption.IsSet)
                writer.WriteNumber("active", getUserStats200ResponseDataUsers.ActiveOption.Value!.Value);

            if (getUserStats200ResponseDataUsers.InactiveOption.IsSet)
                writer.WriteNumber("inactive", getUserStats200ResponseDataUsers.InactiveOption.Value!.Value);

            if (getUserStats200ResponseDataUsers.AdminsOption.IsSet)
                writer.WriteNumber("admins", getUserStats200ResponseDataUsers.AdminsOption.Value!.Value);
        }
    }
}
