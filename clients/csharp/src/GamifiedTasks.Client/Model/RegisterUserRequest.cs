// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// RegisterUserRequest
    /// </summary>
    public partial class RegisterUserRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterUserRequest" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="email">email</param>
        /// <param name="password">password</param>
        /// <param name="role">role (default to RoleEnum.User)</param>
        [JsonConstructor]
        public RegisterUserRequest(string name, string email, string password, Option<RoleEnum?> role = default)
        {
            Name = name;
            Email = email;
            Password = password;
            RoleOption = role;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Role
        /// </summary>
        public enum RoleEnum
        {
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            User = 1,

            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            Admin = 2
        }

        /// <summary>
        /// Returns a <see cref="RoleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RoleEnum RoleEnumFromString(string value)
        {
            if (value.Equals("user"))
                return RoleEnum.User;

            if (value.Equals("admin"))
                return RoleEnum.Admin;

            throw new NotImplementedException($"Could not convert value to type RoleEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RoleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RoleEnum? RoleEnumFromStringOrDefault(string value)
        {
            if (value.Equals("user"))
                return RoleEnum.User;

            if (value.Equals("admin"))
                return RoleEnum.Admin;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RoleEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RoleEnumToJsonValue(RoleEnum? value)
        {
            if (value == RoleEnum.User)
                return "user";

            if (value == RoleEnum.Admin)
                return "admin";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RoleEnum?> RoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        /* <example>user</example> */
        [JsonPropertyName("role")]
        public RoleEnum? Role { get { return this.RoleOption; } set { this.RoleOption = new(value); } }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Jo√£o Silva</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        /* <example>joao@email.com</example> */
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        /* <example>123456</example> */
        [JsonPropertyName("password")]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterUserRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 50.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 2)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 2.", new [] { "Name" });
            }

            // Password (string) minLength
            if (this.Password != null && this.Password.Length < 6)
            {
                yield return new ValidationResult("Invalid value for Password, length must be greater than 6.", new [] { "Password" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RegisterUserRequest" />
    /// </summary>
    public class RegisterUserRequestJsonConverter : JsonConverter<RegisterUserRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="RegisterUserRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RegisterUserRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> email = default;
            Option<string?> password = default;
            Option<RegisterUserRequest.RoleEnum?> role = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "role":
                            string? roleRawValue = utf8JsonReader.GetString();
                            if (roleRawValue != null)
                                role = new Option<RegisterUserRequest.RoleEnum?>(RegisterUserRequest.RoleEnumFromStringOrDefault(roleRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class RegisterUserRequest.", nameof(name));

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class RegisterUserRequest.", nameof(email));

            if (!password.IsSet)
                throw new ArgumentException("Property is required for class RegisterUserRequest.", nameof(password));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class RegisterUserRequest.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class RegisterUserRequest.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class RegisterUserRequest.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class RegisterUserRequest.");

            return new RegisterUserRequest(name.Value!, email.Value!, password.Value!, role);
        }

        /// <summary>
        /// Serializes a <see cref="RegisterUserRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="registerUserRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RegisterUserRequest registerUserRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, registerUserRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RegisterUserRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="registerUserRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RegisterUserRequest registerUserRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (registerUserRequest.Name == null)
                throw new ArgumentNullException(nameof(registerUserRequest.Name), "Property is required for class RegisterUserRequest.");

            if (registerUserRequest.Email == null)
                throw new ArgumentNullException(nameof(registerUserRequest.Email), "Property is required for class RegisterUserRequest.");

            if (registerUserRequest.Password == null)
                throw new ArgumentNullException(nameof(registerUserRequest.Password), "Property is required for class RegisterUserRequest.");

            writer.WriteString("name", registerUserRequest.Name);

            writer.WriteString("email", registerUserRequest.Email);

            writer.WriteString("password", registerUserRequest.Password);

            var roleRawValue = RegisterUserRequest.RoleEnumToJsonValue(registerUserRequest.RoleOption.Value!.Value);
            writer.WriteString("role", roleRawValue);
        }
    }
}
