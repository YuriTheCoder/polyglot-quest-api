// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// CreateStoryFromTasks201ResponseDataStory
    /// </summary>
    public partial class CreateStoryFromTasks201ResponseDataStory : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateStoryFromTasks201ResponseDataStory" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="title">title</param>
        /// <param name="story">story</param>
        /// <param name="theme">theme</param>
        /// <param name="totalXP">totalXP</param>
        /// <param name="estimatedPlayTime">estimatedPlayTime</param>
        [JsonConstructor]
        public CreateStoryFromTasks201ResponseDataStory(Option<string?> id = default, Option<string?> title = default, Option<string?> story = default, Option<string?> theme = default, Option<decimal?> totalXP = default, Option<string?> estimatedPlayTime = default)
        {
            IdOption = id;
            TitleOption = title;
            StoryOption = story;
            ThemeOption = theme;
            TotalXPOption = totalXP;
            EstimatedPlayTimeOption = estimatedPlayTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Story
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Story
        /// </summary>
        [JsonPropertyName("story")]
        public string? Story { get { return this.StoryOption; } set { this.StoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Theme
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ThemeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [JsonPropertyName("theme")]
        public string? Theme { get { return this.ThemeOption; } set { this.ThemeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalXP
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalXPOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalXP
        /// </summary>
        [JsonPropertyName("totalXP")]
        public decimal? TotalXP { get { return this.TotalXPOption; } set { this.TotalXPOption = new(value); } }

        /// <summary>
        /// Used to track the state of EstimatedPlayTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EstimatedPlayTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EstimatedPlayTime
        /// </summary>
        [JsonPropertyName("estimatedPlayTime")]
        public string? EstimatedPlayTime { get { return this.EstimatedPlayTimeOption; } set { this.EstimatedPlayTimeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateStoryFromTasks201ResponseDataStory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Story: ").Append(Story).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  TotalXP: ").Append(TotalXP).Append("\n");
            sb.Append("  EstimatedPlayTime: ").Append(EstimatedPlayTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateStoryFromTasks201ResponseDataStory" />
    /// </summary>
    public class CreateStoryFromTasks201ResponseDataStoryJsonConverter : JsonConverter<CreateStoryFromTasks201ResponseDataStory>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateStoryFromTasks201ResponseDataStory" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateStoryFromTasks201ResponseDataStory Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> title = default;
            Option<string?> story = default;
            Option<string?> theme = default;
            Option<decimal?> totalXP = default;
            Option<string?> estimatedPlayTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "story":
                            story = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "theme":
                            theme = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "totalXP":
                            totalXP = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "estimatedPlayTime":
                            estimatedPlayTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CreateStoryFromTasks201ResponseDataStory.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class CreateStoryFromTasks201ResponseDataStory.");

            if (story.IsSet && story.Value == null)
                throw new ArgumentNullException(nameof(story), "Property is not nullable for class CreateStoryFromTasks201ResponseDataStory.");

            if (theme.IsSet && theme.Value == null)
                throw new ArgumentNullException(nameof(theme), "Property is not nullable for class CreateStoryFromTasks201ResponseDataStory.");

            if (totalXP.IsSet && totalXP.Value == null)
                throw new ArgumentNullException(nameof(totalXP), "Property is not nullable for class CreateStoryFromTasks201ResponseDataStory.");

            if (estimatedPlayTime.IsSet && estimatedPlayTime.Value == null)
                throw new ArgumentNullException(nameof(estimatedPlayTime), "Property is not nullable for class CreateStoryFromTasks201ResponseDataStory.");

            return new CreateStoryFromTasks201ResponseDataStory(id, title, story, theme, totalXP, estimatedPlayTime);
        }

        /// <summary>
        /// Serializes a <see cref="CreateStoryFromTasks201ResponseDataStory" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createStoryFromTasks201ResponseDataStory"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateStoryFromTasks201ResponseDataStory createStoryFromTasks201ResponseDataStory, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createStoryFromTasks201ResponseDataStory, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateStoryFromTasks201ResponseDataStory" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createStoryFromTasks201ResponseDataStory"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateStoryFromTasks201ResponseDataStory createStoryFromTasks201ResponseDataStory, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createStoryFromTasks201ResponseDataStory.IdOption.IsSet && createStoryFromTasks201ResponseDataStory.Id == null)
                throw new ArgumentNullException(nameof(createStoryFromTasks201ResponseDataStory.Id), "Property is required for class CreateStoryFromTasks201ResponseDataStory.");

            if (createStoryFromTasks201ResponseDataStory.TitleOption.IsSet && createStoryFromTasks201ResponseDataStory.Title == null)
                throw new ArgumentNullException(nameof(createStoryFromTasks201ResponseDataStory.Title), "Property is required for class CreateStoryFromTasks201ResponseDataStory.");

            if (createStoryFromTasks201ResponseDataStory.StoryOption.IsSet && createStoryFromTasks201ResponseDataStory.Story == null)
                throw new ArgumentNullException(nameof(createStoryFromTasks201ResponseDataStory.Story), "Property is required for class CreateStoryFromTasks201ResponseDataStory.");

            if (createStoryFromTasks201ResponseDataStory.ThemeOption.IsSet && createStoryFromTasks201ResponseDataStory.Theme == null)
                throw new ArgumentNullException(nameof(createStoryFromTasks201ResponseDataStory.Theme), "Property is required for class CreateStoryFromTasks201ResponseDataStory.");

            if (createStoryFromTasks201ResponseDataStory.EstimatedPlayTimeOption.IsSet && createStoryFromTasks201ResponseDataStory.EstimatedPlayTime == null)
                throw new ArgumentNullException(nameof(createStoryFromTasks201ResponseDataStory.EstimatedPlayTime), "Property is required for class CreateStoryFromTasks201ResponseDataStory.");

            if (createStoryFromTasks201ResponseDataStory.IdOption.IsSet)
                writer.WriteString("id", createStoryFromTasks201ResponseDataStory.Id);

            if (createStoryFromTasks201ResponseDataStory.TitleOption.IsSet)
                writer.WriteString("title", createStoryFromTasks201ResponseDataStory.Title);

            if (createStoryFromTasks201ResponseDataStory.StoryOption.IsSet)
                writer.WriteString("story", createStoryFromTasks201ResponseDataStory.Story);

            if (createStoryFromTasks201ResponseDataStory.ThemeOption.IsSet)
                writer.WriteString("theme", createStoryFromTasks201ResponseDataStory.Theme);

            if (createStoryFromTasks201ResponseDataStory.TotalXPOption.IsSet)
                writer.WriteNumber("totalXP", createStoryFromTasks201ResponseDataStory.TotalXPOption.Value!.Value);

            if (createStoryFromTasks201ResponseDataStory.EstimatedPlayTimeOption.IsSet)
                writer.WriteString("estimatedPlayTime", createStoryFromTasks201ResponseDataStory.EstimatedPlayTime);
        }
    }
}
