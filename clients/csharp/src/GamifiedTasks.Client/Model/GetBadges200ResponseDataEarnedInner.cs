// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// GetBadges200ResponseDataEarnedInner
    /// </summary>
    public partial class GetBadges200ResponseDataEarnedInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBadges200ResponseDataEarnedInner" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="description">description</param>
        /// <param name="icon">icon</param>
        /// <param name="earned">earned</param>
        [JsonConstructor]
        public GetBadges200ResponseDataEarnedInner(Option<string?> id = default, Option<string?> name = default, Option<string?> description = default, Option<string?> icon = default, Option<bool?> earned = default)
        {
            IdOption = id;
            NameOption = name;
            DescriptionOption = description;
            IconOption = icon;
            EarnedOption = earned;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Icon
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IconOption { get; private set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [JsonPropertyName("icon")]
        public string? Icon { get { return this.IconOption; } set { this.IconOption = new(value); } }

        /// <summary>
        /// Used to track the state of Earned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EarnedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Earned
        /// </summary>
        [JsonPropertyName("earned")]
        public bool? Earned { get { return this.EarnedOption; } set { this.EarnedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetBadges200ResponseDataEarnedInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Earned: ").Append(Earned).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetBadges200ResponseDataEarnedInner" />
    /// </summary>
    public class GetBadges200ResponseDataEarnedInnerJsonConverter : JsonConverter<GetBadges200ResponseDataEarnedInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetBadges200ResponseDataEarnedInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetBadges200ResponseDataEarnedInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> description = default;
            Option<string?> icon = default;
            Option<bool?> earned = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "icon":
                            icon = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "earned":
                            earned = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetBadges200ResponseDataEarnedInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetBadges200ResponseDataEarnedInner.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class GetBadges200ResponseDataEarnedInner.");

            if (icon.IsSet && icon.Value == null)
                throw new ArgumentNullException(nameof(icon), "Property is not nullable for class GetBadges200ResponseDataEarnedInner.");

            if (earned.IsSet && earned.Value == null)
                throw new ArgumentNullException(nameof(earned), "Property is not nullable for class GetBadges200ResponseDataEarnedInner.");

            return new GetBadges200ResponseDataEarnedInner(id, name, description, icon, earned);
        }

        /// <summary>
        /// Serializes a <see cref="GetBadges200ResponseDataEarnedInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getBadges200ResponseDataEarnedInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetBadges200ResponseDataEarnedInner getBadges200ResponseDataEarnedInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getBadges200ResponseDataEarnedInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetBadges200ResponseDataEarnedInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getBadges200ResponseDataEarnedInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetBadges200ResponseDataEarnedInner getBadges200ResponseDataEarnedInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getBadges200ResponseDataEarnedInner.IdOption.IsSet && getBadges200ResponseDataEarnedInner.Id == null)
                throw new ArgumentNullException(nameof(getBadges200ResponseDataEarnedInner.Id), "Property is required for class GetBadges200ResponseDataEarnedInner.");

            if (getBadges200ResponseDataEarnedInner.NameOption.IsSet && getBadges200ResponseDataEarnedInner.Name == null)
                throw new ArgumentNullException(nameof(getBadges200ResponseDataEarnedInner.Name), "Property is required for class GetBadges200ResponseDataEarnedInner.");

            if (getBadges200ResponseDataEarnedInner.DescriptionOption.IsSet && getBadges200ResponseDataEarnedInner.Description == null)
                throw new ArgumentNullException(nameof(getBadges200ResponseDataEarnedInner.Description), "Property is required for class GetBadges200ResponseDataEarnedInner.");

            if (getBadges200ResponseDataEarnedInner.IconOption.IsSet && getBadges200ResponseDataEarnedInner.Icon == null)
                throw new ArgumentNullException(nameof(getBadges200ResponseDataEarnedInner.Icon), "Property is required for class GetBadges200ResponseDataEarnedInner.");

            if (getBadges200ResponseDataEarnedInner.IdOption.IsSet)
                writer.WriteString("id", getBadges200ResponseDataEarnedInner.Id);

            if (getBadges200ResponseDataEarnedInner.NameOption.IsSet)
                writer.WriteString("name", getBadges200ResponseDataEarnedInner.Name);

            if (getBadges200ResponseDataEarnedInner.DescriptionOption.IsSet)
                writer.WriteString("description", getBadges200ResponseDataEarnedInner.Description);

            if (getBadges200ResponseDataEarnedInner.IconOption.IsSet)
                writer.WriteString("icon", getBadges200ResponseDataEarnedInner.Icon);

            if (getBadges200ResponseDataEarnedInner.EarnedOption.IsSet)
                writer.WriteBoolean("earned", getBadges200ResponseDataEarnedInner.EarnedOption.Value!.Value);
        }
    }
}
