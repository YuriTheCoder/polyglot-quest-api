// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// GetLeaderboard200ResponseDataLeaderboardInner
    /// </summary>
    public partial class GetLeaderboard200ResponseDataLeaderboardInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetLeaderboard200ResponseDataLeaderboardInner" /> class.
        /// </summary>
        /// <param name="rank">rank</param>
        /// <param name="username">username</param>
        /// <param name="level">level</param>
        /// <param name="totalXP">totalXP</param>
        /// <param name="tasksCompleted">tasksCompleted</param>
        /// <param name="currentStreak">currentStreak</param>
        /// <param name="badges">badges</param>
        [JsonConstructor]
        public GetLeaderboard200ResponseDataLeaderboardInner(Option<decimal?> rank = default, Option<string?> username = default, Option<decimal?> level = default, Option<decimal?> totalXP = default, Option<decimal?> tasksCompleted = default, Option<decimal?> currentStreak = default, Option<decimal?> badges = default)
        {
            RankOption = rank;
            UsernameOption = username;
            LevelOption = level;
            TotalXPOption = totalXP;
            TasksCompletedOption = tasksCompleted;
            CurrentStreakOption = currentStreak;
            BadgesOption = badges;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Rank
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> RankOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        /* <example>1</example> */
        [JsonPropertyName("rank")]
        public decimal? Rank { get { return this.RankOption; } set { this.RankOption = new(value); } }

        /// <summary>
        /// Used to track the state of Username
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        /* <example>GamerPro123</example> */
        [JsonPropertyName("username")]
        public string? Username { get { return this.UsernameOption; } set { this.UsernameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Level
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        /* <example>15</example> */
        [JsonPropertyName("level")]
        public decimal? Level { get { return this.LevelOption; } set { this.LevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalXP
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalXPOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalXP
        /// </summary>
        /* <example>1450</example> */
        [JsonPropertyName("totalXP")]
        public decimal? TotalXP { get { return this.TotalXPOption; } set { this.TotalXPOption = new(value); } }

        /// <summary>
        /// Used to track the state of TasksCompleted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TasksCompletedOption { get; private set; }

        /// <summary>
        /// Gets or Sets TasksCompleted
        /// </summary>
        /* <example>87</example> */
        [JsonPropertyName("tasksCompleted")]
        public decimal? TasksCompleted { get { return this.TasksCompletedOption; } set { this.TasksCompletedOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentStreak
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> CurrentStreakOption { get; private set; }

        /// <summary>
        /// Gets or Sets CurrentStreak
        /// </summary>
        /* <example>12</example> */
        [JsonPropertyName("currentStreak")]
        public decimal? CurrentStreak { get { return this.CurrentStreakOption; } set { this.CurrentStreakOption = new(value); } }

        /// <summary>
        /// Used to track the state of Badges
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> BadgesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Badges
        /// </summary>
        /* <example>8</example> */
        [JsonPropertyName("badges")]
        public decimal? Badges { get { return this.BadgesOption; } set { this.BadgesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetLeaderboard200ResponseDataLeaderboardInner {\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  TotalXP: ").Append(TotalXP).Append("\n");
            sb.Append("  TasksCompleted: ").Append(TasksCompleted).Append("\n");
            sb.Append("  CurrentStreak: ").Append(CurrentStreak).Append("\n");
            sb.Append("  Badges: ").Append(Badges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetLeaderboard200ResponseDataLeaderboardInner" />
    /// </summary>
    public class GetLeaderboard200ResponseDataLeaderboardInnerJsonConverter : JsonConverter<GetLeaderboard200ResponseDataLeaderboardInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetLeaderboard200ResponseDataLeaderboardInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetLeaderboard200ResponseDataLeaderboardInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> rank = default;
            Option<string?> username = default;
            Option<decimal?> level = default;
            Option<decimal?> totalXP = default;
            Option<decimal?> tasksCompleted = default;
            Option<decimal?> currentStreak = default;
            Option<decimal?> badges = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "rank":
                            rank = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "level":
                            level = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "totalXP":
                            totalXP = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "tasksCompleted":
                            tasksCompleted = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "currentStreak":
                            currentStreak = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "badges":
                            badges = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (rank.IsSet && rank.Value == null)
                throw new ArgumentNullException(nameof(rank), "Property is not nullable for class GetLeaderboard200ResponseDataLeaderboardInner.");

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class GetLeaderboard200ResponseDataLeaderboardInner.");

            if (level.IsSet && level.Value == null)
                throw new ArgumentNullException(nameof(level), "Property is not nullable for class GetLeaderboard200ResponseDataLeaderboardInner.");

            if (totalXP.IsSet && totalXP.Value == null)
                throw new ArgumentNullException(nameof(totalXP), "Property is not nullable for class GetLeaderboard200ResponseDataLeaderboardInner.");

            if (tasksCompleted.IsSet && tasksCompleted.Value == null)
                throw new ArgumentNullException(nameof(tasksCompleted), "Property is not nullable for class GetLeaderboard200ResponseDataLeaderboardInner.");

            if (currentStreak.IsSet && currentStreak.Value == null)
                throw new ArgumentNullException(nameof(currentStreak), "Property is not nullable for class GetLeaderboard200ResponseDataLeaderboardInner.");

            if (badges.IsSet && badges.Value == null)
                throw new ArgumentNullException(nameof(badges), "Property is not nullable for class GetLeaderboard200ResponseDataLeaderboardInner.");

            return new GetLeaderboard200ResponseDataLeaderboardInner(rank, username, level, totalXP, tasksCompleted, currentStreak, badges);
        }

        /// <summary>
        /// Serializes a <see cref="GetLeaderboard200ResponseDataLeaderboardInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getLeaderboard200ResponseDataLeaderboardInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetLeaderboard200ResponseDataLeaderboardInner getLeaderboard200ResponseDataLeaderboardInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getLeaderboard200ResponseDataLeaderboardInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetLeaderboard200ResponseDataLeaderboardInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getLeaderboard200ResponseDataLeaderboardInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetLeaderboard200ResponseDataLeaderboardInner getLeaderboard200ResponseDataLeaderboardInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getLeaderboard200ResponseDataLeaderboardInner.UsernameOption.IsSet && getLeaderboard200ResponseDataLeaderboardInner.Username == null)
                throw new ArgumentNullException(nameof(getLeaderboard200ResponseDataLeaderboardInner.Username), "Property is required for class GetLeaderboard200ResponseDataLeaderboardInner.");

            if (getLeaderboard200ResponseDataLeaderboardInner.RankOption.IsSet)
                writer.WriteNumber("rank", getLeaderboard200ResponseDataLeaderboardInner.RankOption.Value!.Value);

            if (getLeaderboard200ResponseDataLeaderboardInner.UsernameOption.IsSet)
                writer.WriteString("username", getLeaderboard200ResponseDataLeaderboardInner.Username);

            if (getLeaderboard200ResponseDataLeaderboardInner.LevelOption.IsSet)
                writer.WriteNumber("level", getLeaderboard200ResponseDataLeaderboardInner.LevelOption.Value!.Value);

            if (getLeaderboard200ResponseDataLeaderboardInner.TotalXPOption.IsSet)
                writer.WriteNumber("totalXP", getLeaderboard200ResponseDataLeaderboardInner.TotalXPOption.Value!.Value);

            if (getLeaderboard200ResponseDataLeaderboardInner.TasksCompletedOption.IsSet)
                writer.WriteNumber("tasksCompleted", getLeaderboard200ResponseDataLeaderboardInner.TasksCompletedOption.Value!.Value);

            if (getLeaderboard200ResponseDataLeaderboardInner.CurrentStreakOption.IsSet)
                writer.WriteNumber("currentStreak", getLeaderboard200ResponseDataLeaderboardInner.CurrentStreakOption.Value!.Value);

            if (getLeaderboard200ResponseDataLeaderboardInner.BadgesOption.IsSet)
                writer.WriteNumber("badges", getLeaderboard200ResponseDataLeaderboardInner.BadgesOption.Value!.Value);
        }
    }
}
