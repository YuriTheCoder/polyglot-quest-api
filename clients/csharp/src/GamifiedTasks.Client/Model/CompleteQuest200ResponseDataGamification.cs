// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// CompleteQuest200ResponseDataGamification
    /// </summary>
    public partial class CompleteQuest200ResponseDataGamification : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompleteQuest200ResponseDataGamification" /> class.
        /// </summary>
        /// <param name="xpGained">xpGained</param>
        /// <param name="leveledUp">leveledUp</param>
        /// <param name="newLevel">newLevel</param>
        /// <param name="newBadges">newBadges</param>
        /// <param name="totalXP">totalXP</param>
        /// <param name="currentStreak">currentStreak</param>
        [JsonConstructor]
        public CompleteQuest200ResponseDataGamification(Option<decimal?> xpGained = default, Option<bool?> leveledUp = default, Option<decimal?> newLevel = default, Option<List<string>?> newBadges = default, Option<decimal?> totalXP = default, Option<decimal?> currentStreak = default)
        {
            XpGainedOption = xpGained;
            LeveledUpOption = leveledUp;
            NewLevelOption = newLevel;
            NewBadgesOption = newBadges;
            TotalXPOption = totalXP;
            CurrentStreakOption = currentStreak;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of XpGained
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> XpGainedOption { get; private set; }

        /// <summary>
        /// Gets or Sets XpGained
        /// </summary>
        [JsonPropertyName("xpGained")]
        public decimal? XpGained { get { return this.XpGainedOption; } set { this.XpGainedOption = new(value); } }

        /// <summary>
        /// Used to track the state of LeveledUp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LeveledUpOption { get; private set; }

        /// <summary>
        /// Gets or Sets LeveledUp
        /// </summary>
        [JsonPropertyName("leveledUp")]
        public bool? LeveledUp { get { return this.LeveledUpOption; } set { this.LeveledUpOption = new(value); } }

        /// <summary>
        /// Used to track the state of NewLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> NewLevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets NewLevel
        /// </summary>
        [JsonPropertyName("newLevel")]
        public decimal? NewLevel { get { return this.NewLevelOption; } set { this.NewLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of NewBadges
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> NewBadgesOption { get; private set; }

        /// <summary>
        /// Gets or Sets NewBadges
        /// </summary>
        [JsonPropertyName("newBadges")]
        public List<string>? NewBadges { get { return this.NewBadgesOption; } set { this.NewBadgesOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalXP
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalXPOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalXP
        /// </summary>
        [JsonPropertyName("totalXP")]
        public decimal? TotalXP { get { return this.TotalXPOption; } set { this.TotalXPOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentStreak
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> CurrentStreakOption { get; private set; }

        /// <summary>
        /// Gets or Sets CurrentStreak
        /// </summary>
        [JsonPropertyName("currentStreak")]
        public decimal? CurrentStreak { get { return this.CurrentStreakOption; } set { this.CurrentStreakOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompleteQuest200ResponseDataGamification {\n");
            sb.Append("  XpGained: ").Append(XpGained).Append("\n");
            sb.Append("  LeveledUp: ").Append(LeveledUp).Append("\n");
            sb.Append("  NewLevel: ").Append(NewLevel).Append("\n");
            sb.Append("  NewBadges: ").Append(NewBadges).Append("\n");
            sb.Append("  TotalXP: ").Append(TotalXP).Append("\n");
            sb.Append("  CurrentStreak: ").Append(CurrentStreak).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CompleteQuest200ResponseDataGamification" />
    /// </summary>
    public class CompleteQuest200ResponseDataGamificationJsonConverter : JsonConverter<CompleteQuest200ResponseDataGamification>
    {
        /// <summary>
        /// Deserializes json to <see cref="CompleteQuest200ResponseDataGamification" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CompleteQuest200ResponseDataGamification Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> xpGained = default;
            Option<bool?> leveledUp = default;
            Option<decimal?> newLevel = default;
            Option<List<string>?> newBadges = default;
            Option<decimal?> totalXP = default;
            Option<decimal?> currentStreak = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "xpGained":
                            xpGained = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "leveledUp":
                            leveledUp = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "newLevel":
                            newLevel = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "newBadges":
                            newBadges = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "totalXP":
                            totalXP = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "currentStreak":
                            currentStreak = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (xpGained.IsSet && xpGained.Value == null)
                throw new ArgumentNullException(nameof(xpGained), "Property is not nullable for class CompleteQuest200ResponseDataGamification.");

            if (leveledUp.IsSet && leveledUp.Value == null)
                throw new ArgumentNullException(nameof(leveledUp), "Property is not nullable for class CompleteQuest200ResponseDataGamification.");

            if (newLevel.IsSet && newLevel.Value == null)
                throw new ArgumentNullException(nameof(newLevel), "Property is not nullable for class CompleteQuest200ResponseDataGamification.");

            if (newBadges.IsSet && newBadges.Value == null)
                throw new ArgumentNullException(nameof(newBadges), "Property is not nullable for class CompleteQuest200ResponseDataGamification.");

            if (totalXP.IsSet && totalXP.Value == null)
                throw new ArgumentNullException(nameof(totalXP), "Property is not nullable for class CompleteQuest200ResponseDataGamification.");

            if (currentStreak.IsSet && currentStreak.Value == null)
                throw new ArgumentNullException(nameof(currentStreak), "Property is not nullable for class CompleteQuest200ResponseDataGamification.");

            return new CompleteQuest200ResponseDataGamification(xpGained, leveledUp, newLevel, newBadges, totalXP, currentStreak);
        }

        /// <summary>
        /// Serializes a <see cref="CompleteQuest200ResponseDataGamification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="completeQuest200ResponseDataGamification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CompleteQuest200ResponseDataGamification completeQuest200ResponseDataGamification, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, completeQuest200ResponseDataGamification, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CompleteQuest200ResponseDataGamification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="completeQuest200ResponseDataGamification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CompleteQuest200ResponseDataGamification completeQuest200ResponseDataGamification, JsonSerializerOptions jsonSerializerOptions)
        {
            if (completeQuest200ResponseDataGamification.NewBadgesOption.IsSet && completeQuest200ResponseDataGamification.NewBadges == null)
                throw new ArgumentNullException(nameof(completeQuest200ResponseDataGamification.NewBadges), "Property is required for class CompleteQuest200ResponseDataGamification.");

            if (completeQuest200ResponseDataGamification.XpGainedOption.IsSet)
                writer.WriteNumber("xpGained", completeQuest200ResponseDataGamification.XpGainedOption.Value!.Value);

            if (completeQuest200ResponseDataGamification.LeveledUpOption.IsSet)
                writer.WriteBoolean("leveledUp", completeQuest200ResponseDataGamification.LeveledUpOption.Value!.Value);

            if (completeQuest200ResponseDataGamification.NewLevelOption.IsSet)
                writer.WriteNumber("newLevel", completeQuest200ResponseDataGamification.NewLevelOption.Value!.Value);

            if (completeQuest200ResponseDataGamification.NewBadgesOption.IsSet)
            {
                writer.WritePropertyName("newBadges");
                JsonSerializer.Serialize(writer, completeQuest200ResponseDataGamification.NewBadges, jsonSerializerOptions);
            }
            if (completeQuest200ResponseDataGamification.TotalXPOption.IsSet)
                writer.WriteNumber("totalXP", completeQuest200ResponseDataGamification.TotalXPOption.Value!.Value);

            if (completeQuest200ResponseDataGamification.CurrentStreakOption.IsSet)
                writer.WriteNumber("currentStreak", completeQuest200ResponseDataGamification.CurrentStreakOption.Value!.Value);
        }
    }
}
