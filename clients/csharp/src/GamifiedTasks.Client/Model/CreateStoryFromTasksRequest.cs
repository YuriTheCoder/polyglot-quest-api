// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// CreateStoryFromTasksRequest
    /// </summary>
    public partial class CreateStoryFromTasksRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateStoryFromTasksRequest" /> class.
        /// </summary>
        /// <param name="taskIds">taskIds</param>
        /// <param name="userPreferences">userPreferences</param>
        [JsonConstructor]
        public CreateStoryFromTasksRequest(List<string> taskIds, Option<CreateStoryFromTasksRequestUserPreferences?> userPreferences = default)
        {
            TaskIds = taskIds;
            UserPreferencesOption = userPreferences;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets TaskIds
        /// </summary>
        /* <example>[&quot;64a1b2c3d4e5f6789abcdef0&quot;,&quot;64a1b2c3d4e5f6789abcdef1&quot;]</example> */
        [JsonPropertyName("taskIds")]
        public List<string> TaskIds { get; set; }

        /// <summary>
        /// Used to track the state of UserPreferences
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateStoryFromTasksRequestUserPreferences?> UserPreferencesOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserPreferences
        /// </summary>
        [JsonPropertyName("userPreferences")]
        public CreateStoryFromTasksRequestUserPreferences? UserPreferences { get { return this.UserPreferencesOption; } set { this.UserPreferencesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateStoryFromTasksRequest {\n");
            sb.Append("  TaskIds: ").Append(TaskIds).Append("\n");
            sb.Append("  UserPreferences: ").Append(UserPreferences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateStoryFromTasksRequest" />
    /// </summary>
    public class CreateStoryFromTasksRequestJsonConverter : JsonConverter<CreateStoryFromTasksRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateStoryFromTasksRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateStoryFromTasksRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> taskIds = default;
            Option<CreateStoryFromTasksRequestUserPreferences?> userPreferences = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "taskIds":
                            taskIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "userPreferences":
                            userPreferences = new Option<CreateStoryFromTasksRequestUserPreferences?>(JsonSerializer.Deserialize<CreateStoryFromTasksRequestUserPreferences>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!taskIds.IsSet)
                throw new ArgumentException("Property is required for class CreateStoryFromTasksRequest.", nameof(taskIds));

            if (taskIds.IsSet && taskIds.Value == null)
                throw new ArgumentNullException(nameof(taskIds), "Property is not nullable for class CreateStoryFromTasksRequest.");

            if (userPreferences.IsSet && userPreferences.Value == null)
                throw new ArgumentNullException(nameof(userPreferences), "Property is not nullable for class CreateStoryFromTasksRequest.");

            return new CreateStoryFromTasksRequest(taskIds.Value!, userPreferences);
        }

        /// <summary>
        /// Serializes a <see cref="CreateStoryFromTasksRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createStoryFromTasksRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateStoryFromTasksRequest createStoryFromTasksRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createStoryFromTasksRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateStoryFromTasksRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createStoryFromTasksRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateStoryFromTasksRequest createStoryFromTasksRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createStoryFromTasksRequest.TaskIds == null)
                throw new ArgumentNullException(nameof(createStoryFromTasksRequest.TaskIds), "Property is required for class CreateStoryFromTasksRequest.");

            if (createStoryFromTasksRequest.UserPreferencesOption.IsSet && createStoryFromTasksRequest.UserPreferences == null)
                throw new ArgumentNullException(nameof(createStoryFromTasksRequest.UserPreferences), "Property is required for class CreateStoryFromTasksRequest.");

            writer.WritePropertyName("taskIds");
            JsonSerializer.Serialize(writer, createStoryFromTasksRequest.TaskIds, jsonSerializerOptions);
            if (createStoryFromTasksRequest.UserPreferencesOption.IsSet)
            {
                writer.WritePropertyName("userPreferences");
                JsonSerializer.Serialize(writer, createStoryFromTasksRequest.UserPreferences, jsonSerializerOptions);
            }
        }
    }
}
