// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// GetBadges200ResponseData
    /// </summary>
    public partial class GetBadges200ResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBadges200ResponseData" /> class.
        /// </summary>
        /// <param name="earned">earned</param>
        /// <param name="available">available</param>
        /// <param name="total">total</param>
        /// <param name="earnedCount">earnedCount</param>
        [JsonConstructor]
        public GetBadges200ResponseData(Option<List<GetBadges200ResponseDataEarnedInner>?> earned = default, Option<List<Object>?> available = default, Option<decimal?> total = default, Option<decimal?> earnedCount = default)
        {
            EarnedOption = earned;
            AvailableOption = available;
            TotalOption = total;
            EarnedCountOption = earnedCount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Earned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetBadges200ResponseDataEarnedInner>?> EarnedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Earned
        /// </summary>
        [JsonPropertyName("earned")]
        public List<GetBadges200ResponseDataEarnedInner>? Earned { get { return this.EarnedOption; } set { this.EarnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Available
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Object>?> AvailableOption { get; private set; }

        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [JsonPropertyName("available")]
        public List<Object>? Available { get { return this.AvailableOption; } set { this.AvailableOption = new(value); } }

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [JsonPropertyName("total")]
        public decimal? Total { get { return this.TotalOption; } set { this.TotalOption = new(value); } }

        /// <summary>
        /// Used to track the state of EarnedCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> EarnedCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets EarnedCount
        /// </summary>
        [JsonPropertyName("earnedCount")]
        public decimal? EarnedCount { get { return this.EarnedCountOption; } set { this.EarnedCountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetBadges200ResponseData {\n");
            sb.Append("  Earned: ").Append(Earned).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  EarnedCount: ").Append(EarnedCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetBadges200ResponseData" />
    /// </summary>
    public class GetBadges200ResponseDataJsonConverter : JsonConverter<GetBadges200ResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetBadges200ResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetBadges200ResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<GetBadges200ResponseDataEarnedInner>?> earned = default;
            Option<List<Object>?> available = default;
            Option<decimal?> total = default;
            Option<decimal?> earnedCount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "earned":
                            earned = new Option<List<GetBadges200ResponseDataEarnedInner>?>(JsonSerializer.Deserialize<List<GetBadges200ResponseDataEarnedInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "available":
                            available = new Option<List<Object>?>(JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "total":
                            total = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "earnedCount":
                            earnedCount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (earned.IsSet && earned.Value == null)
                throw new ArgumentNullException(nameof(earned), "Property is not nullable for class GetBadges200ResponseData.");

            if (available.IsSet && available.Value == null)
                throw new ArgumentNullException(nameof(available), "Property is not nullable for class GetBadges200ResponseData.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class GetBadges200ResponseData.");

            if (earnedCount.IsSet && earnedCount.Value == null)
                throw new ArgumentNullException(nameof(earnedCount), "Property is not nullable for class GetBadges200ResponseData.");

            return new GetBadges200ResponseData(earned, available, total, earnedCount);
        }

        /// <summary>
        /// Serializes a <see cref="GetBadges200ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getBadges200ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetBadges200ResponseData getBadges200ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getBadges200ResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetBadges200ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getBadges200ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetBadges200ResponseData getBadges200ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getBadges200ResponseData.EarnedOption.IsSet && getBadges200ResponseData.Earned == null)
                throw new ArgumentNullException(nameof(getBadges200ResponseData.Earned), "Property is required for class GetBadges200ResponseData.");

            if (getBadges200ResponseData.AvailableOption.IsSet && getBadges200ResponseData.Available == null)
                throw new ArgumentNullException(nameof(getBadges200ResponseData.Available), "Property is required for class GetBadges200ResponseData.");

            if (getBadges200ResponseData.EarnedOption.IsSet)
            {
                writer.WritePropertyName("earned");
                JsonSerializer.Serialize(writer, getBadges200ResponseData.Earned, jsonSerializerOptions);
            }
            if (getBadges200ResponseData.AvailableOption.IsSet)
            {
                writer.WritePropertyName("available");
                JsonSerializer.Serialize(writer, getBadges200ResponseData.Available, jsonSerializerOptions);
            }
            if (getBadges200ResponseData.TotalOption.IsSet)
                writer.WriteNumber("total", getBadges200ResponseData.TotalOption.Value!.Value);

            if (getBadges200ResponseData.EarnedCountOption.IsSet)
                writer.WriteNumber("earnedCount", getBadges200ResponseData.EarnedCountOption.Value!.Value);
        }
    }
}
