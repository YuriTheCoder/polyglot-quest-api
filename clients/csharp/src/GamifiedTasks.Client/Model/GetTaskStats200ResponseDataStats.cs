// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// GetTaskStats200ResponseDataStats
    /// </summary>
    public partial class GetTaskStats200ResponseDataStats : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTaskStats200ResponseDataStats" /> class.
        /// </summary>
        /// <param name="total">total</param>
        /// <param name="pending">pending</param>
        /// <param name="inProgress">inProgress</param>
        /// <param name="completed">completed</param>
        /// <param name="overdue">overdue</param>
        /// <param name="completedThisMonth">completedThisMonth</param>
        [JsonConstructor]
        public GetTaskStats200ResponseDataStats(Option<int?> total = default, Option<int?> pending = default, Option<int?> inProgress = default, Option<int?> completed = default, Option<int?> overdue = default, Option<int?> completedThisMonth = default)
        {
            TotalOption = total;
            PendingOption = pending;
            InProgressOption = inProgress;
            CompletedOption = completed;
            OverdueOption = overdue;
            CompletedThisMonthOption = completedThisMonth;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        /* <example>25</example> */
        [JsonPropertyName("total")]
        public int? Total { get { return this.TotalOption; } set { this.TotalOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pending
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PendingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pending
        /// </summary>
        /* <example>10</example> */
        [JsonPropertyName("pending")]
        public int? Pending { get { return this.PendingOption; } set { this.PendingOption = new(value); } }

        /// <summary>
        /// Used to track the state of InProgress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InProgressOption { get; private set; }

        /// <summary>
        /// Gets or Sets InProgress
        /// </summary>
        /* <example>8</example> */
        [JsonPropertyName("in_progress")]
        public int? InProgress { get { return this.InProgressOption; } set { this.InProgressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Completed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CompletedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        /* <example>7</example> */
        [JsonPropertyName("completed")]
        public int? Completed { get { return this.CompletedOption; } set { this.CompletedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Overdue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OverdueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Overdue
        /// </summary>
        /* <example>3</example> */
        [JsonPropertyName("overdue")]
        public int? Overdue { get { return this.OverdueOption; } set { this.OverdueOption = new(value); } }

        /// <summary>
        /// Used to track the state of CompletedThisMonth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CompletedThisMonthOption { get; private set; }

        /// <summary>
        /// Gets or Sets CompletedThisMonth
        /// </summary>
        /* <example>5</example> */
        [JsonPropertyName("completedThisMonth")]
        public int? CompletedThisMonth { get { return this.CompletedThisMonthOption; } set { this.CompletedThisMonthOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetTaskStats200ResponseDataStats {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  InProgress: ").Append(InProgress).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Overdue: ").Append(Overdue).Append("\n");
            sb.Append("  CompletedThisMonth: ").Append(CompletedThisMonth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetTaskStats200ResponseDataStats" />
    /// </summary>
    public class GetTaskStats200ResponseDataStatsJsonConverter : JsonConverter<GetTaskStats200ResponseDataStats>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetTaskStats200ResponseDataStats" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetTaskStats200ResponseDataStats Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> total = default;
            Option<int?> pending = default;
            Option<int?> inProgress = default;
            Option<int?> completed = default;
            Option<int?> overdue = default;
            Option<int?> completedThisMonth = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pending":
                            pending = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "in_progress":
                            inProgress = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "completed":
                            completed = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "overdue":
                            overdue = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "completedThisMonth":
                            completedThisMonth = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class GetTaskStats200ResponseDataStats.");

            if (pending.IsSet && pending.Value == null)
                throw new ArgumentNullException(nameof(pending), "Property is not nullable for class GetTaskStats200ResponseDataStats.");

            if (inProgress.IsSet && inProgress.Value == null)
                throw new ArgumentNullException(nameof(inProgress), "Property is not nullable for class GetTaskStats200ResponseDataStats.");

            if (completed.IsSet && completed.Value == null)
                throw new ArgumentNullException(nameof(completed), "Property is not nullable for class GetTaskStats200ResponseDataStats.");

            if (overdue.IsSet && overdue.Value == null)
                throw new ArgumentNullException(nameof(overdue), "Property is not nullable for class GetTaskStats200ResponseDataStats.");

            if (completedThisMonth.IsSet && completedThisMonth.Value == null)
                throw new ArgumentNullException(nameof(completedThisMonth), "Property is not nullable for class GetTaskStats200ResponseDataStats.");

            return new GetTaskStats200ResponseDataStats(total, pending, inProgress, completed, overdue, completedThisMonth);
        }

        /// <summary>
        /// Serializes a <see cref="GetTaskStats200ResponseDataStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTaskStats200ResponseDataStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetTaskStats200ResponseDataStats getTaskStats200ResponseDataStats, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getTaskStats200ResponseDataStats, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetTaskStats200ResponseDataStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTaskStats200ResponseDataStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetTaskStats200ResponseDataStats getTaskStats200ResponseDataStats, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getTaskStats200ResponseDataStats.TotalOption.IsSet)
                writer.WriteNumber("total", getTaskStats200ResponseDataStats.TotalOption.Value!.Value);

            if (getTaskStats200ResponseDataStats.PendingOption.IsSet)
                writer.WriteNumber("pending", getTaskStats200ResponseDataStats.PendingOption.Value!.Value);

            if (getTaskStats200ResponseDataStats.InProgressOption.IsSet)
                writer.WriteNumber("in_progress", getTaskStats200ResponseDataStats.InProgressOption.Value!.Value);

            if (getTaskStats200ResponseDataStats.CompletedOption.IsSet)
                writer.WriteNumber("completed", getTaskStats200ResponseDataStats.CompletedOption.Value!.Value);

            if (getTaskStats200ResponseDataStats.OverdueOption.IsSet)
                writer.WriteNumber("overdue", getTaskStats200ResponseDataStats.OverdueOption.Value!.Value);

            if (getTaskStats200ResponseDataStats.CompletedThisMonthOption.IsSet)
                writer.WriteNumber("completedThisMonth", getTaskStats200ResponseDataStats.CompletedThisMonthOption.Value!.Value);
        }
    }
}
