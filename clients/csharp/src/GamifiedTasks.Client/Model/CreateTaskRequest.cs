// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// CreateTaskRequest
    /// </summary>
    public partial class CreateTaskRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTaskRequest" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="status">status (default to StatusEnum.Pending)</param>
        /// <param name="priority">priority (default to PriorityEnum.Medium)</param>
        /// <param name="dueDate">dueDate</param>
        /// <param name="tags">tags</param>
        [JsonConstructor]
        public CreateTaskRequest(string title, string description, Option<StatusEnum?> status = default, Option<PriorityEnum?> priority = default, Option<DateTime?> dueDate = default, Option<List<string>?> tags = default)
        {
            Title = title;
            Description = description;
            StatusOption = status;
            PriorityOption = priority;
            DueDateOption = dueDate;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 1,

            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            InProgress = 2,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            Completed = 3
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("in_progress"))
                return StatusEnum.InProgress;

            if (value.Equals("completed"))
                return StatusEnum.Completed;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("in_progress"))
                return StatusEnum.InProgress;

            if (value.Equals("completed"))
                return StatusEnum.Completed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == StatusEnum.Pending)
                return "pending";

            if (value == StatusEnum.InProgress)
                return "in_progress";

            if (value == StatusEnum.Completed)
                return "completed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /* <example>pending</example> */
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Defines Priority
        /// </summary>
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            Low = 1,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            Medium = 2,

            /// <summary>
            /// Enum High for value: high
            /// </summary>
            High = 3
        }

        /// <summary>
        /// Returns a <see cref="PriorityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PriorityEnum PriorityEnumFromString(string value)
        {
            if (value.Equals("low"))
                return PriorityEnum.Low;

            if (value.Equals("medium"))
                return PriorityEnum.Medium;

            if (value.Equals("high"))
                return PriorityEnum.High;

            throw new NotImplementedException($"Could not convert value to type PriorityEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PriorityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PriorityEnum? PriorityEnumFromStringOrDefault(string value)
        {
            if (value.Equals("low"))
                return PriorityEnum.Low;

            if (value.Equals("medium"))
                return PriorityEnum.Medium;

            if (value.Equals("high"))
                return PriorityEnum.High;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PriorityEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PriorityEnumToJsonValue(PriorityEnum? value)
        {
            if (value == PriorityEnum.Low)
                return "low";

            if (value == PriorityEnum.Medium)
                return "medium";

            if (value == PriorityEnum.High)
                return "high";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Priority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PriorityEnum?> PriorityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        /* <example>high</example> */
        [JsonPropertyName("priority")]
        public PriorityEnum? Priority { get { return this.PriorityOption; } set { this.PriorityOption = new(value); } }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        /* <example>Implementar autenticação JWT</example> */
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>Implementar sistema de autenticação usando JWT com middleware de verificação</example> */
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DueDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        /* <example>2024-12-31T23:59:59Z</example> */
        [JsonPropertyName("dueDate")]
        public DateTime? DueDate { get { return this.DueDateOption; } set { this.DueDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        /* <example>[&quot;backend&quot;,&quot;auth&quot;,&quot;jwt&quot;]</example> */
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTaskRequest {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 100.", new [] { "Title" });
            }

            // Title (string) minLength
            if (this.Title != null && this.Title.Length < 3)
            {
                yield return new ValidationResult("Invalid value for Title, length must be greater than 3.", new [] { "Title" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 500)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 500.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 10)
            {
                yield return new ValidationResult("Invalid value for Description, length must be greater than 10.", new [] { "Description" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateTaskRequest" />
    /// </summary>
    public class CreateTaskRequestJsonConverter : JsonConverter<CreateTaskRequest>
    {
        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CreateTaskRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateTaskRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> description = default;
            Option<CreateTaskRequest.StatusEnum?> status = default;
            Option<CreateTaskRequest.PriorityEnum?> priority = default;
            Option<DateTime?> dueDate = default;
            Option<List<string>?> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<CreateTaskRequest.StatusEnum?>(CreateTaskRequest.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "priority":
                            string? priorityRawValue = utf8JsonReader.GetString();
                            if (priorityRawValue != null)
                                priority = new Option<CreateTaskRequest.PriorityEnum?>(CreateTaskRequest.PriorityEnumFromStringOrDefault(priorityRawValue));
                            break;
                        case "dueDate":
                            dueDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class CreateTaskRequest.", nameof(title));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class CreateTaskRequest.", nameof(description));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class CreateTaskRequest.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class CreateTaskRequest.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class CreateTaskRequest.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class CreateTaskRequest.");

            if (dueDate.IsSet && dueDate.Value == null)
                throw new ArgumentNullException(nameof(dueDate), "Property is not nullable for class CreateTaskRequest.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class CreateTaskRequest.");

            return new CreateTaskRequest(title.Value!, description.Value!, status, priority, dueDate, tags);
        }

        /// <summary>
        /// Serializes a <see cref="CreateTaskRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTaskRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateTaskRequest createTaskRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createTaskRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateTaskRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTaskRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateTaskRequest createTaskRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createTaskRequest.Title == null)
                throw new ArgumentNullException(nameof(createTaskRequest.Title), "Property is required for class CreateTaskRequest.");

            if (createTaskRequest.Description == null)
                throw new ArgumentNullException(nameof(createTaskRequest.Description), "Property is required for class CreateTaskRequest.");

            if (createTaskRequest.TagsOption.IsSet && createTaskRequest.Tags == null)
                throw new ArgumentNullException(nameof(createTaskRequest.Tags), "Property is required for class CreateTaskRequest.");

            writer.WriteString("title", createTaskRequest.Title);

            writer.WriteString("description", createTaskRequest.Description);

            var statusRawValue = CreateTaskRequest.StatusEnumToJsonValue(createTaskRequest.StatusOption.Value!.Value);
            writer.WriteString("status", statusRawValue);
            var priorityRawValue = CreateTaskRequest.PriorityEnumToJsonValue(createTaskRequest.PriorityOption.Value!.Value);
            writer.WriteString("priority", priorityRawValue);
            if (createTaskRequest.DueDateOption.IsSet)
                writer.WriteString("dueDate", createTaskRequest.DueDateOption.Value!.Value.ToString(DueDateFormat));

            if (createTaskRequest.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, createTaskRequest.Tags, jsonSerializerOptions);
            }
        }
    }
}
