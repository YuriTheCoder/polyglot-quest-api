// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// GetTaskStats200ResponseData
    /// </summary>
    public partial class GetTaskStats200ResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTaskStats200ResponseData" /> class.
        /// </summary>
        /// <param name="stats">stats</param>
        /// <param name="overdueTasks">overdueTasks</param>
        [JsonConstructor]
        public GetTaskStats200ResponseData(Option<GetTaskStats200ResponseDataStats?> stats = default, Option<List<Task>?> overdueTasks = default)
        {
            StatsOption = stats;
            OverdueTasksOption = overdueTasks;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Stats
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetTaskStats200ResponseDataStats?> StatsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [JsonPropertyName("stats")]
        public GetTaskStats200ResponseDataStats? Stats { get { return this.StatsOption; } set { this.StatsOption = new(value); } }

        /// <summary>
        /// Used to track the state of OverdueTasks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Task>?> OverdueTasksOption { get; private set; }

        /// <summary>
        /// Gets or Sets OverdueTasks
        /// </summary>
        [JsonPropertyName("overdueTasks")]
        public List<Task>? OverdueTasks { get { return this.OverdueTasksOption; } set { this.OverdueTasksOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetTaskStats200ResponseData {\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  OverdueTasks: ").Append(OverdueTasks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetTaskStats200ResponseData" />
    /// </summary>
    public class GetTaskStats200ResponseDataJsonConverter : JsonConverter<GetTaskStats200ResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetTaskStats200ResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetTaskStats200ResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GetTaskStats200ResponseDataStats?> stats = default;
            Option<List<Task>?> overdueTasks = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "stats":
                            stats = new Option<GetTaskStats200ResponseDataStats?>(JsonSerializer.Deserialize<GetTaskStats200ResponseDataStats>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "overdueTasks":
                            overdueTasks = new Option<List<Task>?>(JsonSerializer.Deserialize<List<Task>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (stats.IsSet && stats.Value == null)
                throw new ArgumentNullException(nameof(stats), "Property is not nullable for class GetTaskStats200ResponseData.");

            if (overdueTasks.IsSet && overdueTasks.Value == null)
                throw new ArgumentNullException(nameof(overdueTasks), "Property is not nullable for class GetTaskStats200ResponseData.");

            return new GetTaskStats200ResponseData(stats, overdueTasks);
        }

        /// <summary>
        /// Serializes a <see cref="GetTaskStats200ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTaskStats200ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetTaskStats200ResponseData getTaskStats200ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getTaskStats200ResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetTaskStats200ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTaskStats200ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetTaskStats200ResponseData getTaskStats200ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getTaskStats200ResponseData.StatsOption.IsSet && getTaskStats200ResponseData.Stats == null)
                throw new ArgumentNullException(nameof(getTaskStats200ResponseData.Stats), "Property is required for class GetTaskStats200ResponseData.");

            if (getTaskStats200ResponseData.OverdueTasksOption.IsSet && getTaskStats200ResponseData.OverdueTasks == null)
                throw new ArgumentNullException(nameof(getTaskStats200ResponseData.OverdueTasks), "Property is required for class GetTaskStats200ResponseData.");

            if (getTaskStats200ResponseData.StatsOption.IsSet)
            {
                writer.WritePropertyName("stats");
                JsonSerializer.Serialize(writer, getTaskStats200ResponseData.Stats, jsonSerializerOptions);
            }
            if (getTaskStats200ResponseData.OverdueTasksOption.IsSet)
            {
                writer.WritePropertyName("overdueTasks");
                JsonSerializer.Serialize(writer, getTaskStats200ResponseData.OverdueTasks, jsonSerializerOptions);
            }
        }
    }
}
