// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// CreateStoryFromTasks201ResponseData
    /// </summary>
    public partial class CreateStoryFromTasks201ResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateStoryFromTasks201ResponseData" /> class.
        /// </summary>
        /// <param name="story">story</param>
        /// <param name="quests">quests</param>
        [JsonConstructor]
        public CreateStoryFromTasks201ResponseData(Option<CreateStoryFromTasks201ResponseDataStory?> story = default, Option<List<CreateStoryFromTasks201ResponseDataQuestsInner>?> quests = default)
        {
            StoryOption = story;
            QuestsOption = quests;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Story
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateStoryFromTasks201ResponseDataStory?> StoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Story
        /// </summary>
        [JsonPropertyName("story")]
        public CreateStoryFromTasks201ResponseDataStory? Story { get { return this.StoryOption; } set { this.StoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Quests
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CreateStoryFromTasks201ResponseDataQuestsInner>?> QuestsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Quests
        /// </summary>
        [JsonPropertyName("quests")]
        public List<CreateStoryFromTasks201ResponseDataQuestsInner>? Quests { get { return this.QuestsOption; } set { this.QuestsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateStoryFromTasks201ResponseData {\n");
            sb.Append("  Story: ").Append(Story).Append("\n");
            sb.Append("  Quests: ").Append(Quests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateStoryFromTasks201ResponseData" />
    /// </summary>
    public class CreateStoryFromTasks201ResponseDataJsonConverter : JsonConverter<CreateStoryFromTasks201ResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateStoryFromTasks201ResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateStoryFromTasks201ResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateStoryFromTasks201ResponseDataStory?> story = default;
            Option<List<CreateStoryFromTasks201ResponseDataQuestsInner>?> quests = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "story":
                            story = new Option<CreateStoryFromTasks201ResponseDataStory?>(JsonSerializer.Deserialize<CreateStoryFromTasks201ResponseDataStory>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "quests":
                            quests = new Option<List<CreateStoryFromTasks201ResponseDataQuestsInner>?>(JsonSerializer.Deserialize<List<CreateStoryFromTasks201ResponseDataQuestsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (story.IsSet && story.Value == null)
                throw new ArgumentNullException(nameof(story), "Property is not nullable for class CreateStoryFromTasks201ResponseData.");

            if (quests.IsSet && quests.Value == null)
                throw new ArgumentNullException(nameof(quests), "Property is not nullable for class CreateStoryFromTasks201ResponseData.");

            return new CreateStoryFromTasks201ResponseData(story, quests);
        }

        /// <summary>
        /// Serializes a <see cref="CreateStoryFromTasks201ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createStoryFromTasks201ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateStoryFromTasks201ResponseData createStoryFromTasks201ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createStoryFromTasks201ResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateStoryFromTasks201ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createStoryFromTasks201ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateStoryFromTasks201ResponseData createStoryFromTasks201ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createStoryFromTasks201ResponseData.StoryOption.IsSet && createStoryFromTasks201ResponseData.Story == null)
                throw new ArgumentNullException(nameof(createStoryFromTasks201ResponseData.Story), "Property is required for class CreateStoryFromTasks201ResponseData.");

            if (createStoryFromTasks201ResponseData.QuestsOption.IsSet && createStoryFromTasks201ResponseData.Quests == null)
                throw new ArgumentNullException(nameof(createStoryFromTasks201ResponseData.Quests), "Property is required for class CreateStoryFromTasks201ResponseData.");

            if (createStoryFromTasks201ResponseData.StoryOption.IsSet)
            {
                writer.WritePropertyName("story");
                JsonSerializer.Serialize(writer, createStoryFromTasks201ResponseData.Story, jsonSerializerOptions);
            }
            if (createStoryFromTasks201ResponseData.QuestsOption.IsSet)
            {
                writer.WritePropertyName("quests");
                JsonSerializer.Serialize(writer, createStoryFromTasks201ResponseData.Quests, jsonSerializerOptions);
            }
        }
    }
}
