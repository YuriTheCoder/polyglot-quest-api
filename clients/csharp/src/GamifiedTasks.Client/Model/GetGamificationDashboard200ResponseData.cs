// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// GetGamificationDashboard200ResponseData
    /// </summary>
    public partial class GetGamificationDashboard200ResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetGamificationDashboard200ResponseData" /> class.
        /// </summary>
        /// <param name="user">user</param>
        /// <param name="stats">stats</param>
        /// <param name="stories">stories</param>
        /// <param name="recentAchievements">recentAchievements</param>
        /// <param name="activeStories">activeStories</param>
        [JsonConstructor]
        public GetGamificationDashboard200ResponseData(Option<GetGamificationDashboard200ResponseDataUser?> user = default, Option<GetGamificationDashboard200ResponseDataStats?> stats = default, Option<Object?> stories = default, Option<List<string>?> recentAchievements = default, Option<List<string>?> activeStories = default)
        {
            UserOption = user;
            StatsOption = stats;
            StoriesOption = stories;
            RecentAchievementsOption = recentAchievements;
            ActiveStoriesOption = activeStories;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of User
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetGamificationDashboard200ResponseDataUser?> UserOption { get; private set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [JsonPropertyName("user")]
        public GetGamificationDashboard200ResponseDataUser? User { get { return this.UserOption; } set { this.UserOption = new(value); } }

        /// <summary>
        /// Used to track the state of Stats
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetGamificationDashboard200ResponseDataStats?> StatsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [JsonPropertyName("stats")]
        public GetGamificationDashboard200ResponseDataStats? Stats { get { return this.StatsOption; } set { this.StatsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Stories
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> StoriesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stories
        /// </summary>
        [JsonPropertyName("stories")]
        public Object? Stories { get { return this.StoriesOption; } set { this.StoriesOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecentAchievements
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> RecentAchievementsOption { get; private set; }

        /// <summary>
        /// Gets or Sets RecentAchievements
        /// </summary>
        [JsonPropertyName("recentAchievements")]
        public List<string>? RecentAchievements { get { return this.RecentAchievementsOption; } set { this.RecentAchievementsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ActiveStories
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ActiveStoriesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ActiveStories
        /// </summary>
        [JsonPropertyName("activeStories")]
        public List<string>? ActiveStories { get { return this.ActiveStoriesOption; } set { this.ActiveStoriesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetGamificationDashboard200ResponseData {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  Stories: ").Append(Stories).Append("\n");
            sb.Append("  RecentAchievements: ").Append(RecentAchievements).Append("\n");
            sb.Append("  ActiveStories: ").Append(ActiveStories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetGamificationDashboard200ResponseData" />
    /// </summary>
    public class GetGamificationDashboard200ResponseDataJsonConverter : JsonConverter<GetGamificationDashboard200ResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetGamificationDashboard200ResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetGamificationDashboard200ResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GetGamificationDashboard200ResponseDataUser?> user = default;
            Option<GetGamificationDashboard200ResponseDataStats?> stats = default;
            Option<Object?> stories = default;
            Option<List<string>?> recentAchievements = default;
            Option<List<string>?> activeStories = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "user":
                            user = new Option<GetGamificationDashboard200ResponseDataUser?>(JsonSerializer.Deserialize<GetGamificationDashboard200ResponseDataUser>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "stats":
                            stats = new Option<GetGamificationDashboard200ResponseDataStats?>(JsonSerializer.Deserialize<GetGamificationDashboard200ResponseDataStats>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "stories":
                            stories = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "recentAchievements":
                            recentAchievements = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "activeStories":
                            activeStories = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class GetGamificationDashboard200ResponseData.");

            if (stats.IsSet && stats.Value == null)
                throw new ArgumentNullException(nameof(stats), "Property is not nullable for class GetGamificationDashboard200ResponseData.");

            if (stories.IsSet && stories.Value == null)
                throw new ArgumentNullException(nameof(stories), "Property is not nullable for class GetGamificationDashboard200ResponseData.");

            if (recentAchievements.IsSet && recentAchievements.Value == null)
                throw new ArgumentNullException(nameof(recentAchievements), "Property is not nullable for class GetGamificationDashboard200ResponseData.");

            if (activeStories.IsSet && activeStories.Value == null)
                throw new ArgumentNullException(nameof(activeStories), "Property is not nullable for class GetGamificationDashboard200ResponseData.");

            return new GetGamificationDashboard200ResponseData(user, stats, stories, recentAchievements, activeStories);
        }

        /// <summary>
        /// Serializes a <see cref="GetGamificationDashboard200ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getGamificationDashboard200ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetGamificationDashboard200ResponseData getGamificationDashboard200ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getGamificationDashboard200ResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetGamificationDashboard200ResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getGamificationDashboard200ResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetGamificationDashboard200ResponseData getGamificationDashboard200ResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getGamificationDashboard200ResponseData.UserOption.IsSet && getGamificationDashboard200ResponseData.User == null)
                throw new ArgumentNullException(nameof(getGamificationDashboard200ResponseData.User), "Property is required for class GetGamificationDashboard200ResponseData.");

            if (getGamificationDashboard200ResponseData.StatsOption.IsSet && getGamificationDashboard200ResponseData.Stats == null)
                throw new ArgumentNullException(nameof(getGamificationDashboard200ResponseData.Stats), "Property is required for class GetGamificationDashboard200ResponseData.");

            if (getGamificationDashboard200ResponseData.StoriesOption.IsSet && getGamificationDashboard200ResponseData.Stories == null)
                throw new ArgumentNullException(nameof(getGamificationDashboard200ResponseData.Stories), "Property is required for class GetGamificationDashboard200ResponseData.");

            if (getGamificationDashboard200ResponseData.RecentAchievementsOption.IsSet && getGamificationDashboard200ResponseData.RecentAchievements == null)
                throw new ArgumentNullException(nameof(getGamificationDashboard200ResponseData.RecentAchievements), "Property is required for class GetGamificationDashboard200ResponseData.");

            if (getGamificationDashboard200ResponseData.ActiveStoriesOption.IsSet && getGamificationDashboard200ResponseData.ActiveStories == null)
                throw new ArgumentNullException(nameof(getGamificationDashboard200ResponseData.ActiveStories), "Property is required for class GetGamificationDashboard200ResponseData.");

            if (getGamificationDashboard200ResponseData.UserOption.IsSet)
            {
                writer.WritePropertyName("user");
                JsonSerializer.Serialize(writer, getGamificationDashboard200ResponseData.User, jsonSerializerOptions);
            }
            if (getGamificationDashboard200ResponseData.StatsOption.IsSet)
            {
                writer.WritePropertyName("stats");
                JsonSerializer.Serialize(writer, getGamificationDashboard200ResponseData.Stats, jsonSerializerOptions);
            }
            if (getGamificationDashboard200ResponseData.StoriesOption.IsSet)
            {
                writer.WritePropertyName("stories");
                JsonSerializer.Serialize(writer, getGamificationDashboard200ResponseData.Stories, jsonSerializerOptions);
            }
            if (getGamificationDashboard200ResponseData.RecentAchievementsOption.IsSet)
            {
                writer.WritePropertyName("recentAchievements");
                JsonSerializer.Serialize(writer, getGamificationDashboard200ResponseData.RecentAchievements, jsonSerializerOptions);
            }
            if (getGamificationDashboard200ResponseData.ActiveStoriesOption.IsSet)
            {
                writer.WritePropertyName("activeStories");
                JsonSerializer.Serialize(writer, getGamificationDashboard200ResponseData.ActiveStories, jsonSerializerOptions);
            }
        }
    }
}
