// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// CreateStoryFromTasks201ResponseDataQuestsInner
    /// </summary>
    public partial class CreateStoryFromTasks201ResponseDataQuestsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateStoryFromTasks201ResponseDataQuestsInner" /> class.
        /// </summary>
        /// <param name="questTitle">questTitle</param>
        /// <param name="questDescription">questDescription</param>
        /// <param name="difficulty">difficulty</param>
        /// <param name="xp">xp</param>
        /// <param name="category">category</param>
        [JsonConstructor]
        public CreateStoryFromTasks201ResponseDataQuestsInner(Option<string?> questTitle = default, Option<string?> questDescription = default, Option<string?> difficulty = default, Option<decimal?> xp = default, Option<string?> category = default)
        {
            QuestTitleOption = questTitle;
            QuestDescriptionOption = questDescription;
            DifficultyOption = difficulty;
            XpOption = xp;
            CategoryOption = category;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of QuestTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QuestTitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets QuestTitle
        /// </summary>
        [JsonPropertyName("questTitle")]
        public string? QuestTitle { get { return this.QuestTitleOption; } set { this.QuestTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of QuestDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QuestDescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets QuestDescription
        /// </summary>
        [JsonPropertyName("questDescription")]
        public string? QuestDescription { get { return this.QuestDescriptionOption; } set { this.QuestDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Difficulty
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DifficultyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Difficulty
        /// </summary>
        [JsonPropertyName("difficulty")]
        public string? Difficulty { get { return this.DifficultyOption; } set { this.DifficultyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Xp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> XpOption { get; private set; }

        /// <summary>
        /// Gets or Sets Xp
        /// </summary>
        [JsonPropertyName("xp")]
        public decimal? Xp { get { return this.XpOption; } set { this.XpOption = new(value); } }

        /// <summary>
        /// Used to track the state of Category
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [JsonPropertyName("category")]
        public string? Category { get { return this.CategoryOption; } set { this.CategoryOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateStoryFromTasks201ResponseDataQuestsInner {\n");
            sb.Append("  QuestTitle: ").Append(QuestTitle).Append("\n");
            sb.Append("  QuestDescription: ").Append(QuestDescription).Append("\n");
            sb.Append("  Difficulty: ").Append(Difficulty).Append("\n");
            sb.Append("  Xp: ").Append(Xp).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateStoryFromTasks201ResponseDataQuestsInner" />
    /// </summary>
    public class CreateStoryFromTasks201ResponseDataQuestsInnerJsonConverter : JsonConverter<CreateStoryFromTasks201ResponseDataQuestsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateStoryFromTasks201ResponseDataQuestsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateStoryFromTasks201ResponseDataQuestsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> questTitle = default;
            Option<string?> questDescription = default;
            Option<string?> difficulty = default;
            Option<decimal?> xp = default;
            Option<string?> category = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "questTitle":
                            questTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "questDescription":
                            questDescription = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "difficulty":
                            difficulty = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "xp":
                            xp = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "category":
                            category = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (questTitle.IsSet && questTitle.Value == null)
                throw new ArgumentNullException(nameof(questTitle), "Property is not nullable for class CreateStoryFromTasks201ResponseDataQuestsInner.");

            if (questDescription.IsSet && questDescription.Value == null)
                throw new ArgumentNullException(nameof(questDescription), "Property is not nullable for class CreateStoryFromTasks201ResponseDataQuestsInner.");

            if (difficulty.IsSet && difficulty.Value == null)
                throw new ArgumentNullException(nameof(difficulty), "Property is not nullable for class CreateStoryFromTasks201ResponseDataQuestsInner.");

            if (xp.IsSet && xp.Value == null)
                throw new ArgumentNullException(nameof(xp), "Property is not nullable for class CreateStoryFromTasks201ResponseDataQuestsInner.");

            if (category.IsSet && category.Value == null)
                throw new ArgumentNullException(nameof(category), "Property is not nullable for class CreateStoryFromTasks201ResponseDataQuestsInner.");

            return new CreateStoryFromTasks201ResponseDataQuestsInner(questTitle, questDescription, difficulty, xp, category);
        }

        /// <summary>
        /// Serializes a <see cref="CreateStoryFromTasks201ResponseDataQuestsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createStoryFromTasks201ResponseDataQuestsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateStoryFromTasks201ResponseDataQuestsInner createStoryFromTasks201ResponseDataQuestsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createStoryFromTasks201ResponseDataQuestsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateStoryFromTasks201ResponseDataQuestsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createStoryFromTasks201ResponseDataQuestsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateStoryFromTasks201ResponseDataQuestsInner createStoryFromTasks201ResponseDataQuestsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createStoryFromTasks201ResponseDataQuestsInner.QuestTitleOption.IsSet && createStoryFromTasks201ResponseDataQuestsInner.QuestTitle == null)
                throw new ArgumentNullException(nameof(createStoryFromTasks201ResponseDataQuestsInner.QuestTitle), "Property is required for class CreateStoryFromTasks201ResponseDataQuestsInner.");

            if (createStoryFromTasks201ResponseDataQuestsInner.QuestDescriptionOption.IsSet && createStoryFromTasks201ResponseDataQuestsInner.QuestDescription == null)
                throw new ArgumentNullException(nameof(createStoryFromTasks201ResponseDataQuestsInner.QuestDescription), "Property is required for class CreateStoryFromTasks201ResponseDataQuestsInner.");

            if (createStoryFromTasks201ResponseDataQuestsInner.DifficultyOption.IsSet && createStoryFromTasks201ResponseDataQuestsInner.Difficulty == null)
                throw new ArgumentNullException(nameof(createStoryFromTasks201ResponseDataQuestsInner.Difficulty), "Property is required for class CreateStoryFromTasks201ResponseDataQuestsInner.");

            if (createStoryFromTasks201ResponseDataQuestsInner.CategoryOption.IsSet && createStoryFromTasks201ResponseDataQuestsInner.Category == null)
                throw new ArgumentNullException(nameof(createStoryFromTasks201ResponseDataQuestsInner.Category), "Property is required for class CreateStoryFromTasks201ResponseDataQuestsInner.");

            if (createStoryFromTasks201ResponseDataQuestsInner.QuestTitleOption.IsSet)
                writer.WriteString("questTitle", createStoryFromTasks201ResponseDataQuestsInner.QuestTitle);

            if (createStoryFromTasks201ResponseDataQuestsInner.QuestDescriptionOption.IsSet)
                writer.WriteString("questDescription", createStoryFromTasks201ResponseDataQuestsInner.QuestDescription);

            if (createStoryFromTasks201ResponseDataQuestsInner.DifficultyOption.IsSet)
                writer.WriteString("difficulty", createStoryFromTasks201ResponseDataQuestsInner.Difficulty);

            if (createStoryFromTasks201ResponseDataQuestsInner.XpOption.IsSet)
                writer.WriteNumber("xp", createStoryFromTasks201ResponseDataQuestsInner.XpOption.Value!.Value);

            if (createStoryFromTasks201ResponseDataQuestsInner.CategoryOption.IsSet)
                writer.WriteString("category", createStoryFromTasks201ResponseDataQuestsInner.Category);
        }
    }
}
