// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// GetGlobalStats200ResponseDataStories
    /// </summary>
    public partial class GetGlobalStats200ResponseDataStories : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetGlobalStats200ResponseDataStories" /> class.
        /// </summary>
        /// <param name="totalStories">totalStories</param>
        /// <param name="totalQuests">totalQuests</param>
        /// <param name="completedStories">completedStories</param>
        /// <param name="completionRate">completionRate</param>
        [JsonConstructor]
        public GetGlobalStats200ResponseDataStories(Option<decimal?> totalStories = default, Option<decimal?> totalQuests = default, Option<decimal?> completedStories = default, Option<decimal?> completionRate = default)
        {
            TotalStoriesOption = totalStories;
            TotalQuestsOption = totalQuests;
            CompletedStoriesOption = completedStories;
            CompletionRateOption = completionRate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TotalStories
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalStoriesOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalStories
        /// </summary>
        [JsonPropertyName("totalStories")]
        public decimal? TotalStories { get { return this.TotalStoriesOption; } set { this.TotalStoriesOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalQuests
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TotalQuestsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalQuests
        /// </summary>
        [JsonPropertyName("totalQuests")]
        public decimal? TotalQuests { get { return this.TotalQuestsOption; } set { this.TotalQuestsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CompletedStories
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> CompletedStoriesOption { get; private set; }

        /// <summary>
        /// Gets or Sets CompletedStories
        /// </summary>
        [JsonPropertyName("completedStories")]
        public decimal? CompletedStories { get { return this.CompletedStoriesOption; } set { this.CompletedStoriesOption = new(value); } }

        /// <summary>
        /// Used to track the state of CompletionRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> CompletionRateOption { get; private set; }

        /// <summary>
        /// Gets or Sets CompletionRate
        /// </summary>
        [JsonPropertyName("completionRate")]
        public decimal? CompletionRate { get { return this.CompletionRateOption; } set { this.CompletionRateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetGlobalStats200ResponseDataStories {\n");
            sb.Append("  TotalStories: ").Append(TotalStories).Append("\n");
            sb.Append("  TotalQuests: ").Append(TotalQuests).Append("\n");
            sb.Append("  CompletedStories: ").Append(CompletedStories).Append("\n");
            sb.Append("  CompletionRate: ").Append(CompletionRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetGlobalStats200ResponseDataStories" />
    /// </summary>
    public class GetGlobalStats200ResponseDataStoriesJsonConverter : JsonConverter<GetGlobalStats200ResponseDataStories>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetGlobalStats200ResponseDataStories" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetGlobalStats200ResponseDataStories Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> totalStories = default;
            Option<decimal?> totalQuests = default;
            Option<decimal?> completedStories = default;
            Option<decimal?> completionRate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "totalStories":
                            totalStories = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "totalQuests":
                            totalQuests = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "completedStories":
                            completedStories = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "completionRate":
                            completionRate = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (totalStories.IsSet && totalStories.Value == null)
                throw new ArgumentNullException(nameof(totalStories), "Property is not nullable for class GetGlobalStats200ResponseDataStories.");

            if (totalQuests.IsSet && totalQuests.Value == null)
                throw new ArgumentNullException(nameof(totalQuests), "Property is not nullable for class GetGlobalStats200ResponseDataStories.");

            if (completedStories.IsSet && completedStories.Value == null)
                throw new ArgumentNullException(nameof(completedStories), "Property is not nullable for class GetGlobalStats200ResponseDataStories.");

            if (completionRate.IsSet && completionRate.Value == null)
                throw new ArgumentNullException(nameof(completionRate), "Property is not nullable for class GetGlobalStats200ResponseDataStories.");

            return new GetGlobalStats200ResponseDataStories(totalStories, totalQuests, completedStories, completionRate);
        }

        /// <summary>
        /// Serializes a <see cref="GetGlobalStats200ResponseDataStories" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getGlobalStats200ResponseDataStories"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetGlobalStats200ResponseDataStories getGlobalStats200ResponseDataStories, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getGlobalStats200ResponseDataStories, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetGlobalStats200ResponseDataStories" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getGlobalStats200ResponseDataStories"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetGlobalStats200ResponseDataStories getGlobalStats200ResponseDataStories, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getGlobalStats200ResponseDataStories.TotalStoriesOption.IsSet)
                writer.WriteNumber("totalStories", getGlobalStats200ResponseDataStories.TotalStoriesOption.Value!.Value);

            if (getGlobalStats200ResponseDataStories.TotalQuestsOption.IsSet)
                writer.WriteNumber("totalQuests", getGlobalStats200ResponseDataStories.TotalQuestsOption.Value!.Value);

            if (getGlobalStats200ResponseDataStories.CompletedStoriesOption.IsSet)
                writer.WriteNumber("completedStories", getGlobalStats200ResponseDataStories.CompletedStoriesOption.Value!.Value);

            if (getGlobalStats200ResponseDataStories.CompletionRateOption.IsSet)
                writer.WriteNumber("completionRate", getGlobalStats200ResponseDataStories.CompletionRateOption.Value!.Value);
        }
    }
}
