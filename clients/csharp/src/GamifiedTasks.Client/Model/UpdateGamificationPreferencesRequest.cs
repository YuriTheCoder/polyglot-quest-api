// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// UpdateGamificationPreferencesRequest
    /// </summary>
    public partial class UpdateGamificationPreferencesRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateGamificationPreferencesRequest" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="theme">theme</param>
        /// <param name="autoShare">autoShare</param>
        /// <param name="shareOnLevelUp">shareOnLevelUp</param>
        /// <param name="shareOnBadge">shareOnBadge</param>
        [JsonConstructor]
        public UpdateGamificationPreferencesRequest(Option<ClassEnum?> @class = default, Option<ThemeEnum?> theme = default, Option<bool?> autoShare = default, Option<bool?> shareOnLevelUp = default, Option<bool?> shareOnBadge = default)
        {
            ClassOption = @class;
            ThemeOption = theme;
            AutoShareOption = autoShare;
            ShareOnLevelUpOption = shareOnLevelUp;
            ShareOnBadgeOption = shareOnBadge;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Class
        /// </summary>
        public enum ClassEnum
        {
            /// <summary>
            /// Enum Aventureiro for value: Aventureiro
            /// </summary>
            Aventureiro = 1,

            /// <summary>
            /// Enum Guerreiro for value: Guerreiro
            /// </summary>
            Guerreiro = 2,

            /// <summary>
            /// Enum Mago for value: Mago
            /// </summary>
            Mago = 3,

            /// <summary>
            /// Enum Ladino for value: Ladino
            /// </summary>
            Ladino = 4,

            /// <summary>
            /// Enum Paladino for value: Paladino
            /// </summary>
            Paladino = 5,

            /// <summary>
            /// Enum Explorador for value: Explorador
            /// </summary>
            Explorador = 6
        }

        /// <summary>
        /// Returns a <see cref="ClassEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ClassEnum ClassEnumFromString(string value)
        {
            if (value.Equals("Aventureiro"))
                return ClassEnum.Aventureiro;

            if (value.Equals("Guerreiro"))
                return ClassEnum.Guerreiro;

            if (value.Equals("Mago"))
                return ClassEnum.Mago;

            if (value.Equals("Ladino"))
                return ClassEnum.Ladino;

            if (value.Equals("Paladino"))
                return ClassEnum.Paladino;

            if (value.Equals("Explorador"))
                return ClassEnum.Explorador;

            throw new NotImplementedException($"Could not convert value to type ClassEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ClassEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ClassEnum? ClassEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Aventureiro"))
                return ClassEnum.Aventureiro;

            if (value.Equals("Guerreiro"))
                return ClassEnum.Guerreiro;

            if (value.Equals("Mago"))
                return ClassEnum.Mago;

            if (value.Equals("Ladino"))
                return ClassEnum.Ladino;

            if (value.Equals("Paladino"))
                return ClassEnum.Paladino;

            if (value.Equals("Explorador"))
                return ClassEnum.Explorador;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ClassEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ClassEnumToJsonValue(ClassEnum? value)
        {
            if (value == ClassEnum.Aventureiro)
                return "Aventureiro";

            if (value == ClassEnum.Guerreiro)
                return "Guerreiro";

            if (value == ClassEnum.Mago)
                return "Mago";

            if (value == ClassEnum.Ladino)
                return "Ladino";

            if (value == ClassEnum.Paladino)
                return "Paladino";

            if (value == ClassEnum.Explorador)
                return "Explorador";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ClassEnum?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        /* <example>Guerreiro</example> */
        [JsonPropertyName("class")]
        public ClassEnum? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Defines Theme
        /// </summary>
        public enum ThemeEnum
        {
            /// <summary>
            /// Enum Medieval for value: medieval
            /// </summary>
            Medieval = 1,

            /// <summary>
            /// Enum Scifi for value: scifi
            /// </summary>
            Scifi = 2,

            /// <summary>
            /// Enum Modern for value: modern
            /// </summary>
            Modern = 3,

            /// <summary>
            /// Enum Fantasy for value: fantasy
            /// </summary>
            Fantasy = 4
        }

        /// <summary>
        /// Returns a <see cref="ThemeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ThemeEnum ThemeEnumFromString(string value)
        {
            if (value.Equals("medieval"))
                return ThemeEnum.Medieval;

            if (value.Equals("scifi"))
                return ThemeEnum.Scifi;

            if (value.Equals("modern"))
                return ThemeEnum.Modern;

            if (value.Equals("fantasy"))
                return ThemeEnum.Fantasy;

            throw new NotImplementedException($"Could not convert value to type ThemeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ThemeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThemeEnum? ThemeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("medieval"))
                return ThemeEnum.Medieval;

            if (value.Equals("scifi"))
                return ThemeEnum.Scifi;

            if (value.Equals("modern"))
                return ThemeEnum.Modern;

            if (value.Equals("fantasy"))
                return ThemeEnum.Fantasy;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ThemeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ThemeEnumToJsonValue(ThemeEnum? value)
        {
            if (value == ThemeEnum.Medieval)
                return "medieval";

            if (value == ThemeEnum.Scifi)
                return "scifi";

            if (value == ThemeEnum.Modern)
                return "modern";

            if (value == ThemeEnum.Fantasy)
                return "fantasy";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Theme
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThemeEnum?> ThemeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        /* <example>medieval</example> */
        [JsonPropertyName("theme")]
        public ThemeEnum? Theme { get { return this.ThemeOption; } set { this.ThemeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AutoShare
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AutoShareOption { get; private set; }

        /// <summary>
        /// Gets or Sets AutoShare
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("autoShare")]
        public bool? AutoShare { get { return this.AutoShareOption; } set { this.AutoShareOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShareOnLevelUp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShareOnLevelUpOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShareOnLevelUp
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("shareOnLevelUp")]
        public bool? ShareOnLevelUp { get { return this.ShareOnLevelUpOption; } set { this.ShareOnLevelUpOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShareOnBadge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShareOnBadgeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShareOnBadge
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("shareOnBadge")]
        public bool? ShareOnBadge { get { return this.ShareOnBadgeOption; } set { this.ShareOnBadgeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateGamificationPreferencesRequest {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  AutoShare: ").Append(AutoShare).Append("\n");
            sb.Append("  ShareOnLevelUp: ").Append(ShareOnLevelUp).Append("\n");
            sb.Append("  ShareOnBadge: ").Append(ShareOnBadge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateGamificationPreferencesRequest" />
    /// </summary>
    public class UpdateGamificationPreferencesRequestJsonConverter : JsonConverter<UpdateGamificationPreferencesRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateGamificationPreferencesRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateGamificationPreferencesRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<UpdateGamificationPreferencesRequest.ClassEnum?> varClass = default;
            Option<UpdateGamificationPreferencesRequest.ThemeEnum?> theme = default;
            Option<bool?> autoShare = default;
            Option<bool?> shareOnLevelUp = default;
            Option<bool?> shareOnBadge = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "class":
                            string? varClassRawValue = utf8JsonReader.GetString();
                            if (varClassRawValue != null)
                                varClass = new Option<UpdateGamificationPreferencesRequest.ClassEnum?>(UpdateGamificationPreferencesRequest.ClassEnumFromStringOrDefault(varClassRawValue));
                            break;
                        case "theme":
                            string? themeRawValue = utf8JsonReader.GetString();
                            if (themeRawValue != null)
                                theme = new Option<UpdateGamificationPreferencesRequest.ThemeEnum?>(UpdateGamificationPreferencesRequest.ThemeEnumFromStringOrDefault(themeRawValue));
                            break;
                        case "autoShare":
                            autoShare = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "shareOnLevelUp":
                            shareOnLevelUp = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "shareOnBadge":
                            shareOnBadge = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class UpdateGamificationPreferencesRequest.");

            if (theme.IsSet && theme.Value == null)
                throw new ArgumentNullException(nameof(theme), "Property is not nullable for class UpdateGamificationPreferencesRequest.");

            if (autoShare.IsSet && autoShare.Value == null)
                throw new ArgumentNullException(nameof(autoShare), "Property is not nullable for class UpdateGamificationPreferencesRequest.");

            if (shareOnLevelUp.IsSet && shareOnLevelUp.Value == null)
                throw new ArgumentNullException(nameof(shareOnLevelUp), "Property is not nullable for class UpdateGamificationPreferencesRequest.");

            if (shareOnBadge.IsSet && shareOnBadge.Value == null)
                throw new ArgumentNullException(nameof(shareOnBadge), "Property is not nullable for class UpdateGamificationPreferencesRequest.");

            return new UpdateGamificationPreferencesRequest(varClass, theme, autoShare, shareOnLevelUp, shareOnBadge);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateGamificationPreferencesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateGamificationPreferencesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateGamificationPreferencesRequest updateGamificationPreferencesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateGamificationPreferencesRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateGamificationPreferencesRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateGamificationPreferencesRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateGamificationPreferencesRequest updateGamificationPreferencesRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            var varClassRawValue = UpdateGamificationPreferencesRequest.ClassEnumToJsonValue(updateGamificationPreferencesRequest.ClassOption.Value!.Value);
            writer.WriteString("class", varClassRawValue);
            var themeRawValue = UpdateGamificationPreferencesRequest.ThemeEnumToJsonValue(updateGamificationPreferencesRequest.ThemeOption.Value!.Value);
            writer.WriteString("theme", themeRawValue);
            if (updateGamificationPreferencesRequest.AutoShareOption.IsSet)
                writer.WriteBoolean("autoShare", updateGamificationPreferencesRequest.AutoShareOption.Value!.Value);

            if (updateGamificationPreferencesRequest.ShareOnLevelUpOption.IsSet)
                writer.WriteBoolean("shareOnLevelUp", updateGamificationPreferencesRequest.ShareOnLevelUpOption.Value!.Value);

            if (updateGamificationPreferencesRequest.ShareOnBadgeOption.IsSet)
                writer.WriteBoolean("shareOnBadge", updateGamificationPreferencesRequest.ShareOnBadgeOption.Value!.Value);
        }
    }
}
