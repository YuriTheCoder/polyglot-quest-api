// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// ChangeUserPasswordRequest
    /// </summary>
    public partial class ChangeUserPasswordRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeUserPasswordRequest" /> class.
        /// </summary>
        /// <param name="currentPassword">currentPassword</param>
        /// <param name="newPassword">newPassword</param>
        [JsonConstructor]
        public ChangeUserPasswordRequest(string currentPassword, string newPassword)
        {
            CurrentPassword = currentPassword;
            NewPassword = newPassword;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CurrentPassword
        /// </summary>
        /* <example>123456</example> */
        [JsonPropertyName("currentPassword")]
        public string CurrentPassword { get; set; }

        /// <summary>
        /// Gets or Sets NewPassword
        /// </summary>
        /* <example>novaSenha123</example> */
        [JsonPropertyName("newPassword")]
        public string NewPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangeUserPasswordRequest {\n");
            sb.Append("  CurrentPassword: ").Append(CurrentPassword).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NewPassword (string) minLength
            if (this.NewPassword != null && this.NewPassword.Length < 6)
            {
                yield return new ValidationResult("Invalid value for NewPassword, length must be greater than 6.", new [] { "NewPassword" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChangeUserPasswordRequest" />
    /// </summary>
    public class ChangeUserPasswordRequestJsonConverter : JsonConverter<ChangeUserPasswordRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChangeUserPasswordRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChangeUserPasswordRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> currentPassword = default;
            Option<string?> newPassword = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "currentPassword":
                            currentPassword = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "newPassword":
                            newPassword = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!currentPassword.IsSet)
                throw new ArgumentException("Property is required for class ChangeUserPasswordRequest.", nameof(currentPassword));

            if (!newPassword.IsSet)
                throw new ArgumentException("Property is required for class ChangeUserPasswordRequest.", nameof(newPassword));

            if (currentPassword.IsSet && currentPassword.Value == null)
                throw new ArgumentNullException(nameof(currentPassword), "Property is not nullable for class ChangeUserPasswordRequest.");

            if (newPassword.IsSet && newPassword.Value == null)
                throw new ArgumentNullException(nameof(newPassword), "Property is not nullable for class ChangeUserPasswordRequest.");

            return new ChangeUserPasswordRequest(currentPassword.Value!, newPassword.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ChangeUserPasswordRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="changeUserPasswordRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChangeUserPasswordRequest changeUserPasswordRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, changeUserPasswordRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChangeUserPasswordRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="changeUserPasswordRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChangeUserPasswordRequest changeUserPasswordRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (changeUserPasswordRequest.CurrentPassword == null)
                throw new ArgumentNullException(nameof(changeUserPasswordRequest.CurrentPassword), "Property is required for class ChangeUserPasswordRequest.");

            if (changeUserPasswordRequest.NewPassword == null)
                throw new ArgumentNullException(nameof(changeUserPasswordRequest.NewPassword), "Property is required for class ChangeUserPasswordRequest.");

            writer.WriteString("currentPassword", changeUserPasswordRequest.CurrentPassword);

            writer.WriteString("newPassword", changeUserPasswordRequest.NewPassword);
        }
    }
}
