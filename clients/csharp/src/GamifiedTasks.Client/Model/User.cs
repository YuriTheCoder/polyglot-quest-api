// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// User
    /// </summary>
    public partial class User : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="email">email</param>
        /// <param name="role">role</param>
        /// <param name="isActive">isActive</param>
        /// <param name="lastLogin">lastLogin</param>
        /// <param name="gamification">gamification</param>
        [JsonConstructor]
        public User(Option<string?> id = default, Option<string?> name = default, Option<string?> email = default, Option<RoleEnum?> role = default, Option<bool?> isActive = default, Option<DateTime?> lastLogin = default, Option<UserGamification?> gamification = default)
        {
            IdOption = id;
            NameOption = name;
            EmailOption = email;
            RoleOption = role;
            IsActiveOption = isActive;
            LastLoginOption = lastLogin;
            GamificationOption = gamification;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Role
        /// </summary>
        public enum RoleEnum
        {
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            User = 1,

            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            Admin = 2
        }

        /// <summary>
        /// Returns a <see cref="RoleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RoleEnum RoleEnumFromString(string value)
        {
            if (value.Equals("user"))
                return RoleEnum.User;

            if (value.Equals("admin"))
                return RoleEnum.Admin;

            throw new NotImplementedException($"Could not convert value to type RoleEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RoleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RoleEnum? RoleEnumFromStringOrDefault(string value)
        {
            if (value.Equals("user"))
                return RoleEnum.User;

            if (value.Equals("admin"))
                return RoleEnum.Admin;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RoleEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RoleEnumToJsonValue(RoleEnum? value)
        {
            if (value == RoleEnum.User)
                return "user";

            if (value == RoleEnum.Admin)
                return "admin";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RoleEnum?> RoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        /* <example>user</example> */
        [JsonPropertyName("role")]
        public RoleEnum? Role { get { return this.RoleOption; } set { this.RoleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>64a1b2c3d4e5f6789abcdef0</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Yuri Dev</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        /* <example>yuri.dev@example.com</example> */
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("isActive")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastLogin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastLoginOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastLogin
        /// </summary>
        [JsonPropertyName("lastLogin")]
        public DateTime? LastLogin { get { return this.LastLoginOption; } set { this.LastLoginOption = new(value); } }

        /// <summary>
        /// Used to track the state of Gamification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UserGamification?> GamificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Gamification
        /// </summary>
        [JsonPropertyName("gamification")]
        public UserGamification? Gamification { get { return this.GamificationOption; } set { this.GamificationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  Gamification: ").Append(Gamification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="User" />
    /// </summary>
    public class UserJsonConverter : JsonConverter<User>
    {
        /// <summary>
        /// The format to use to serialize LastLogin
        /// </summary>
        public static string LastLoginFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="User" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override User Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> email = default;
            Option<User.RoleEnum?> role = default;
            Option<bool?> isActive = default;
            Option<DateTime?> lastLogin = default;
            Option<UserGamification?> gamification = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "role":
                            string? roleRawValue = utf8JsonReader.GetString();
                            if (roleRawValue != null)
                                role = new Option<User.RoleEnum?>(User.RoleEnumFromStringOrDefault(roleRawValue));
                            break;
                        case "isActive":
                            isActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "lastLogin":
                            lastLogin = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "gamification":
                            gamification = new Option<UserGamification?>(JsonSerializer.Deserialize<UserGamification>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class User.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class User.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class User.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class User.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class User.");

            if (lastLogin.IsSet && lastLogin.Value == null)
                throw new ArgumentNullException(nameof(lastLogin), "Property is not nullable for class User.");

            if (gamification.IsSet && gamification.Value == null)
                throw new ArgumentNullException(nameof(gamification), "Property is not nullable for class User.");

            return new User(id, name, email, role, isActive, lastLogin, gamification);
        }

        /// <summary>
        /// Serializes a <see cref="User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="user"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, User user, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, user, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="user"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, User user, JsonSerializerOptions jsonSerializerOptions)
        {
            if (user.IdOption.IsSet && user.Id == null)
                throw new ArgumentNullException(nameof(user.Id), "Property is required for class User.");

            if (user.NameOption.IsSet && user.Name == null)
                throw new ArgumentNullException(nameof(user.Name), "Property is required for class User.");

            if (user.EmailOption.IsSet && user.Email == null)
                throw new ArgumentNullException(nameof(user.Email), "Property is required for class User.");

            if (user.GamificationOption.IsSet && user.Gamification == null)
                throw new ArgumentNullException(nameof(user.Gamification), "Property is required for class User.");

            if (user.IdOption.IsSet)
                writer.WriteString("id", user.Id);

            if (user.NameOption.IsSet)
                writer.WriteString("name", user.Name);

            if (user.EmailOption.IsSet)
                writer.WriteString("email", user.Email);

            var roleRawValue = User.RoleEnumToJsonValue(user.RoleOption.Value!.Value);
            writer.WriteString("role", roleRawValue);
            if (user.IsActiveOption.IsSet)
                writer.WriteBoolean("isActive", user.IsActiveOption.Value!.Value);

            if (user.LastLoginOption.IsSet)
                writer.WriteString("lastLogin", user.LastLoginOption.Value!.Value.ToString(LastLoginFormat));

            if (user.GamificationOption.IsSet)
            {
                writer.WritePropertyName("gamification");
                JsonSerializer.Serialize(writer, user.Gamification, jsonSerializerOptions);
            }
        }
    }
}
