// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// Story
    /// </summary>
    public partial class Story : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Story" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="title">title</param>
        /// <param name="varStory">varStory</param>
        /// <param name="theme">theme</param>
        /// <param name="progress">progress</param>
        [JsonConstructor]
        public Story(Option<string?> id = default, Option<string?> title = default, Option<string?> varStory = default, Option<ThemeEnum?> theme = default, Option<decimal?> progress = default)
        {
            IdOption = id;
            TitleOption = title;
            VarStoryOption = varStory;
            ThemeOption = theme;
            ProgressOption = progress;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Theme
        /// </summary>
        public enum ThemeEnum
        {
            /// <summary>
            /// Enum Medieval for value: medieval
            /// </summary>
            Medieval = 1,

            /// <summary>
            /// Enum Scifi for value: scifi
            /// </summary>
            Scifi = 2,

            /// <summary>
            /// Enum Modern for value: modern
            /// </summary>
            Modern = 3,

            /// <summary>
            /// Enum Fantasy for value: fantasy
            /// </summary>
            Fantasy = 4
        }

        /// <summary>
        /// Returns a <see cref="ThemeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ThemeEnum ThemeEnumFromString(string value)
        {
            if (value.Equals("medieval"))
                return ThemeEnum.Medieval;

            if (value.Equals("scifi"))
                return ThemeEnum.Scifi;

            if (value.Equals("modern"))
                return ThemeEnum.Modern;

            if (value.Equals("fantasy"))
                return ThemeEnum.Fantasy;

            throw new NotImplementedException($"Could not convert value to type ThemeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ThemeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThemeEnum? ThemeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("medieval"))
                return ThemeEnum.Medieval;

            if (value.Equals("scifi"))
                return ThemeEnum.Scifi;

            if (value.Equals("modern"))
                return ThemeEnum.Modern;

            if (value.Equals("fantasy"))
                return ThemeEnum.Fantasy;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ThemeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ThemeEnumToJsonValue(ThemeEnum? value)
        {
            if (value == ThemeEnum.Medieval)
                return "medieval";

            if (value == ThemeEnum.Scifi)
                return "scifi";

            if (value == ThemeEnum.Modern)
                return "modern";

            if (value == ThemeEnum.Fantasy)
                return "fantasy";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Theme
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ThemeEnum?> ThemeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [JsonPropertyName("theme")]
        public ThemeEnum? Theme { get { return this.ThemeOption; } set { this.ThemeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>64a1b2c3d4e5f6789abcdef2</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        /* <example>A Batalha contra o Bug Monstruoso</example> */
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarStory
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarStoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarStory
        /// </summary>
        /* <example>Nas profundezas do código, um bug terrível despertou...</example> */
        [JsonPropertyName("story")]
        public string? VarStory { get { return this.VarStoryOption; } set { this.VarStoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Progress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ProgressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Progress
        /// </summary>
        /* <example>50</example> */
        [JsonPropertyName("progress")]
        public decimal? Progress { get { return this.ProgressOption; } set { this.ProgressOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Story {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  VarStory: ").Append(VarStory).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Story" />
    /// </summary>
    public class StoryJsonConverter : JsonConverter<Story>
    {
        /// <summary>
        /// Deserializes json to <see cref="Story" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Story Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> title = default;
            Option<string?> varStory = default;
            Option<Story.ThemeEnum?> theme = default;
            Option<decimal?> progress = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "story":
                            varStory = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "theme":
                            string? themeRawValue = utf8JsonReader.GetString();
                            if (themeRawValue != null)
                                theme = new Option<Story.ThemeEnum?>(Story.ThemeEnumFromStringOrDefault(themeRawValue));
                            break;
                        case "progress":
                            progress = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Story.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Story.");

            if (varStory.IsSet && varStory.Value == null)
                throw new ArgumentNullException(nameof(varStory), "Property is not nullable for class Story.");

            if (theme.IsSet && theme.Value == null)
                throw new ArgumentNullException(nameof(theme), "Property is not nullable for class Story.");

            if (progress.IsSet && progress.Value == null)
                throw new ArgumentNullException(nameof(progress), "Property is not nullable for class Story.");

            return new Story(id, title, varStory, theme, progress);
        }

        /// <summary>
        /// Serializes a <see cref="Story" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="story"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Story story, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, story, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Story" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="story"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Story story, JsonSerializerOptions jsonSerializerOptions)
        {
            if (story.IdOption.IsSet && story.Id == null)
                throw new ArgumentNullException(nameof(story.Id), "Property is required for class Story.");

            if (story.TitleOption.IsSet && story.Title == null)
                throw new ArgumentNullException(nameof(story.Title), "Property is required for class Story.");

            if (story.VarStoryOption.IsSet && story.VarStory == null)
                throw new ArgumentNullException(nameof(story.VarStory), "Property is required for class Story.");

            if (story.IdOption.IsSet)
                writer.WriteString("id", story.Id);

            if (story.TitleOption.IsSet)
                writer.WriteString("title", story.Title);

            if (story.VarStoryOption.IsSet)
                writer.WriteString("story", story.VarStory);

            var themeRawValue = Story.ThemeEnumToJsonValue(story.ThemeOption.Value!.Value);
            writer.WriteString("theme", themeRawValue);
            if (story.ProgressOption.IsSet)
                writer.WriteNumber("progress", story.ProgressOption.Value!.Value);
        }
    }
}
