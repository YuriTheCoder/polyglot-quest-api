// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// ShareMilestoneRequest
    /// </summary>
    public partial class ShareMilestoneRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareMilestoneRequest" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="data">data</param>
        [JsonConstructor]
        public ShareMilestoneRequest(TypeEnum type, Option<ShareMilestoneRequestData?> data = default)
        {
            Type = type;
            DataOption = data;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum LevelUp for value: level_up
            /// </summary>
            LevelUp = 1,

            /// <summary>
            /// Enum BadgeEarned for value: badge_earned
            /// </summary>
            BadgeEarned = 2,

            /// <summary>
            /// Enum StreakMilestone for value: streak_milestone
            /// </summary>
            StreakMilestone = 3,

            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            Custom = 4
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("level_up"))
                return TypeEnum.LevelUp;

            if (value.Equals("badge_earned"))
                return TypeEnum.BadgeEarned;

            if (value.Equals("streak_milestone"))
                return TypeEnum.StreakMilestone;

            if (value.Equals("custom"))
                return TypeEnum.Custom;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("level_up"))
                return TypeEnum.LevelUp;

            if (value.Equals("badge_earned"))
                return TypeEnum.BadgeEarned;

            if (value.Equals("streak_milestone"))
                return TypeEnum.StreakMilestone;

            if (value.Equals("custom"))
                return TypeEnum.Custom;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.LevelUp)
                return "level_up";

            if (value == TypeEnum.BadgeEarned)
                return "badge_earned";

            if (value == TypeEnum.StreakMilestone)
                return "streak_milestone";

            if (value == TypeEnum.Custom)
                return "custom";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /* <example>level_up</example> */
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ShareMilestoneRequestData?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public ShareMilestoneRequestData? Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShareMilestoneRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShareMilestoneRequest" />
    /// </summary>
    public class ShareMilestoneRequestJsonConverter : JsonConverter<ShareMilestoneRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShareMilestoneRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShareMilestoneRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ShareMilestoneRequest.TypeEnum?> type = default;
            Option<ShareMilestoneRequestData?> data = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ShareMilestoneRequest.TypeEnum?>(ShareMilestoneRequest.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "data":
                            data = new Option<ShareMilestoneRequestData?>(JsonSerializer.Deserialize<ShareMilestoneRequestData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ShareMilestoneRequest.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ShareMilestoneRequest.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class ShareMilestoneRequest.");

            return new ShareMilestoneRequest(type.Value!.Value!, data);
        }

        /// <summary>
        /// Serializes a <see cref="ShareMilestoneRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shareMilestoneRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShareMilestoneRequest shareMilestoneRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shareMilestoneRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShareMilestoneRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shareMilestoneRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShareMilestoneRequest shareMilestoneRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shareMilestoneRequest.DataOption.IsSet && shareMilestoneRequest.Data == null)
                throw new ArgumentNullException(nameof(shareMilestoneRequest.Data), "Property is required for class ShareMilestoneRequest.");

            var typeRawValue = ShareMilestoneRequest.TypeEnumToJsonValue(shareMilestoneRequest.Type);
            writer.WriteString("type", typeRawValue);
            if (shareMilestoneRequest.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, shareMilestoneRequest.Data, jsonSerializerOptions);
            }
        }
    }
}
