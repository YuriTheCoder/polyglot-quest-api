// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using GamifiedTasks.Client.Client;

namespace GamifiedTasks.Client.Model
{
    /// <summary>
    /// Task
    /// </summary>
    public partial class Task : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Task" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="title">title</param>
        /// <param name="status">status</param>
        /// <param name="priority">priority</param>
        /// <param name="userId">userId</param>
        [JsonConstructor]
        public Task(Option<string?> id = default, Option<string?> title = default, Option<StatusEnum?> status = default, Option<PriorityEnum?> priority = default, Option<string?> userId = default)
        {
            IdOption = id;
            TitleOption = title;
            StatusOption = status;
            PriorityOption = priority;
            UserIdOption = userId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 1,

            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            InProgress = 2,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            Completed = 3
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("in_progress"))
                return StatusEnum.InProgress;

            if (value.Equals("completed"))
                return StatusEnum.Completed;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("in_progress"))
                return StatusEnum.InProgress;

            if (value.Equals("completed"))
                return StatusEnum.Completed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == StatusEnum.Pending)
                return "pending";

            if (value == StatusEnum.InProgress)
                return "in_progress";

            if (value == StatusEnum.Completed)
                return "completed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Defines Priority
        /// </summary>
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            Low = 1,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            Medium = 2,

            /// <summary>
            /// Enum High for value: high
            /// </summary>
            High = 3
        }

        /// <summary>
        /// Returns a <see cref="PriorityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PriorityEnum PriorityEnumFromString(string value)
        {
            if (value.Equals("low"))
                return PriorityEnum.Low;

            if (value.Equals("medium"))
                return PriorityEnum.Medium;

            if (value.Equals("high"))
                return PriorityEnum.High;

            throw new NotImplementedException($"Could not convert value to type PriorityEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PriorityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PriorityEnum? PriorityEnumFromStringOrDefault(string value)
        {
            if (value.Equals("low"))
                return PriorityEnum.Low;

            if (value.Equals("medium"))
                return PriorityEnum.Medium;

            if (value.Equals("high"))
                return PriorityEnum.High;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PriorityEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PriorityEnumToJsonValue(PriorityEnum? value)
        {
            if (value == PriorityEnum.Low)
                return "low";

            if (value == PriorityEnum.Medium)
                return "medium";

            if (value == PriorityEnum.High)
                return "high";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Priority
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PriorityEnum?> PriorityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonPropertyName("priority")]
        public PriorityEnum? Priority { get { return this.PriorityOption; } set { this.PriorityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>64a1b2c3d4e5f6789abcdef1</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        /* <example>Implementar Story-Mode</example> */
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        /* <example>64a1b2c3d4e5f6789abcdef0</example> */
        [JsonPropertyName("userId")]
        public string? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Task {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Task" />
    /// </summary>
    public class TaskJsonConverter : JsonConverter<Task>
    {
        /// <summary>
        /// Deserializes json to <see cref="Task" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Task Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> title = default;
            Option<Task.StatusEnum?> status = default;
            Option<Task.PriorityEnum?> priority = default;
            Option<string?> userId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<Task.StatusEnum?>(Task.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "priority":
                            string? priorityRawValue = utf8JsonReader.GetString();
                            if (priorityRawValue != null)
                                priority = new Option<Task.PriorityEnum?>(Task.PriorityEnumFromStringOrDefault(priorityRawValue));
                            break;
                        case "userId":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Task.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Task.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Task.");

            if (priority.IsSet && priority.Value == null)
                throw new ArgumentNullException(nameof(priority), "Property is not nullable for class Task.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class Task.");

            return new Task(id, title, status, priority, userId);
        }

        /// <summary>
        /// Serializes a <see cref="Task" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="task"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Task task, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, task, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Task" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="task"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Task task, JsonSerializerOptions jsonSerializerOptions)
        {
            if (task.IdOption.IsSet && task.Id == null)
                throw new ArgumentNullException(nameof(task.Id), "Property is required for class Task.");

            if (task.TitleOption.IsSet && task.Title == null)
                throw new ArgumentNullException(nameof(task.Title), "Property is required for class Task.");

            if (task.UserIdOption.IsSet && task.UserId == null)
                throw new ArgumentNullException(nameof(task.UserId), "Property is required for class Task.");

            if (task.IdOption.IsSet)
                writer.WriteString("id", task.Id);

            if (task.TitleOption.IsSet)
                writer.WriteString("title", task.Title);

            var statusRawValue = Task.StatusEnumToJsonValue(task.StatusOption.Value!.Value);
            writer.WriteString("status", statusRawValue);
            var priorityRawValue = Task.PriorityEnumToJsonValue(task.PriorityOption.Value!.Value);
            writer.WriteString("priority", priorityRawValue);
            if (task.UserIdOption.IsSet)
                writer.WriteString("userId", task.UserId);
        }
    }
}
