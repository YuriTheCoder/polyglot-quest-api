// <auto-generated>
/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using GamifiedTasks.Client.Client;
using GamifiedTasks.Client.Model;
using System.Diagnostics.CodeAnalysis;

namespace GamifiedTasks.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IGamificationApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        GamificationApiEvents Events { get; }

        /// <summary>
        /// Complete a quest (task) and get XP
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID da tarefa/quest</param>
        /// <param name="completeQuestRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICompleteQuestApiResponse"/>&gt;</returns>
        Task<ICompleteQuestApiResponse> CompleteQuestAsync(string id, Option<CompleteQuestRequest> completeQuestRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Complete a quest (task) and get XP
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">ID da tarefa/quest</param>
        /// <param name="completeQuestRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICompleteQuestApiResponse"/>?&gt;</returns>
        Task<ICompleteQuestApiResponse?> CompleteQuestOrDefaultAsync(string id, Option<CompleteQuestRequest> completeQuestRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate a story from tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStoryFromTasksRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateStoryFromTasksApiResponse"/>&gt;</returns>
        Task<ICreateStoryFromTasksApiResponse> CreateStoryFromTasksAsync(CreateStoryFromTasksRequest createStoryFromTasksRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate a story from tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createStoryFromTasksRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateStoryFromTasksApiResponse"/>?&gt;</returns>
        Task<ICreateStoryFromTasksApiResponse?> CreateStoryFromTasksOrDefaultAsync(CreateStoryFromTasksRequest createStoryFromTasksRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Listar badges disponíveis e conquistados
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBadgesApiResponse"/>&gt;</returns>
        Task<IGetBadgesApiResponse> GetBadgesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Listar badges disponíveis e conquistados
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBadgesApiResponse"/>?&gt;</returns>
        Task<IGetBadgesApiResponse?> GetBadgesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Dashboard de gamificação do usuário
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGamificationDashboardApiResponse"/>&gt;</returns>
        Task<IGetGamificationDashboardApiResponse> GetGamificationDashboardAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Dashboard de gamificação do usuário
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGamificationDashboardApiResponse"/>?&gt;</returns>
        Task<IGetGamificationDashboardApiResponse?> GetGamificationDashboardOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Estatísticas globais da plataforma
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGlobalStatsApiResponse"/>&gt;</returns>
        Task<IGetGlobalStatsApiResponse> GetGlobalStatsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Estatísticas globais da plataforma
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGlobalStatsApiResponse"/>?&gt;</returns>
        Task<IGetGlobalStatsApiResponse?> GetGlobalStatsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Obter leaderboard público
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Número de usuários no ranking (optional, default to 10)</param>
        /// <param name="period">Período do ranking (optional, default to all)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLeaderboardApiResponse"/>&gt;</returns>
        Task<IGetLeaderboardApiResponse> GetLeaderboardAsync(Option<int> limit = default, Option<string> period = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Obter leaderboard público
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="limit">Número de usuários no ranking (optional, default to 10)</param>
        /// <param name="period">Período do ranking (optional, default to all)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLeaderboardApiResponse"/>?&gt;</returns>
        Task<IGetLeaderboardApiResponse?> GetLeaderboardOrDefaultAsync(Option<int> limit = default, Option<string> period = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a specific story by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID da história</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStoryByIdApiResponse"/>&gt;</returns>
        Task<IGetStoryByIdApiResponse> GetStoryByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a specific story by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">ID da história</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStoryByIdApiResponse"/>?&gt;</returns>
        Task<IGetStoryByIdApiResponse?> GetStoryByIdOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all stories for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Filtrar histórias ativas (optional, default to true)</param>
        /// <param name="limit">Limite de resultados (optional, default to 10)</param>
        /// <param name="page">Página (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListStoriesApiResponse"/>&gt;</returns>
        Task<IListStoriesApiResponse> ListStoriesAsync(Option<string> active = default, Option<int> limit = default, Option<int> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all stories for the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="active">Filtrar histórias ativas (optional, default to true)</param>
        /// <param name="limit">Limite de resultados (optional, default to 10)</param>
        /// <param name="page">Página (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListStoriesApiResponse"/>?&gt;</returns>
        Task<IListStoriesApiResponse?> ListStoriesOrDefaultAsync(Option<string> active = default, Option<int> limit = default, Option<int> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Compartilhar conquista manualmente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareMilestoneRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShareMilestoneApiResponse"/>&gt;</returns>
        Task<IShareMilestoneApiResponse> ShareMilestoneAsync(ShareMilestoneRequest shareMilestoneRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Compartilhar conquista manualmente
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="shareMilestoneRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShareMilestoneApiResponse"/>?&gt;</returns>
        Task<IShareMilestoneApiResponse?> ShareMilestoneOrDefaultAsync(ShareMilestoneRequest shareMilestoneRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Atualizar preferências de gamificação
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGamificationPreferencesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGamificationPreferencesApiResponse"/>&gt;</returns>
        Task<IUpdateGamificationPreferencesApiResponse> UpdateGamificationPreferencesAsync(Option<UpdateGamificationPreferencesRequest> updateGamificationPreferencesRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Atualizar preferências de gamificação
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="updateGamificationPreferencesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGamificationPreferencesApiResponse"/>?&gt;</returns>
        Task<IUpdateGamificationPreferencesApiResponse?> UpdateGamificationPreferencesOrDefaultAsync(Option<UpdateGamificationPreferencesRequest> updateGamificationPreferencesRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICompleteQuestApiResponse"/>
    /// </summary>
    public interface ICompleteQuestApiResponse : GamifiedTasks.Client.Client.IApiResponse, IOk<GamifiedTasks.Client.Model.CompleteQuest200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICreateStoryFromTasksApiResponse"/>
    /// </summary>
    public interface ICreateStoryFromTasksApiResponse : GamifiedTasks.Client.Client.IApiResponse, ICreated<GamifiedTasks.Client.Model.CreateStoryFromTasks201Response?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IGetBadgesApiResponse"/>
    /// </summary>
    public interface IGetBadgesApiResponse : GamifiedTasks.Client.Client.IApiResponse, IOk<GamifiedTasks.Client.Model.GetBadges200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGamificationDashboardApiResponse"/>
    /// </summary>
    public interface IGetGamificationDashboardApiResponse : GamifiedTasks.Client.Client.IApiResponse, IOk<GamifiedTasks.Client.Model.GetGamificationDashboard200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetGlobalStatsApiResponse"/>
    /// </summary>
    public interface IGetGlobalStatsApiResponse : GamifiedTasks.Client.Client.IApiResponse, IOk<GamifiedTasks.Client.Model.GetGlobalStats200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetLeaderboardApiResponse"/>
    /// </summary>
    public interface IGetLeaderboardApiResponse : GamifiedTasks.Client.Client.IApiResponse, IOk<GamifiedTasks.Client.Model.GetLeaderboard200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetStoryByIdApiResponse"/>
    /// </summary>
    public interface IGetStoryByIdApiResponse : GamifiedTasks.Client.Client.IApiResponse, IOk<GamifiedTasks.Client.Model.GetStoryById200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListStoriesApiResponse"/>
    /// </summary>
    public interface IListStoriesApiResponse : GamifiedTasks.Client.Client.IApiResponse, IOk<GamifiedTasks.Client.Model.ListStories200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IShareMilestoneApiResponse"/>
    /// </summary>
    public interface IShareMilestoneApiResponse : GamifiedTasks.Client.Client.IApiResponse, IOk<GamifiedTasks.Client.Model.ShareMilestone200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateGamificationPreferencesApiResponse"/>
    /// </summary>
    public interface IUpdateGamificationPreferencesApiResponse : GamifiedTasks.Client.Client.IApiResponse, IOk<GamifiedTasks.Client.Model.UpdateGamificationPreferences200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class GamificationApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCompleteQuest;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCompleteQuest;

        internal void ExecuteOnCompleteQuest(GamificationApi.CompleteQuestApiResponse apiResponse)
        {
            OnCompleteQuest?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCompleteQuest(Exception exception)
        {
            OnErrorCompleteQuest?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateStoryFromTasks;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateStoryFromTasks;

        internal void ExecuteOnCreateStoryFromTasks(GamificationApi.CreateStoryFromTasksApiResponse apiResponse)
        {
            OnCreateStoryFromTasks?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateStoryFromTasks(Exception exception)
        {
            OnErrorCreateStoryFromTasks?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBadges;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBadges;

        internal void ExecuteOnGetBadges(GamificationApi.GetBadgesApiResponse apiResponse)
        {
            OnGetBadges?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBadges(Exception exception)
        {
            OnErrorGetBadges?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGamificationDashboard;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGamificationDashboard;

        internal void ExecuteOnGetGamificationDashboard(GamificationApi.GetGamificationDashboardApiResponse apiResponse)
        {
            OnGetGamificationDashboard?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGamificationDashboard(Exception exception)
        {
            OnErrorGetGamificationDashboard?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGlobalStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGlobalStats;

        internal void ExecuteOnGetGlobalStats(GamificationApi.GetGlobalStatsApiResponse apiResponse)
        {
            OnGetGlobalStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGlobalStats(Exception exception)
        {
            OnErrorGetGlobalStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLeaderboard;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLeaderboard;

        internal void ExecuteOnGetLeaderboard(GamificationApi.GetLeaderboardApiResponse apiResponse)
        {
            OnGetLeaderboard?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLeaderboard(Exception exception)
        {
            OnErrorGetLeaderboard?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStoryById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStoryById;

        internal void ExecuteOnGetStoryById(GamificationApi.GetStoryByIdApiResponse apiResponse)
        {
            OnGetStoryById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStoryById(Exception exception)
        {
            OnErrorGetStoryById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListStories;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListStories;

        internal void ExecuteOnListStories(GamificationApi.ListStoriesApiResponse apiResponse)
        {
            OnListStories?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListStories(Exception exception)
        {
            OnErrorListStories?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnShareMilestone;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorShareMilestone;

        internal void ExecuteOnShareMilestone(GamificationApi.ShareMilestoneApiResponse apiResponse)
        {
            OnShareMilestone?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorShareMilestone(Exception exception)
        {
            OnErrorShareMilestone?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateGamificationPreferences;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateGamificationPreferences;

        internal void ExecuteOnUpdateGamificationPreferences(GamificationApi.UpdateGamificationPreferencesApiResponse apiResponse)
        {
            OnUpdateGamificationPreferences?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateGamificationPreferences(Exception exception)
        {
            OnErrorUpdateGamificationPreferences?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class GamificationApi : IGamificationApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<GamificationApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public GamificationApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GamificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GamificationApi(ILogger<GamificationApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, GamificationApiEvents gamificationApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<GamificationApi>();
            HttpClient = httpClient;
            Events = gamificationApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCompleteQuest(ref string id, Option<CompleteQuestRequest> completeQuestRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="completeQuestRequest"></param>
        /// <returns></returns>
        private void ValidateCompleteQuest(string id, Option<CompleteQuestRequest> completeQuestRequest)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (completeQuestRequest.IsSet && completeQuestRequest.Value == null)
                throw new ArgumentNullException(nameof(completeQuestRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="completeQuestRequest"></param>
        private void AfterCompleteQuestDefaultImplementation(ICompleteQuestApiResponse apiResponseLocalVar, string id, Option<CompleteQuestRequest> completeQuestRequest)
        {
            bool suppressDefaultLog = false;
            AfterCompleteQuest(ref suppressDefaultLog, apiResponseLocalVar, id, completeQuestRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="completeQuestRequest"></param>
        partial void AfterCompleteQuest(ref bool suppressDefaultLog, ICompleteQuestApiResponse apiResponseLocalVar, string id, Option<CompleteQuestRequest> completeQuestRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="completeQuestRequest"></param>
        private void OnErrorCompleteQuestDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<CompleteQuestRequest> completeQuestRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCompleteQuest(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, completeQuestRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="completeQuestRequest"></param>
        partial void OnErrorCompleteQuest(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<CompleteQuestRequest> completeQuestRequest);

        /// <summary>
        /// Complete a quest (task) and get XP 
        /// </summary>
        /// <param name="id">ID da tarefa/quest</param>
        /// <param name="completeQuestRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICompleteQuestApiResponse"/>&gt;</returns>
        public async Task<ICompleteQuestApiResponse?> CompleteQuestOrDefaultAsync(string id, Option<CompleteQuestRequest> completeQuestRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CompleteQuestAsync(id, completeQuestRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Complete a quest (task) and get XP 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID da tarefa/quest</param>
        /// <param name="completeQuestRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICompleteQuestApiResponse"/>&gt;</returns>
        public async Task<ICompleteQuestApiResponse> CompleteQuestAsync(string id, Option<CompleteQuestRequest> completeQuestRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCompleteQuest(id, completeQuestRequest);

                FormatCompleteQuest(ref id, completeQuestRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/tasks/{id}/complete-quest"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/tasks/{id}/complete-quest");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (completeQuestRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (completeQuestRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(completeQuestRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CompleteQuestApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CompleteQuestApiResponse>();

                        CompleteQuestApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/tasks/{id}/complete-quest", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCompleteQuestDefaultImplementation(apiResponseLocalVar, id, completeQuestRequest);

                        Events.ExecuteOnCompleteQuest(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCompleteQuestDefaultImplementation(e, "/api/tasks/{id}/complete-quest", uriBuilderLocalVar.Path, id, completeQuestRequest);
                Events.ExecuteOnErrorCompleteQuest(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CompleteQuestApiResponse"/>
        /// </summary>
        public partial class CompleteQuestApiResponse : GamifiedTasks.Client.Client.ApiResponse, ICompleteQuestApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CompleteQuestApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CompleteQuestApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CompleteQuestApiResponse(ILogger<CompleteQuestApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public GamifiedTasks.Client.Model.CompleteQuest200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<GamifiedTasks.Client.Model.CompleteQuest200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out GamifiedTasks.Client.Model.CompleteQuest200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateStoryFromTasks(CreateStoryFromTasksRequest createStoryFromTasksRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createStoryFromTasksRequest"></param>
        /// <returns></returns>
        private void ValidateCreateStoryFromTasks(CreateStoryFromTasksRequest createStoryFromTasksRequest)
        {
            if (createStoryFromTasksRequest == null)
                throw new ArgumentNullException(nameof(createStoryFromTasksRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createStoryFromTasksRequest"></param>
        private void AfterCreateStoryFromTasksDefaultImplementation(ICreateStoryFromTasksApiResponse apiResponseLocalVar, CreateStoryFromTasksRequest createStoryFromTasksRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateStoryFromTasks(ref suppressDefaultLog, apiResponseLocalVar, createStoryFromTasksRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createStoryFromTasksRequest"></param>
        partial void AfterCreateStoryFromTasks(ref bool suppressDefaultLog, ICreateStoryFromTasksApiResponse apiResponseLocalVar, CreateStoryFromTasksRequest createStoryFromTasksRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createStoryFromTasksRequest"></param>
        private void OnErrorCreateStoryFromTasksDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateStoryFromTasksRequest createStoryFromTasksRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateStoryFromTasks(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createStoryFromTasksRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createStoryFromTasksRequest"></param>
        partial void OnErrorCreateStoryFromTasks(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateStoryFromTasksRequest createStoryFromTasksRequest);

        /// <summary>
        /// Generate a story from tasks 
        /// </summary>
        /// <param name="createStoryFromTasksRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateStoryFromTasksApiResponse"/>&gt;</returns>
        public async Task<ICreateStoryFromTasksApiResponse?> CreateStoryFromTasksOrDefaultAsync(CreateStoryFromTasksRequest createStoryFromTasksRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateStoryFromTasksAsync(createStoryFromTasksRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate a story from tasks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStoryFromTasksRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateStoryFromTasksApiResponse"/>&gt;</returns>
        public async Task<ICreateStoryFromTasksApiResponse> CreateStoryFromTasksAsync(CreateStoryFromTasksRequest createStoryFromTasksRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateStoryFromTasks(createStoryFromTasksRequest);

                FormatCreateStoryFromTasks(createStoryFromTasksRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/tasks/story"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/tasks/story");

                    httpRequestMessageLocalVar.Content = (createStoryFromTasksRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createStoryFromTasksRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateStoryFromTasksApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateStoryFromTasksApiResponse>();

                        CreateStoryFromTasksApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/tasks/story", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateStoryFromTasksDefaultImplementation(apiResponseLocalVar, createStoryFromTasksRequest);

                        Events.ExecuteOnCreateStoryFromTasks(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateStoryFromTasksDefaultImplementation(e, "/api/tasks/story", uriBuilderLocalVar.Path, createStoryFromTasksRequest);
                Events.ExecuteOnErrorCreateStoryFromTasks(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateStoryFromTasksApiResponse"/>
        /// </summary>
        public partial class CreateStoryFromTasksApiResponse : GamifiedTasks.Client.Client.ApiResponse, ICreateStoryFromTasksApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateStoryFromTasksApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateStoryFromTasksApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateStoryFromTasksApiResponse(ILogger<CreateStoryFromTasksApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public GamifiedTasks.Client.Model.CreateStoryFromTasks201Response? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<GamifiedTasks.Client.Model.CreateStoryFromTasks201Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out GamifiedTasks.Client.Model.CreateStoryFromTasks201Response? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetBadgesDefaultImplementation(IGetBadgesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetBadges(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetBadges(ref bool suppressDefaultLog, IGetBadgesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetBadgesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetBadges(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetBadges(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Listar badges disponíveis e conquistados 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBadgesApiResponse"/>&gt;</returns>
        public async Task<IGetBadgesApiResponse?> GetBadgesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBadgesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Listar badges disponíveis e conquistados 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBadgesApiResponse"/>&gt;</returns>
        public async Task<IGetBadgesApiResponse> GetBadgesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/gamification/badges"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/gamification/badges");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBadgesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBadgesApiResponse>();

                        GetBadgesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/gamification/badges", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBadgesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetBadges(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBadgesDefaultImplementation(e, "/api/gamification/badges", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetBadges(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBadgesApiResponse"/>
        /// </summary>
        public partial class GetBadgesApiResponse : GamifiedTasks.Client.Client.ApiResponse, IGetBadgesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBadgesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBadgesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBadgesApiResponse(ILogger<GetBadgesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public GamifiedTasks.Client.Model.GetBadges200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<GamifiedTasks.Client.Model.GetBadges200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out GamifiedTasks.Client.Model.GetBadges200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetGamificationDashboardDefaultImplementation(IGetGamificationDashboardApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetGamificationDashboard(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetGamificationDashboard(ref bool suppressDefaultLog, IGetGamificationDashboardApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetGamificationDashboardDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGamificationDashboard(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetGamificationDashboard(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Dashboard de gamificação do usuário 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGamificationDashboardApiResponse"/>&gt;</returns>
        public async Task<IGetGamificationDashboardApiResponse?> GetGamificationDashboardOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGamificationDashboardAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Dashboard de gamificação do usuário 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGamificationDashboardApiResponse"/>&gt;</returns>
        public async Task<IGetGamificationDashboardApiResponse> GetGamificationDashboardAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/gamification/dashboard"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/gamification/dashboard");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGamificationDashboardApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGamificationDashboardApiResponse>();

                        GetGamificationDashboardApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/gamification/dashboard", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGamificationDashboardDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetGamificationDashboard(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGamificationDashboardDefaultImplementation(e, "/api/gamification/dashboard", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetGamificationDashboard(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGamificationDashboardApiResponse"/>
        /// </summary>
        public partial class GetGamificationDashboardApiResponse : GamifiedTasks.Client.Client.ApiResponse, IGetGamificationDashboardApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGamificationDashboardApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGamificationDashboardApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGamificationDashboardApiResponse(ILogger<GetGamificationDashboardApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public GamifiedTasks.Client.Model.GetGamificationDashboard200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<GamifiedTasks.Client.Model.GetGamificationDashboard200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out GamifiedTasks.Client.Model.GetGamificationDashboard200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetGlobalStatsDefaultImplementation(IGetGlobalStatsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetGlobalStats(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetGlobalStats(ref bool suppressDefaultLog, IGetGlobalStatsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetGlobalStatsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGlobalStats(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetGlobalStats(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Estatísticas globais da plataforma 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGlobalStatsApiResponse"/>&gt;</returns>
        public async Task<IGetGlobalStatsApiResponse?> GetGlobalStatsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGlobalStatsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Estatísticas globais da plataforma 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGlobalStatsApiResponse"/>&gt;</returns>
        public async Task<IGetGlobalStatsApiResponse> GetGlobalStatsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/gamification/global-stats"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/gamification/global-stats");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGlobalStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGlobalStatsApiResponse>();

                        GetGlobalStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/gamification/global-stats", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGlobalStatsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetGlobalStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGlobalStatsDefaultImplementation(e, "/api/gamification/global-stats", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetGlobalStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGlobalStatsApiResponse"/>
        /// </summary>
        public partial class GetGlobalStatsApiResponse : GamifiedTasks.Client.Client.ApiResponse, IGetGlobalStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGlobalStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGlobalStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGlobalStatsApiResponse(ILogger<GetGlobalStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public GamifiedTasks.Client.Model.GetGlobalStats200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<GamifiedTasks.Client.Model.GetGlobalStats200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out GamifiedTasks.Client.Model.GetGlobalStats200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetLeaderboard(ref Option<int> limit, ref Option<string> period);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="period"></param>
        /// <returns></returns>
        private void ValidateGetLeaderboard(Option<string> period)
        {
            if (period.IsSet && period.Value == null)
                throw new ArgumentNullException(nameof(period));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="period"></param>
        private void AfterGetLeaderboardDefaultImplementation(IGetLeaderboardApiResponse apiResponseLocalVar, Option<int> limit, Option<string> period)
        {
            bool suppressDefaultLog = false;
            AfterGetLeaderboard(ref suppressDefaultLog, apiResponseLocalVar, limit, period);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="period"></param>
        partial void AfterGetLeaderboard(ref bool suppressDefaultLog, IGetLeaderboardApiResponse apiResponseLocalVar, Option<int> limit, Option<string> period);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="period"></param>
        private void OnErrorGetLeaderboardDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> limit, Option<string> period)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetLeaderboard(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, limit, period);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="period"></param>
        partial void OnErrorGetLeaderboard(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> limit, Option<string> period);

        /// <summary>
        /// Obter leaderboard público 
        /// </summary>
        /// <param name="limit">Número de usuários no ranking (optional, default to 10)</param>
        /// <param name="period">Período do ranking (optional, default to all)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLeaderboardApiResponse"/>&gt;</returns>
        public async Task<IGetLeaderboardApiResponse?> GetLeaderboardOrDefaultAsync(Option<int> limit = default, Option<string> period = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetLeaderboardAsync(limit, period, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Obter leaderboard público 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Número de usuários no ranking (optional, default to 10)</param>
        /// <param name="period">Período do ranking (optional, default to all)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLeaderboardApiResponse"/>&gt;</returns>
        public async Task<IGetLeaderboardApiResponse> GetLeaderboardAsync(Option<int> limit = default, Option<string> period = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetLeaderboard(period);

                FormatGetLeaderboard(ref limit, ref period);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/leaderboard"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/leaderboard");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (period.IsSet)
                        parseQueryStringLocalVar["period"] = ClientUtils.ParameterToString(period.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetLeaderboardApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetLeaderboardApiResponse>();

                        GetLeaderboardApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/leaderboard", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetLeaderboardDefaultImplementation(apiResponseLocalVar, limit, period);

                        Events.ExecuteOnGetLeaderboard(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetLeaderboardDefaultImplementation(e, "/api/leaderboard", uriBuilderLocalVar.Path, limit, period);
                Events.ExecuteOnErrorGetLeaderboard(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetLeaderboardApiResponse"/>
        /// </summary>
        public partial class GetLeaderboardApiResponse : GamifiedTasks.Client.Client.ApiResponse, IGetLeaderboardApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetLeaderboardApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetLeaderboardApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLeaderboardApiResponse(ILogger<GetLeaderboardApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public GamifiedTasks.Client.Model.GetLeaderboard200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<GamifiedTasks.Client.Model.GetLeaderboard200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out GamifiedTasks.Client.Model.GetLeaderboard200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetStoryById(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetStoryById(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetStoryByIdDefaultImplementation(IGetStoryByIdApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetStoryById(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetStoryById(ref bool suppressDefaultLog, IGetStoryByIdApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetStoryByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStoryById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetStoryById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get a specific story by ID 
        /// </summary>
        /// <param name="id">ID da história</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStoryByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStoryByIdApiResponse?> GetStoryByIdOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStoryByIdAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a specific story by ID 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID da história</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStoryByIdApiResponse"/>&gt;</returns>
        public async Task<IGetStoryByIdApiResponse> GetStoryByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetStoryById(id);

                FormatGetStoryById(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/tasks/stories/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/tasks/stories/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStoryByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStoryByIdApiResponse>();

                        GetStoryByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/tasks/stories/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStoryByIdDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetStoryById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStoryByIdDefaultImplementation(e, "/api/tasks/stories/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetStoryById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStoryByIdApiResponse"/>
        /// </summary>
        public partial class GetStoryByIdApiResponse : GamifiedTasks.Client.Client.ApiResponse, IGetStoryByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStoryByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStoryByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStoryByIdApiResponse(ILogger<GetStoryByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public GamifiedTasks.Client.Model.GetStoryById200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<GamifiedTasks.Client.Model.GetStoryById200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out GamifiedTasks.Client.Model.GetStoryById200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListStories(ref Option<string> active, ref Option<int> limit, ref Option<int> page);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="active"></param>
        /// <returns></returns>
        private void ValidateListStories(Option<string> active)
        {
            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="active"></param>
        /// <param name="limit"></param>
        /// <param name="page"></param>
        private void AfterListStoriesDefaultImplementation(IListStoriesApiResponse apiResponseLocalVar, Option<string> active, Option<int> limit, Option<int> page)
        {
            bool suppressDefaultLog = false;
            AfterListStories(ref suppressDefaultLog, apiResponseLocalVar, active, limit, page);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="active"></param>
        /// <param name="limit"></param>
        /// <param name="page"></param>
        partial void AfterListStories(ref bool suppressDefaultLog, IListStoriesApiResponse apiResponseLocalVar, Option<string> active, Option<int> limit, Option<int> page);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="active"></param>
        /// <param name="limit"></param>
        /// <param name="page"></param>
        private void OnErrorListStoriesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> active, Option<int> limit, Option<int> page)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListStories(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, active, limit, page);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="active"></param>
        /// <param name="limit"></param>
        /// <param name="page"></param>
        partial void OnErrorListStories(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> active, Option<int> limit, Option<int> page);

        /// <summary>
        /// List all stories for the user 
        /// </summary>
        /// <param name="active">Filtrar histórias ativas (optional, default to true)</param>
        /// <param name="limit">Limite de resultados (optional, default to 10)</param>
        /// <param name="page">Página (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListStoriesApiResponse"/>&gt;</returns>
        public async Task<IListStoriesApiResponse?> ListStoriesOrDefaultAsync(Option<string> active = default, Option<int> limit = default, Option<int> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListStoriesAsync(active, limit, page, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all stories for the user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Filtrar histórias ativas (optional, default to true)</param>
        /// <param name="limit">Limite de resultados (optional, default to 10)</param>
        /// <param name="page">Página (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListStoriesApiResponse"/>&gt;</returns>
        public async Task<IListStoriesApiResponse> ListStoriesAsync(Option<string> active = default, Option<int> limit = default, Option<int> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListStories(active);

                FormatListStories(ref active, ref limit, ref page);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/tasks/stories"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/tasks/stories");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (active.IsSet)
                        parseQueryStringLocalVar["active"] = ClientUtils.ParameterToString(active.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListStoriesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListStoriesApiResponse>();

                        ListStoriesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/tasks/stories", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListStoriesDefaultImplementation(apiResponseLocalVar, active, limit, page);

                        Events.ExecuteOnListStories(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListStoriesDefaultImplementation(e, "/api/tasks/stories", uriBuilderLocalVar.Path, active, limit, page);
                Events.ExecuteOnErrorListStories(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListStoriesApiResponse"/>
        /// </summary>
        public partial class ListStoriesApiResponse : GamifiedTasks.Client.Client.ApiResponse, IListStoriesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListStoriesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListStoriesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListStoriesApiResponse(ILogger<ListStoriesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public GamifiedTasks.Client.Model.ListStories200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<GamifiedTasks.Client.Model.ListStories200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out GamifiedTasks.Client.Model.ListStories200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatShareMilestone(ShareMilestoneRequest shareMilestoneRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="shareMilestoneRequest"></param>
        /// <returns></returns>
        private void ValidateShareMilestone(ShareMilestoneRequest shareMilestoneRequest)
        {
            if (shareMilestoneRequest == null)
                throw new ArgumentNullException(nameof(shareMilestoneRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shareMilestoneRequest"></param>
        private void AfterShareMilestoneDefaultImplementation(IShareMilestoneApiResponse apiResponseLocalVar, ShareMilestoneRequest shareMilestoneRequest)
        {
            bool suppressDefaultLog = false;
            AfterShareMilestone(ref suppressDefaultLog, apiResponseLocalVar, shareMilestoneRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shareMilestoneRequest"></param>
        partial void AfterShareMilestone(ref bool suppressDefaultLog, IShareMilestoneApiResponse apiResponseLocalVar, ShareMilestoneRequest shareMilestoneRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shareMilestoneRequest"></param>
        private void OnErrorShareMilestoneDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ShareMilestoneRequest shareMilestoneRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorShareMilestone(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, shareMilestoneRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shareMilestoneRequest"></param>
        partial void OnErrorShareMilestone(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ShareMilestoneRequest shareMilestoneRequest);

        /// <summary>
        /// Compartilhar conquista manualmente 
        /// </summary>
        /// <param name="shareMilestoneRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShareMilestoneApiResponse"/>&gt;</returns>
        public async Task<IShareMilestoneApiResponse?> ShareMilestoneOrDefaultAsync(ShareMilestoneRequest shareMilestoneRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ShareMilestoneAsync(shareMilestoneRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Compartilhar conquista manualmente 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareMilestoneRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShareMilestoneApiResponse"/>&gt;</returns>
        public async Task<IShareMilestoneApiResponse> ShareMilestoneAsync(ShareMilestoneRequest shareMilestoneRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateShareMilestone(shareMilestoneRequest);

                FormatShareMilestone(shareMilestoneRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/gamification/share"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/gamification/share");

                    httpRequestMessageLocalVar.Content = (shareMilestoneRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(shareMilestoneRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ShareMilestoneApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ShareMilestoneApiResponse>();

                        ShareMilestoneApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/gamification/share", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterShareMilestoneDefaultImplementation(apiResponseLocalVar, shareMilestoneRequest);

                        Events.ExecuteOnShareMilestone(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorShareMilestoneDefaultImplementation(e, "/api/gamification/share", uriBuilderLocalVar.Path, shareMilestoneRequest);
                Events.ExecuteOnErrorShareMilestone(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ShareMilestoneApiResponse"/>
        /// </summary>
        public partial class ShareMilestoneApiResponse : GamifiedTasks.Client.Client.ApiResponse, IShareMilestoneApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ShareMilestoneApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ShareMilestoneApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ShareMilestoneApiResponse(ILogger<ShareMilestoneApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public GamifiedTasks.Client.Model.ShareMilestone200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<GamifiedTasks.Client.Model.ShareMilestone200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out GamifiedTasks.Client.Model.ShareMilestone200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateGamificationPreferences(Option<UpdateGamificationPreferencesRequest> updateGamificationPreferencesRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateGamificationPreferencesRequest"></param>
        /// <returns></returns>
        private void ValidateUpdateGamificationPreferences(Option<UpdateGamificationPreferencesRequest> updateGamificationPreferencesRequest)
        {
            if (updateGamificationPreferencesRequest.IsSet && updateGamificationPreferencesRequest.Value == null)
                throw new ArgumentNullException(nameof(updateGamificationPreferencesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="updateGamificationPreferencesRequest"></param>
        private void AfterUpdateGamificationPreferencesDefaultImplementation(IUpdateGamificationPreferencesApiResponse apiResponseLocalVar, Option<UpdateGamificationPreferencesRequest> updateGamificationPreferencesRequest)
        {
            bool suppressDefaultLog = false;
            AfterUpdateGamificationPreferences(ref suppressDefaultLog, apiResponseLocalVar, updateGamificationPreferencesRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="updateGamificationPreferencesRequest"></param>
        partial void AfterUpdateGamificationPreferences(ref bool suppressDefaultLog, IUpdateGamificationPreferencesApiResponse apiResponseLocalVar, Option<UpdateGamificationPreferencesRequest> updateGamificationPreferencesRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="updateGamificationPreferencesRequest"></param>
        private void OnErrorUpdateGamificationPreferencesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<UpdateGamificationPreferencesRequest> updateGamificationPreferencesRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateGamificationPreferences(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, updateGamificationPreferencesRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="updateGamificationPreferencesRequest"></param>
        partial void OnErrorUpdateGamificationPreferences(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<UpdateGamificationPreferencesRequest> updateGamificationPreferencesRequest);

        /// <summary>
        /// Atualizar preferências de gamificação 
        /// </summary>
        /// <param name="updateGamificationPreferencesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGamificationPreferencesApiResponse"/>&gt;</returns>
        public async Task<IUpdateGamificationPreferencesApiResponse?> UpdateGamificationPreferencesOrDefaultAsync(Option<UpdateGamificationPreferencesRequest> updateGamificationPreferencesRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateGamificationPreferencesAsync(updateGamificationPreferencesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Atualizar preferências de gamificação 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGamificationPreferencesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGamificationPreferencesApiResponse"/>&gt;</returns>
        public async Task<IUpdateGamificationPreferencesApiResponse> UpdateGamificationPreferencesAsync(Option<UpdateGamificationPreferencesRequest> updateGamificationPreferencesRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateGamificationPreferences(updateGamificationPreferencesRequest);

                FormatUpdateGamificationPreferences(updateGamificationPreferencesRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/gamification/preferences"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/gamification/preferences");

                    if (updateGamificationPreferencesRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (updateGamificationPreferencesRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateGamificationPreferencesRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateGamificationPreferencesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateGamificationPreferencesApiResponse>();

                        UpdateGamificationPreferencesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/gamification/preferences", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateGamificationPreferencesDefaultImplementation(apiResponseLocalVar, updateGamificationPreferencesRequest);

                        Events.ExecuteOnUpdateGamificationPreferences(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateGamificationPreferencesDefaultImplementation(e, "/api/gamification/preferences", uriBuilderLocalVar.Path, updateGamificationPreferencesRequest);
                Events.ExecuteOnErrorUpdateGamificationPreferences(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateGamificationPreferencesApiResponse"/>
        /// </summary>
        public partial class UpdateGamificationPreferencesApiResponse : GamifiedTasks.Client.Client.ApiResponse, IUpdateGamificationPreferencesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateGamificationPreferencesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateGamificationPreferencesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateGamificationPreferencesApiResponse(ILogger<UpdateGamificationPreferencesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public GamifiedTasks.Client.Model.UpdateGamificationPreferences200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<GamifiedTasks.Client.Model.UpdateGamificationPreferences200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out GamifiedTasks.Client.Model.UpdateGamificationPreferences200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
