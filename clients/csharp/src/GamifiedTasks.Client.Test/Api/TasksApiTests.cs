/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using GamifiedTasks.Client.Api;
using GamifiedTasks.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace GamifiedTasks.Client.Test.Api
{
    /// <summary>
    ///  Class for testing TasksApi
    /// </summary>
    public sealed class TasksApiTests : ApiTestsBase
    {
        private readonly ITasksApi _instance;

        public TasksApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ITasksApi>();
        }

        /// <summary>
        /// Test CompleteTask
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CompleteTaskAsyncTest()
        {
            string id = default!;
            var response = await _instance.CompleteTaskAsync(id);
            var model = response.Ok();
            Assert.IsType<CompleteTask200Response>(model);
        }

        /// <summary>
        /// Test CreateTask
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateTaskAsyncTest()
        {
            CreateTaskRequest createTaskRequest = default!;
            var response = await _instance.CreateTaskAsync(createTaskRequest);
            var model = response.Created();
            Assert.IsType<CreateTask201Response>(model);
        }

        /// <summary>
        /// Test DeleteTask
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteTaskAsyncTest()
        {
            string id = default!;
            var response = await _instance.DeleteTaskAsync(id);
            var model = response.Ok();
            Assert.IsType<DeleteTask200Response>(model);
        }

        /// <summary>
        /// Test GetTaskById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTaskByIdAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetTaskByIdAsync(id);
            var model = response.Ok();
            Assert.IsType<GetTaskById200Response>(model);
        }

        /// <summary>
        /// Test GetTaskStats
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTaskStatsAsyncTest()
        {
            var response = await _instance.GetTaskStatsAsync();
            var model = response.Ok();
            Assert.IsType<GetTaskStats200Response>(model);
        }

        /// <summary>
        /// Test ListTasks
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListTasksAsyncTest()
        {
            Client.Option<string> status = default!;
            Client.Option<string> priority = default!;
            Client.Option<int> page = default!;
            Client.Option<int> limit = default!;
            Client.Option<string> sortBy = default!;
            Client.Option<string> sortOrder = default!;
            Client.Option<string> search = default!;
            var response = await _instance.ListTasksAsync(status, priority, page, limit, sortBy, sortOrder, search);
            var model = response.Ok();
            Assert.IsType<ListTasks200Response>(model);
        }

        /// <summary>
        /// Test ListTasksByStatus
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListTasksByStatusAsyncTest()
        {
            string status = default!;
            Client.Option<int> page = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.ListTasksByStatusAsync(status, page, limit);
            var model = response.Ok();
            Assert.IsType<ListTasksByStatus200Response>(model);
        }

        /// <summary>
        /// Test UpdateTask
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateTaskAsyncTest()
        {
            string id = default!;
            UpdateTaskRequest updateTaskRequest = default!;
            var response = await _instance.UpdateTaskAsync(id, updateTaskRequest);
            var model = response.Ok();
            Assert.IsType<UpdateTask200Response>(model);
        }
    }
}
