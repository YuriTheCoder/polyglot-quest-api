/*
 * Gamified Task Management API
 *
 * API REST gamificada para gerenciamento de tarefas com IA, XP, levels e sistema de recompensas
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using GamifiedTasks.Client.Api;
using GamifiedTasks.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace GamifiedTasks.Client.Test.Api
{
    /// <summary>
    ///  Class for testing AuthApi
    /// </summary>
    public sealed class AuthApiTests : ApiTestsBase
    {
        private readonly IAuthApi _instance;

        public AuthApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IAuthApi>();
        }

        /// <summary>
        /// Test ChangeUserPassword
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ChangeUserPasswordAsyncTest()
        {
            ChangeUserPasswordRequest changeUserPasswordRequest = default!;
            var response = await _instance.ChangeUserPasswordAsync(changeUserPasswordRequest);
            var model = response.Ok();
            Assert.IsType<ChangeUserPassword200Response>(model);
        }

        /// <summary>
        /// Test GetUserProfile
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserProfileAsyncTest()
        {
            var response = await _instance.GetUserProfileAsync();
            var model = response.Ok();
            Assert.IsType<GetUserProfile200Response>(model);
        }

        /// <summary>
        /// Test LoginUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LoginUserAsyncTest()
        {
            LoginUserRequest loginUserRequest = default!;
            var response = await _instance.LoginUserAsync(loginUserRequest);
            var model = response.Ok();
            Assert.IsType<LoginUser200Response>(model);
        }

        /// <summary>
        /// Test LogoutUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LogoutUserAsyncTest()
        {
            var response = await _instance.LogoutUserAsync();
            var model = response.Ok();
            Assert.IsType<LogoutUser200Response>(model);
        }

        /// <summary>
        /// Test RegisterUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RegisterUserAsyncTest()
        {
            RegisterUserRequest registerUserRequest = default!;
            var response = await _instance.RegisterUserAsync(registerUserRequest);
            var model = response.Created();
            Assert.IsType<RegisterUser201Response>(model);
        }

        /// <summary>
        /// Test UpdateUserProfile
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateUserProfileAsyncTest()
        {
            UpdateUserProfileRequest updateUserProfileRequest = default!;
            var response = await _instance.UpdateUserProfileAsync(updateUserProfileRequest);
            var model = response.Ok();
            Assert.IsType<UpdateUserProfile200Response>(model);
        }
    }
}
